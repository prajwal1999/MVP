// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data] 32 $depth 2 
// $pipe  out_data : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data] 32 $depth 2 
// load store constants for object A_0
$constant $W[A_0_base_address] : $int<9> := _b000000000
// load store constants for object A_1
$constant $W[A_1_base_address] : $int<9> := _b000000000
// load store constants for object x_0
$constant $W[x_0_base_address] : $int<4> := _b0000
// load store constants for object x_1
$constant $W[x_1_base_address] : $int<4> := _b0000
// load store constants for object y
$constant $W[y_base_address] : $int<5> := _b00000
$memoryspace [memory_space_0] 
{
  $capacity 512
  $datawidth 32
  $addrwidth 9
  $maxaccesswidth 32
  // $storage  A_0 : $array[32][16] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [A_0] : $array[512] $of $int<32>
}
$memoryspace [memory_space_1] 
{
  $capacity 512
  $datawidth 32
  $addrwidth 9
  $maxaccesswidth 32
  // $storage  A_1 : $array[32][16] $of $uint<32> // memory space index = 1  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [A_1] : $array[512] $of $int<32>
}
$memoryspace [memory_space_2] 
{
  $capacity 16
  $datawidth 32
  $addrwidth 4
  $maxaccesswidth 32
  // $storage  x_0 : $array[16] $of $uint<32> // memory space index = 2  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x_0] : $array[16] $of $int<32>
}
$memoryspace [memory_space_3] 
{
  $capacity 16
  $datawidth 32
  $addrwidth 4
  $maxaccesswidth 32
  // $storage  x_1 : $array[16] $of $uint<32> // memory space index = 3  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [x_1] : $array[16] $of $int<32>
}
$memoryspace [memory_space_4] 
{
  $capacity 32
  $datawidth 32
  $addrwidth 5
  $maxaccesswidth 32
  // $storage  y : $array[32] $of $uint<32> // memory space index = 4  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [y] : $array[32] $of $int<32>
}
$module [dotP_even] 
{
  $in R:$int<8>
  // can point into 
  $out result:$int<32>
  // can point into 
  // pipe-declarations for block %dotP_even
  //  file .Aa/mvp.opt.aa, line 15
  // pipe-declarations for block %dotP_even%mmloop
  //  file .Aa/mvp.opt.aa, line 20
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_15] // Branch Block  file .Aa/mvp.opt.aa, line 20
    {
      $P [branch_block_stmt_15__entry__]
      branch_block_stmt_15__entry__ <-| ($entry)
      $P [branch_block_stmt_15__exit__]
      branch_block_stmt_15__exit__ |-> ($exit)
      $P [do_while_stmt_16__entry__] 
      $P [do_while_stmt_16__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 22
      <o> [do_while_stmt_16]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_16__entry__] 
        $P[do_while_stmt_16__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_16_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_18
          // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_18_sample_start_] 
          $T[phi_stmt_18_sample_completed_] 
          $T[phi_stmt_18_update_start_] 
          $T[phi_stmt_18_update_completed_] 
          $T[phi_stmt_18_sample_start__ps] 
          phi_stmt_18_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_18_sample_completed__ps] 
          phi_stmt_18_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_18_update_start__ps] 
          phi_stmt_18_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_18_update_completed__ps] 
          phi_stmt_18_update_completed_ <-& (phi_stmt_18_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_18_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_18_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_18_update_start_)
          $T[phi_stmt_18_loopback_trigger] 
          phi_stmt_18_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_18_loopback_sample_req] 
          $T[phi_stmt_18_loopback_sample_req_ps] 
          phi_stmt_18_loopback_sample_req <-& (phi_stmt_18_loopback_sample_req_ps)
          phi_stmt_18_loopback_sample_req &-> ($null)
          $T[phi_stmt_18_entry_trigger] 
          phi_stmt_18_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_18_entry_sample_req] 
          $T[phi_stmt_18_entry_sample_req_ps] 
          phi_stmt_18_entry_sample_req <-& (phi_stmt_18_entry_sample_req_ps)
          phi_stmt_18_entry_sample_req &-> ($null)
          phi_stmt_18_update_start_ o<-& (phi_stmt_18_update_completed_ 0)
          phi_stmt_18_sample_start_ o<-& (phi_stmt_18_sample_completed_ 1)
          $T[phi_stmt_18_merged_reqs] 
          $T[phi_stmt_18_phi_mux_ack] 
          $T[phi_stmt_18_phi_mux_ack_ps] 
          phi_stmt_18_phi_mux_ack_ps <-& (phi_stmt_18_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_18_update_completed_)
          $T[type_cast_21_sample_start__ps] 
          $T[type_cast_21_sample_completed__ps] 
          $T[type_cast_21_update_start__ps] 
          $T[type_cast_21_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_21_sample_start_] 
          $T[type_cast_21_sample_completed_] 
          type_cast_21_sample_completed_ <-& (type_cast_21_sample_start_)
          $T[type_cast_21_update_start_] 
          $T [type_cast_21_update_completed_] $delay 
          type_cast_21_update_completed_ <-& (type_cast_21_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_21_sample_start_ <-& (type_cast_21_sample_start__ps)
          type_cast_21_update_start_ <-& (type_cast_21_update_start__ps)
          // Phi complete dependency.
          type_cast_21_sample_completed__ps <-& (type_cast_21_sample_completed_)
          type_cast_21_update_completed__ps <-& (type_cast_21_update_completed_)
          $T[R_nC_22_sample_start__ps] 
          $T[R_nC_22_sample_completed__ps] 
          $T[R_nC_22_update_start__ps] 
          $T[R_nC_22_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nC_22_sample_start_] 
          $T[R_nC_22_sample_completed_] 
          $T[R_nC_22_update_start_] 
          $T[R_nC_22_update_completed_] 
          ;;[R_nC_22_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nC_22_sample_start_ &-> (R_nC_22_Sample)
          R_nC_22_sample_completed_ <-& (R_nC_22_Sample)
          ;;[R_nC_22_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nC_22_update_start_ &-> (R_nC_22_Update)
          R_nC_22_update_completed_ <-& (R_nC_22_Update)
          // RAW reenables for nC
          // Phi start dependency for implicit/constant alternative.
          R_nC_22_sample_start_ <-& (R_nC_22_sample_start__ps)
          R_nC_22_update_start_ <-& (R_nC_22_update_start__ps)
          // Phi complete dependency.
          R_nC_22_sample_completed__ps <-& (R_nC_22_sample_completed_)
          R_nC_22_update_completed__ps <-& (R_nC_22_update_completed_)
          $phisequencer [ phi_stmt_18_phi_seq] : 
          phi_stmt_18_entry_trigger type_cast_21_sample_start__ps type_cast_21_sample_completed__ps type_cast_21_update_start__ps type_cast_21_update_completed__ps phi_stmt_18_loopback_trigger R_nC_22_sample_start__ps R_nC_22_sample_completed__ps R_nC_22_update_start__ps R_nC_22_update_completed__ps :
          phi_stmt_18_sample_start__ps phi_stmt_18_sample_completed__ps phi_stmt_18_update_start__ps phi_stmt_18_update_completed__ps :
          phi_stmt_18_entry_sample_req_ps phi_stmt_18_loopback_sample_req_ps : 
          phi_stmt_18_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_18
          // start:  PHI statement phi_stmt_23
          // 			$phi val_even := 			  nval_even $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_23_sample_start_] 
          $T[phi_stmt_23_sample_completed_] 
          $T[phi_stmt_23_update_start_] 
          $T[phi_stmt_23_update_completed_] 
          $T[phi_stmt_23_sample_start__ps] 
          phi_stmt_23_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_23_sample_completed__ps] 
          phi_stmt_23_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_23_update_start__ps] 
          phi_stmt_23_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_23_update_completed__ps] 
          phi_stmt_23_update_completed_ <-& (phi_stmt_23_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_23_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_23_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_23_update_start_)
          $T[phi_stmt_23_loopback_trigger] 
          phi_stmt_23_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_23_loopback_sample_req] 
          $T[phi_stmt_23_loopback_sample_req_ps] 
          phi_stmt_23_loopback_sample_req <-& (phi_stmt_23_loopback_sample_req_ps)
          phi_stmt_23_loopback_sample_req &-> ($null)
          $T[phi_stmt_23_entry_trigger] 
          phi_stmt_23_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_23_entry_sample_req] 
          $T[phi_stmt_23_entry_sample_req_ps] 
          phi_stmt_23_entry_sample_req <-& (phi_stmt_23_entry_sample_req_ps)
          phi_stmt_23_entry_sample_req &-> ($null)
          phi_stmt_23_update_start_ o<-& (phi_stmt_23_update_completed_ 0)
          phi_stmt_23_sample_start_ o<-& (phi_stmt_23_sample_completed_ 1)
          $T[phi_stmt_23_merged_reqs] 
          $T[phi_stmt_23_phi_mux_ack] 
          $T[phi_stmt_23_phi_mux_ack_ps] 
          phi_stmt_23_phi_mux_ack_ps <-& (phi_stmt_23_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_23_update_completed_)
          $T[R_nval_even_25_sample_start__ps] 
          $T[R_nval_even_25_sample_completed__ps] 
          $T[R_nval_even_25_update_start__ps] 
          $T[R_nval_even_25_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nval_even_25_sample_start_] 
          $T[R_nval_even_25_sample_completed_] 
          $T[R_nval_even_25_update_start_] 
          $T[R_nval_even_25_update_completed_] 
          ;;[R_nval_even_25_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_even_25_sample_start_ &-> (R_nval_even_25_Sample)
          R_nval_even_25_sample_completed_ <-& (R_nval_even_25_Sample)
          ;;[R_nval_even_25_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_even_25_update_start_ &-> (R_nval_even_25_Update)
          R_nval_even_25_update_completed_ <-& (R_nval_even_25_Update)
          // RAW reenables for nval_even
          // Phi start dependency for implicit/constant alternative.
          R_nval_even_25_sample_start_ <-& (R_nval_even_25_sample_start__ps)
          R_nval_even_25_update_start_ <-& (R_nval_even_25_update_start__ps)
          // Phi complete dependency.
          R_nval_even_25_sample_completed__ps <-& (R_nval_even_25_sample_completed_)
          R_nval_even_25_update_completed__ps <-& (R_nval_even_25_update_completed_)
          $T[type_cast_27_sample_start__ps] 
          $T[type_cast_27_sample_completed__ps] 
          $T[type_cast_27_update_start__ps] 
          $T[type_cast_27_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_27_sample_start_] 
          $T[type_cast_27_sample_completed_] 
          type_cast_27_sample_completed_ <-& (type_cast_27_sample_start_)
          $T[type_cast_27_update_start_] 
          $T [type_cast_27_update_completed_] $delay 
          type_cast_27_update_completed_ <-& (type_cast_27_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_27_sample_start_ <-& (type_cast_27_sample_start__ps)
          type_cast_27_update_start_ <-& (type_cast_27_update_start__ps)
          // Phi complete dependency.
          type_cast_27_sample_completed__ps <-& (type_cast_27_sample_completed_)
          type_cast_27_update_completed__ps <-& (type_cast_27_update_completed_)
          $phisequencer [ phi_stmt_23_phi_seq] : 
          phi_stmt_23_loopback_trigger R_nval_even_25_sample_start__ps R_nval_even_25_sample_completed__ps R_nval_even_25_update_start__ps R_nval_even_25_update_completed__ps phi_stmt_23_entry_trigger type_cast_27_sample_start__ps type_cast_27_sample_completed__ps type_cast_27_update_start__ps type_cast_27_update_completed__ps :
          phi_stmt_23_sample_start__ps phi_stmt_23_sample_completed__ps phi_stmt_23_update_start__ps phi_stmt_23_update_completed__ps :
          phi_stmt_23_loopback_sample_req_ps phi_stmt_23_entry_sample_req_ps : 
          phi_stmt_23_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_23
          // start:  PHI statement phi_stmt_28
          // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_28_sample_start_] 
          $T[phi_stmt_28_sample_completed_] 
          $T[phi_stmt_28_update_start_] 
          $T[phi_stmt_28_update_completed_] 
          $T[phi_stmt_28_sample_start__ps] 
          phi_stmt_28_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_28_sample_completed__ps] 
          phi_stmt_28_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_28_update_start__ps] 
          phi_stmt_28_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_28_update_completed__ps] 
          phi_stmt_28_update_completed_ <-& (phi_stmt_28_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_28_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_28_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_28_update_start_)
          $T[phi_stmt_28_loopback_trigger] 
          phi_stmt_28_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_28_loopback_sample_req] 
          $T[phi_stmt_28_loopback_sample_req_ps] 
          phi_stmt_28_loopback_sample_req <-& (phi_stmt_28_loopback_sample_req_ps)
          phi_stmt_28_loopback_sample_req &-> ($null)
          $T[phi_stmt_28_entry_trigger] 
          phi_stmt_28_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_28_entry_sample_req] 
          $T[phi_stmt_28_entry_sample_req_ps] 
          phi_stmt_28_entry_sample_req <-& (phi_stmt_28_entry_sample_req_ps)
          phi_stmt_28_entry_sample_req &-> ($null)
          phi_stmt_28_update_start_ o<-& (phi_stmt_28_update_completed_ 0)
          phi_stmt_28_sample_start_ o<-& (phi_stmt_28_sample_completed_ 1)
          $T[phi_stmt_28_merged_reqs] 
          $T[phi_stmt_28_phi_mux_ack] 
          $T[phi_stmt_28_phi_mux_ack_ps] 
          phi_stmt_28_phi_mux_ack_ps <-& (phi_stmt_28_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_28_update_completed_)
          $T[type_cast_31_sample_start__ps] 
          $T[type_cast_31_sample_completed__ps] 
          $T[type_cast_31_update_start__ps] 
          $T[type_cast_31_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_31_sample_start_] 
          $T[type_cast_31_sample_completed_] 
          type_cast_31_sample_completed_ <-& (type_cast_31_sample_start_)
          $T[type_cast_31_update_start_] 
          $T [type_cast_31_update_completed_] $delay 
          type_cast_31_update_completed_ <-& (type_cast_31_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_31_sample_start_ <-& (type_cast_31_sample_start__ps)
          type_cast_31_update_start_ <-& (type_cast_31_update_start__ps)
          // Phi complete dependency.
          type_cast_31_sample_completed__ps <-& (type_cast_31_sample_completed_)
          type_cast_31_update_completed__ps <-& (type_cast_31_update_completed_)
          $T[R_nval_odd_32_sample_start__ps] 
          $T[R_nval_odd_32_sample_completed__ps] 
          $T[R_nval_odd_32_update_start__ps] 
          $T[R_nval_odd_32_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_odd_32_sample_start_] 
          $T[R_nval_odd_32_sample_completed_] 
          $T[R_nval_odd_32_update_start_] 
          $T[R_nval_odd_32_update_completed_] 
          ;;[R_nval_odd_32_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_odd_32_sample_start_ &-> (R_nval_odd_32_Sample)
          R_nval_odd_32_sample_completed_ <-& (R_nval_odd_32_Sample)
          ;;[R_nval_odd_32_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_odd_32_update_start_ &-> (R_nval_odd_32_Update)
          R_nval_odd_32_update_completed_ <-& (R_nval_odd_32_Update)
          // RAW reenables for nval_odd
          // Phi start dependency for implicit/constant alternative.
          R_nval_odd_32_sample_start_ <-& (R_nval_odd_32_sample_start__ps)
          R_nval_odd_32_update_start_ <-& (R_nval_odd_32_update_start__ps)
          // Phi complete dependency.
          R_nval_odd_32_sample_completed__ps <-& (R_nval_odd_32_sample_completed_)
          R_nval_odd_32_update_completed__ps <-& (R_nval_odd_32_update_completed_)
          $phisequencer [ phi_stmt_28_phi_seq] : 
          phi_stmt_28_entry_trigger type_cast_31_sample_start__ps type_cast_31_sample_completed__ps type_cast_31_update_start__ps type_cast_31_update_completed__ps phi_stmt_28_loopback_trigger R_nval_odd_32_sample_start__ps R_nval_odd_32_sample_completed__ps R_nval_odd_32_update_start__ps R_nval_odd_32_update_completed__ps :
          phi_stmt_28_sample_start__ps phi_stmt_28_sample_completed__ps phi_stmt_28_update_start__ps phi_stmt_28_update_completed__ps :
          phi_stmt_28_entry_sample_req_ps phi_stmt_28_loopback_sample_req_ps : 
          phi_stmt_28_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_28
          // start: WAR dependencies for Cr
          // done: WAR dependencies for Cr
          // start:  			$volatile Cr := ( $slice C 7 1 )  $buffering 1
          //  file .Aa/mvp.opt.aa, line 32
          // volatile! 
          // Source expression
          // ( $slice C 7 1 ) 
          // C
          // Target expression
          // (as target) Cr
          // start: WAR dependencies for Cr
          // done: WAR dependencies for Cr
          // end:  			$volatile Cr := ( $slice C 7 1 )  $buffering 1
          // start:  			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 33
          // Source expression
          // A_0[R][Cr]
          $T[array_obj_ref_42_base_address_calculated] 
          $T[array_obj_ref_42_sample_start_] 
          $T[array_obj_ref_42_sample_completed_] 
          $T[array_obj_ref_42_update_start_] 
          $T[array_obj_ref_42_update_completed_] 
          $T[array_obj_ref_42_word_address_calculated] 
          $T[array_obj_ref_42_root_address_calculated] 
          $T[array_obj_ref_42_offset_calculated] 
          $T[array_obj_ref_42_index_resized_0] 
          $T[array_obj_ref_42_index_scaled_0] 
          $T[array_obj_ref_42_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_42_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_42_index_computed_0
          ;;[array_obj_ref_42_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_42_index_computed_0 &-> (array_obj_ref_42_index_resize_0)
          array_obj_ref_42_index_resized_0 <-& (array_obj_ref_42_index_resize_0)
          $T[array_obj_ref_42_index_scale_0_sample_start] 
          $T[array_obj_ref_42_index_scale_0_sample_complete] 
          $T[array_obj_ref_42_index_scale_0_update_start] 
          $T[array_obj_ref_42_index_scale_0_update_complete] 
          ;;[array_obj_ref_42_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_42_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_42_index_resized_0 &-> (array_obj_ref_42_index_scale_0_sample_start)
          array_obj_ref_42_index_scale_0_sample_start &-> (array_obj_ref_42_index_scale_0_Sample)
          array_obj_ref_42_index_scale_0_sample_complete <-& (array_obj_ref_42_index_scale_0_Sample)
          array_obj_ref_42_index_scale_0_update_start &-> (array_obj_ref_42_index_scale_0_Update)
          array_obj_ref_42_index_scale_0_update_complete <-& (array_obj_ref_42_index_scale_0_Update)
          array_obj_ref_42_index_scaled_0 <-& (array_obj_ref_42_index_scale_0_update_complete)
          array_obj_ref_42_index_scale_0_sample_start o<-& (array_obj_ref_42_index_scale_0_sample_complete 1)
          array_obj_ref_42_index_scale_0_update_start o<-& (array_obj_ref_42_index_scale_0_update_complete 0)
          $T[array_obj_ref_42_index_resized_1] 
          $T[array_obj_ref_42_index_scaled_1] 
          $T[array_obj_ref_42_index_computed_1] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_42_index_computed_1
          array_obj_ref_42_index_computed_1 <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_42_index_computed_1
          ;;[array_obj_ref_42_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_42_index_computed_1 &-> (array_obj_ref_42_index_resize_1)
          array_obj_ref_42_index_resized_1 <-& (array_obj_ref_42_index_resize_1)
          ;;[array_obj_ref_42_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_42_index_resized_1 &-> (array_obj_ref_42_index_scale_1)
          array_obj_ref_42_index_scaled_1 <-& (array_obj_ref_42_index_scale_1)
          $T[array_obj_ref_42_partial_sum_1_sample_start] 
          $T[array_obj_ref_42_partial_sum_1_sample_complete] 
          $T[array_obj_ref_42_partial_sum_1_update_start] 
          $T[array_obj_ref_42_partial_sum_1_update_complete] 
          ;;[array_obj_ref_42_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_42_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_42_partial_sum_1_sample_start &-> (array_obj_ref_42_partial_sum_1_Sample)
          array_obj_ref_42_partial_sum_1_sample_complete <-& (array_obj_ref_42_partial_sum_1_Sample)
          array_obj_ref_42_partial_sum_1_update_start &-> (array_obj_ref_42_partial_sum_1_Update)
          array_obj_ref_42_partial_sum_1_update_complete <-& (array_obj_ref_42_partial_sum_1_Update)
          array_obj_ref_42_partial_sum_1_sample_start o<-& (array_obj_ref_42_partial_sum_1_sample_complete 1)
          array_obj_ref_42_partial_sum_1_update_start o<-& (array_obj_ref_42_partial_sum_1_update_complete 0)
          array_obj_ref_42_partial_sum_1_sample_start <-& (array_obj_ref_42_index_scaled_0)
          array_obj_ref_42_partial_sum_1_sample_start <-& (array_obj_ref_42_index_scaled_1)
          array_obj_ref_42_index_scaled_0 o<-& (array_obj_ref_42_partial_sum_1_sample_complete 1)
          phi_stmt_18_update_start_ o<-& (array_obj_ref_42_partial_sum_1_sample_complete 1)
          array_obj_ref_42_offset_calculated <-& (array_obj_ref_42_partial_sum_1_update_complete)
          ;;[array_obj_ref_42_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_42_partial_sum_1_update_complete &-> (array_obj_ref_42_final_index_sum_regn)
          array_obj_ref_42_offset_calculated <-& (array_obj_ref_42_final_index_sum_regn)
          ;;[array_obj_ref_42_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_42_offset_calculated &-> (array_obj_ref_42_base_plus_offset)
          array_obj_ref_42_root_address_calculated <-& (array_obj_ref_42_base_plus_offset)
          ;;[array_obj_ref_42_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_42_root_address_calculated &-> (array_obj_ref_42_word_addrgen)
          array_obj_ref_42_word_address_calculated <-& (array_obj_ref_42_word_addrgen)
          ;;[array_obj_ref_42_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_42_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_42_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_42_sample_start_ <-& (array_obj_ref_42_word_address_calculated)
          // reenable-joins
          array_obj_ref_42_partial_sum_1_update_start o<-& (array_obj_ref_42_sample_completed_ 0)
          array_obj_ref_42_sample_start_ &-> (array_obj_ref_42_Sample)
          array_obj_ref_42_sample_completed_ <-& (array_obj_ref_42_Sample)
          array_obj_ref_42_sample_completed_ &-> ($null)
          array_obj_ref_42_update_start_ &-> (array_obj_ref_42_Update)
          array_obj_ref_42_update_completed_ <-& (array_obj_ref_42_Update)
          // self-release: 
          array_obj_ref_42_sample_start_ o<-& (array_obj_ref_42_sample_completed_ 1)
          $null &-> (array_obj_ref_42_update_start_)
          array_obj_ref_42_update_start_ o<-& (array_obj_ref_42_update_completed_ 0)
          // Target expression
          // (as target) a_rc_even
          // start: WAR dependencies for a_rc_even
          // done: WAR dependencies for a_rc_even
          // end:  			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 34
          // Source expression
          // A_1[R][Cr]
          $T[array_obj_ref_47_base_address_calculated] 
          $T[array_obj_ref_47_sample_start_] 
          $T[array_obj_ref_47_sample_completed_] 
          $T[array_obj_ref_47_update_start_] 
          $T[array_obj_ref_47_update_completed_] 
          $T[array_obj_ref_47_word_address_calculated] 
          $T[array_obj_ref_47_root_address_calculated] 
          $T[array_obj_ref_47_offset_calculated] 
          $T[array_obj_ref_47_index_resized_0] 
          $T[array_obj_ref_47_index_scaled_0] 
          $T[array_obj_ref_47_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_47_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_47_index_computed_0
          ;;[array_obj_ref_47_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_47_index_computed_0 &-> (array_obj_ref_47_index_resize_0)
          array_obj_ref_47_index_resized_0 <-& (array_obj_ref_47_index_resize_0)
          $T[array_obj_ref_47_index_scale_0_sample_start] 
          $T[array_obj_ref_47_index_scale_0_sample_complete] 
          $T[array_obj_ref_47_index_scale_0_update_start] 
          $T[array_obj_ref_47_index_scale_0_update_complete] 
          ;;[array_obj_ref_47_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_47_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_47_index_resized_0 &-> (array_obj_ref_47_index_scale_0_sample_start)
          array_obj_ref_47_index_scale_0_sample_start &-> (array_obj_ref_47_index_scale_0_Sample)
          array_obj_ref_47_index_scale_0_sample_complete <-& (array_obj_ref_47_index_scale_0_Sample)
          array_obj_ref_47_index_scale_0_update_start &-> (array_obj_ref_47_index_scale_0_Update)
          array_obj_ref_47_index_scale_0_update_complete <-& (array_obj_ref_47_index_scale_0_Update)
          array_obj_ref_47_index_scaled_0 <-& (array_obj_ref_47_index_scale_0_update_complete)
          array_obj_ref_47_index_scale_0_sample_start o<-& (array_obj_ref_47_index_scale_0_sample_complete 1)
          array_obj_ref_47_index_scale_0_update_start o<-& (array_obj_ref_47_index_scale_0_update_complete 0)
          $T[array_obj_ref_47_index_resized_1] 
          $T[array_obj_ref_47_index_scaled_1] 
          $T[array_obj_ref_47_index_computed_1] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_47_index_computed_1
          array_obj_ref_47_index_computed_1 <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_47_index_computed_1
          ;;[array_obj_ref_47_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_47_index_computed_1 &-> (array_obj_ref_47_index_resize_1)
          array_obj_ref_47_index_resized_1 <-& (array_obj_ref_47_index_resize_1)
          ;;[array_obj_ref_47_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_47_index_resized_1 &-> (array_obj_ref_47_index_scale_1)
          array_obj_ref_47_index_scaled_1 <-& (array_obj_ref_47_index_scale_1)
          $T[array_obj_ref_47_partial_sum_1_sample_start] 
          $T[array_obj_ref_47_partial_sum_1_sample_complete] 
          $T[array_obj_ref_47_partial_sum_1_update_start] 
          $T[array_obj_ref_47_partial_sum_1_update_complete] 
          ;;[array_obj_ref_47_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_47_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_47_partial_sum_1_sample_start &-> (array_obj_ref_47_partial_sum_1_Sample)
          array_obj_ref_47_partial_sum_1_sample_complete <-& (array_obj_ref_47_partial_sum_1_Sample)
          array_obj_ref_47_partial_sum_1_update_start &-> (array_obj_ref_47_partial_sum_1_Update)
          array_obj_ref_47_partial_sum_1_update_complete <-& (array_obj_ref_47_partial_sum_1_Update)
          array_obj_ref_47_partial_sum_1_sample_start o<-& (array_obj_ref_47_partial_sum_1_sample_complete 1)
          array_obj_ref_47_partial_sum_1_update_start o<-& (array_obj_ref_47_partial_sum_1_update_complete 0)
          array_obj_ref_47_partial_sum_1_sample_start <-& (array_obj_ref_47_index_scaled_0)
          array_obj_ref_47_partial_sum_1_sample_start <-& (array_obj_ref_47_index_scaled_1)
          array_obj_ref_47_index_scaled_0 o<-& (array_obj_ref_47_partial_sum_1_sample_complete 1)
          phi_stmt_18_update_start_ o<-& (array_obj_ref_47_partial_sum_1_sample_complete 1)
          array_obj_ref_47_offset_calculated <-& (array_obj_ref_47_partial_sum_1_update_complete)
          ;;[array_obj_ref_47_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_47_partial_sum_1_update_complete &-> (array_obj_ref_47_final_index_sum_regn)
          array_obj_ref_47_offset_calculated <-& (array_obj_ref_47_final_index_sum_regn)
          ;;[array_obj_ref_47_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_47_offset_calculated &-> (array_obj_ref_47_base_plus_offset)
          array_obj_ref_47_root_address_calculated <-& (array_obj_ref_47_base_plus_offset)
          ;;[array_obj_ref_47_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_47_root_address_calculated &-> (array_obj_ref_47_word_addrgen)
          array_obj_ref_47_word_address_calculated <-& (array_obj_ref_47_word_addrgen)
          ;;[array_obj_ref_47_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_47_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_47_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_47_sample_start_ <-& (array_obj_ref_47_word_address_calculated)
          // reenable-joins
          array_obj_ref_47_partial_sum_1_update_start o<-& (array_obj_ref_47_sample_completed_ 0)
          array_obj_ref_47_sample_start_ &-> (array_obj_ref_47_Sample)
          array_obj_ref_47_sample_completed_ <-& (array_obj_ref_47_Sample)
          array_obj_ref_47_sample_completed_ &-> ($null)
          array_obj_ref_47_update_start_ &-> (array_obj_ref_47_Update)
          array_obj_ref_47_update_completed_ <-& (array_obj_ref_47_Update)
          // self-release: 
          array_obj_ref_47_sample_start_ o<-& (array_obj_ref_47_sample_completed_ 1)
          $null &-> (array_obj_ref_47_update_start_)
          array_obj_ref_47_update_start_ o<-& (array_obj_ref_47_update_completed_ 0)
          // Target expression
          // (as target) a_rc_odd
          // start: WAR dependencies for a_rc_odd
          // done: WAR dependencies for a_rc_odd
          // end:  			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          // start:  			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 35
          // Source expression
          // x_0[Cr]
          $T[array_obj_ref_51_base_address_calculated] 
          $T[array_obj_ref_51_sample_start_] 
          $T[array_obj_ref_51_sample_completed_] 
          $T[array_obj_ref_51_update_start_] 
          $T[array_obj_ref_51_update_completed_] 
          $T[array_obj_ref_51_word_address_calculated] 
          $T[array_obj_ref_51_root_address_calculated] 
          $T[array_obj_ref_51_offset_calculated] 
          $T[array_obj_ref_51_index_resized_0] 
          $T[array_obj_ref_51_index_scaled_0] 
          $T[array_obj_ref_51_index_computed_0] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_51_index_computed_0
          array_obj_ref_51_index_computed_0 <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_51_index_computed_0
          ;;[array_obj_ref_51_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_51_index_computed_0 &-> (array_obj_ref_51_index_resize_0)
          array_obj_ref_51_index_resized_0 <-& (array_obj_ref_51_index_resize_0)
          ;;[array_obj_ref_51_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_51_index_resized_0 &-> (array_obj_ref_51_index_scale_0)
          array_obj_ref_51_index_scaled_0 <-& (array_obj_ref_51_index_scale_0)
          ;;[array_obj_ref_51_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_51_index_scaled_0 &-> (array_obj_ref_51_final_index_sum_regn)
          array_obj_ref_51_offset_calculated <-& (array_obj_ref_51_final_index_sum_regn)
          ;;[array_obj_ref_51_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_51_offset_calculated &-> (array_obj_ref_51_base_plus_offset)
          array_obj_ref_51_root_address_calculated <-& (array_obj_ref_51_base_plus_offset)
          ;;[array_obj_ref_51_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_51_root_address_calculated &-> (array_obj_ref_51_word_addrgen)
          array_obj_ref_51_word_address_calculated <-& (array_obj_ref_51_word_addrgen)
          ;;[array_obj_ref_51_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_51_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_51_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_51_sample_start_ <-& (array_obj_ref_51_word_address_calculated)
          // reenable-joins
          phi_stmt_18_update_start_ o<-& (array_obj_ref_51_sample_completed_ 0)
          array_obj_ref_51_sample_start_ &-> (array_obj_ref_51_Sample)
          array_obj_ref_51_sample_completed_ <-& (array_obj_ref_51_Sample)
          array_obj_ref_51_sample_completed_ &-> ($null)
          array_obj_ref_51_update_start_ &-> (array_obj_ref_51_Update)
          array_obj_ref_51_update_completed_ <-& (array_obj_ref_51_Update)
          // self-release: 
          array_obj_ref_51_sample_start_ o<-& (array_obj_ref_51_sample_completed_ 1)
          $null &-> (array_obj_ref_51_update_start_)
          array_obj_ref_51_update_start_ o<-& (array_obj_ref_51_update_completed_ 0)
          // Target expression
          // (as target) xval_even
          // start: WAR dependencies for xval_even
          // done: WAR dependencies for xval_even
          // end:  			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          // start:  			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 36
          // Source expression
          // x_1[Cr]
          $T[array_obj_ref_55_base_address_calculated] 
          $T[array_obj_ref_55_sample_start_] 
          $T[array_obj_ref_55_sample_completed_] 
          $T[array_obj_ref_55_update_start_] 
          $T[array_obj_ref_55_update_completed_] 
          $T[array_obj_ref_55_word_address_calculated] 
          $T[array_obj_ref_55_root_address_calculated] 
          $T[array_obj_ref_55_offset_calculated] 
          $T[array_obj_ref_55_index_resized_0] 
          $T[array_obj_ref_55_index_scaled_0] 
          $T[array_obj_ref_55_index_computed_0] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_55_index_computed_0
          array_obj_ref_55_index_computed_0 <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_55_index_computed_0
          ;;[array_obj_ref_55_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_55_index_computed_0 &-> (array_obj_ref_55_index_resize_0)
          array_obj_ref_55_index_resized_0 <-& (array_obj_ref_55_index_resize_0)
          ;;[array_obj_ref_55_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_55_index_resized_0 &-> (array_obj_ref_55_index_scale_0)
          array_obj_ref_55_index_scaled_0 <-& (array_obj_ref_55_index_scale_0)
          ;;[array_obj_ref_55_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_55_index_scaled_0 &-> (array_obj_ref_55_final_index_sum_regn)
          array_obj_ref_55_offset_calculated <-& (array_obj_ref_55_final_index_sum_regn)
          ;;[array_obj_ref_55_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_55_offset_calculated &-> (array_obj_ref_55_base_plus_offset)
          array_obj_ref_55_root_address_calculated <-& (array_obj_ref_55_base_plus_offset)
          ;;[array_obj_ref_55_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_55_root_address_calculated &-> (array_obj_ref_55_word_addrgen)
          array_obj_ref_55_word_address_calculated <-& (array_obj_ref_55_word_addrgen)
          ;;[array_obj_ref_55_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_55_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_55_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_55_sample_start_ <-& (array_obj_ref_55_word_address_calculated)
          // reenable-joins
          phi_stmt_18_update_start_ o<-& (array_obj_ref_55_sample_completed_ 0)
          array_obj_ref_55_sample_start_ &-> (array_obj_ref_55_Sample)
          array_obj_ref_55_sample_completed_ <-& (array_obj_ref_55_Sample)
          array_obj_ref_55_sample_completed_ &-> ($null)
          array_obj_ref_55_update_start_ &-> (array_obj_ref_55_Update)
          array_obj_ref_55_update_completed_ <-& (array_obj_ref_55_Update)
          // self-release: 
          array_obj_ref_55_sample_start_ o<-& (array_obj_ref_55_sample_completed_ 1)
          $null &-> (array_obj_ref_55_update_start_)
          array_obj_ref_55_update_start_ o<-& (array_obj_ref_55_update_completed_ 0)
          // Target expression
          // (as target) xval_odd
          // start: WAR dependencies for xval_odd
          // done: WAR dependencies for xval_odd
          // end:  			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          // start:  			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 37
          $T[assign_stmt_59_sample_start_] 
          $T[assign_stmt_59_sample_completed_] 
          $T[assign_stmt_59_update_start_] 
          $T[assign_stmt_59_update_completed_] 
          // Source expression
          // val_even
          // Target expression
          // (as target) val_even_58_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_59_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_59_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_59_sample_start_ &-> (assign_stmt_59_Sample)
          assign_stmt_59_sample_completed_ <-& (assign_stmt_59_Sample)
          assign_stmt_59_sample_completed_ &-> ($null)
          assign_stmt_59_update_start_ &-> (assign_stmt_59_Update)
          assign_stmt_59_update_completed_ <-& (assign_stmt_59_Update)
          // start: Forward dependencies from val_even to transition assign_stmt_59_sample_start_
          assign_stmt_59_sample_start_ <-& (phi_stmt_23_update_completed_)
          // done: Forward dependencies from val_even to transition assign_stmt_59_sample_start_
          // RAW reenables for val_even
          phi_stmt_23_update_start_ o<-& (assign_stmt_59_sample_completed_ 0)
          // self-release: 
          assign_stmt_59_sample_start_ o<-& (assign_stmt_59_sample_completed_ 1)
          $null &-> (assign_stmt_59_update_start_)
          assign_stmt_59_update_start_ o<-& (assign_stmt_59_update_completed_ 0)
          // start: WAR dependencies for val_even_58_delayed_5_0
          // done: WAR dependencies for val_even_58_delayed_5_0
          // end:  			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_even
          // WAR dependency: Read: nval_even before Write: 			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          array_obj_ref_42_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (array_obj_ref_42_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          array_obj_ref_51_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (array_obj_ref_51_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          assign_stmt_59_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (assign_stmt_59_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_even
          // start:  			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 38
          // volatile! 
          // Source expression
          // (val_even_58_delayed_5_0 + (a_rc_even * xval_even))
          // val_even_58_delayed_5_0
          // (a_rc_even * xval_even)
          // a_rc_even
          // xval_even
          // Target expression
          // (as target) nval_even
          // start: WAR dependencies for nval_even
          // WAR dependency: Read: nval_even before Write: 			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          array_obj_ref_42_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (array_obj_ref_42_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
          array_obj_ref_51_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (array_obj_ref_51_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
          assign_stmt_59_update_start_ <-& (phi_stmt_23_sample_completed_)
          phi_stmt_23_sample_start_ o<-& (assign_stmt_59_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_even
          // end:  			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          // start:  			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 40
          $T[assign_stmt_74_sample_start_] 
          $T[assign_stmt_74_sample_completed_] 
          $T[assign_stmt_74_update_start_] 
          $T[assign_stmt_74_update_completed_] 
          // Source expression
          // val_odd
          // Target expression
          // (as target) val_odd_70_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_74_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_74_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_74_sample_start_ &-> (assign_stmt_74_Sample)
          assign_stmt_74_sample_completed_ <-& (assign_stmt_74_Sample)
          assign_stmt_74_sample_completed_ &-> ($null)
          assign_stmt_74_update_start_ &-> (assign_stmt_74_Update)
          assign_stmt_74_update_completed_ <-& (assign_stmt_74_Update)
          // start: Forward dependencies from val_odd to transition assign_stmt_74_sample_start_
          assign_stmt_74_sample_start_ <-& (phi_stmt_28_update_completed_)
          // done: Forward dependencies from val_odd to transition assign_stmt_74_sample_start_
          // RAW reenables for val_odd
          phi_stmt_28_update_start_ o<-& (assign_stmt_74_sample_completed_ 0)
          // self-release: 
          assign_stmt_74_sample_start_ o<-& (assign_stmt_74_sample_completed_ 1)
          $null &-> (assign_stmt_74_update_start_)
          assign_stmt_74_update_start_ o<-& (assign_stmt_74_update_completed_ 0)
          // start: WAR dependencies for val_odd_70_delayed_5_0
          // done: WAR dependencies for val_odd_70_delayed_5_0
          // end:  			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_odd
          // WAR dependency: Read: nval_odd before Write: 			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          array_obj_ref_47_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (array_obj_ref_47_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          array_obj_ref_55_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (array_obj_ref_55_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          assign_stmt_74_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (assign_stmt_74_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_odd
          // start:  			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 41
          // volatile! 
          // Source expression
          // (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd))
          // val_odd_70_delayed_5_0
          // (a_rc_odd * xval_odd)
          // a_rc_odd
          // xval_odd
          // Target expression
          // (as target) nval_odd
          // start: WAR dependencies for nval_odd
          // WAR dependency: Read: nval_odd before Write: 			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          array_obj_ref_47_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (array_obj_ref_47_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
          array_obj_ref_55_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (array_obj_ref_55_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
          assign_stmt_74_update_start_ <-& (phi_stmt_28_sample_completed_)
          phi_stmt_28_sample_start_ o<-& (assign_stmt_74_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_odd
          // end:  			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          // start:  			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 43
          // Source expression
          // (C + 2 )
          $T[ADD_u8_u8_90_sample_start_] 
          $T[ADD_u8_u8_90_sample_completed_] 
          $T[ADD_u8_u8_90_update_start_] 
          $T[ADD_u8_u8_90_update_completed_] 
          // C
          // start: Forward dependencies from C to transition ADD_u8_u8_90_sample_start_
          ADD_u8_u8_90_sample_start_ <-& (phi_stmt_18_update_completed_)
          // done: Forward dependencies from C to transition ADD_u8_u8_90_sample_start_
          ;;[ADD_u8_u8_90_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_90_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_90_sample_start_ &-> (ADD_u8_u8_90_Sample)
          ADD_u8_u8_90_sample_completed_ <-& (ADD_u8_u8_90_Sample)
          ADD_u8_u8_90_sample_completed_ &-> ($null)
          ADD_u8_u8_90_update_start_ &-> (ADD_u8_u8_90_Update)
          ADD_u8_u8_90_update_completed_ <-& (ADD_u8_u8_90_Update)
          // RAW reenables for C
          phi_stmt_18_update_start_ o<-& (ADD_u8_u8_90_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_90_sample_start_ o<-& (ADD_u8_u8_90_sample_completed_ 1)
          $null &-> (ADD_u8_u8_90_update_start_)
          ADD_u8_u8_90_update_start_ o<-& (ADD_u8_u8_90_update_completed_ 0)
          // Target expression
          // (as target) nC
          // start: WAR dependencies for nC
          // WAR dependency: Read: nC before Write: 			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_90_update_start_ <-& (phi_stmt_18_sample_completed_)
          phi_stmt_18_sample_start_ o<-& (ADD_u8_u8_90_update_completed_ 0)
          // WAR dependency: release  Read: nC with Write: 			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nC
          // end:  			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
          // (nC < 32 )
          // nC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_90_update_completed_)
          // done: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  array_obj_ref_55 load
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_51 load
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  array_obj_ref_47 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_42 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_16__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_16_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_16__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_16_loop_body : condition_evaluated
        $bind do_while_stmt_16__entry__  => do_while_stmt_16_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_16_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_16__exit__)
      }
      do_while_stmt_16__entry__ |-> (do_while_stmt_16)
      do_while_stmt_16__exit__ <-| (do_while_stmt_16)
      do_while_stmt_16__entry__ <-| (branch_block_stmt_15__entry__)
      do_while_stmt_16__exit__ |-> (branch_block_stmt_15__exit__)
    }
    ::[assign_stmt_102] 
    {
      // start:  	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
      //  file .Aa/mvp.opt.aa, line 47
      // Source expression
      // (nval_even + nval_odd)
      $T[ADD_u32_u32_101_sample_start_] 
      $T[ADD_u32_u32_101_sample_completed_] 
      $T[ADD_u32_u32_101_update_start_] 
      $T[ADD_u32_u32_101_update_completed_] 
      // nval_even
      // nval_odd
      // start: Forward dependencies from nval_even to transition ADD_u32_u32_101_sample_start_
      // done: Forward dependencies from nval_even to transition ADD_u32_u32_101_sample_start_
      // start: Forward dependencies from nval_odd to transition ADD_u32_u32_101_sample_start_
      // done: Forward dependencies from nval_odd to transition ADD_u32_u32_101_sample_start_
      ;;[ADD_u32_u32_101_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_101_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_101_sample_start_ &-> (ADD_u32_u32_101_Sample)
      ADD_u32_u32_101_sample_completed_ <-& (ADD_u32_u32_101_Sample)
      ADD_u32_u32_101_sample_completed_ &-> ($null)
      ADD_u32_u32_101_update_start_ &-> (ADD_u32_u32_101_Update)
      ADD_u32_u32_101_update_completed_ <-& (ADD_u32_u32_101_Update)
      // Target expression
      // (as target) result
      // result
      // write to interface object
      // start: WAR dependencies for result
      // done: WAR dependencies for result
      // result
      // write to interface object
      // end:  	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dotP_even%mmloop%
    //  file .Aa/mvp.opt.aa, line 24
    // constant-object-declarations for block %dotP_even%mmloop
    //  file .Aa/mvp.opt.aa, line 20
    // constant-object-declarations for block %dotP_even
    //  file .Aa/mvp.opt.aa, line 15
    // constant-declarations for block %dotP_even%mmloop
    //  file .Aa/mvp.opt.aa, line 20
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 22
    // 32 
    $constant $W[konst_94_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %dotP_even%mmloop%
    //  file .Aa/mvp.opt.aa, line 24
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 25
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_21_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi val_even := 			  nval_even $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 27
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_27_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 29
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_31_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // A_0[R][Cr]
    $constant $W[array_obj_ref_42_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_42_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_42_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_42_word_offset_0] : $int<9> := _b000000000// 0
    // A_1[R][Cr]
    $constant $W[array_obj_ref_47_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_47_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_47_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_47_word_offset_0] : $int<9> := _b000000000// 0
    // x_0[Cr]
    $constant $W[array_obj_ref_51_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_51_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_51_word_offset_0] : $int<4> := _b0000// 0
    // x_1[Cr]
    $constant $W[array_obj_ref_55_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_55_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_55_word_offset_0] : $int<4> := _b0000// 0
    // 2 
    $constant $W[konst_89_wire_constant] : $int<8> := _b00000010// 2
    // block %dotP_even%mmloop
    //  file .Aa/mvp.opt.aa, line 20
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 22
    // (nC < 32 )
    $intermediate $W[ULT_u8_u1_95_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 24
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 25
    $W[nC_91_22_buffered] : $int<8>
    // C
    $W[C_18] : $int<8>
    // 			$phi val_even := 			  nval_even $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 27
    $W[nval_even_66_25_buffered] : $int<32>
    // val_even
    $W[val_even_23] : $int<32>
    // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 29
    $W[nval_odd_81_32_buffered] : $int<32>
    // val_odd
    $W[val_odd_28] : $int<32>
    // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 32
    // Cr
    $W[Cr_38] : $int<7>
    // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 33
    // A_0[R][Cr]
    $intermediate $W[R_R_40_resized] : $int<9>
    $intermediate $W[R_R_40_scaled] : $int<9>
    $intermediate $W[R_Cr_41_resized] : $int<9>
    $intermediate $W[R_Cr_41_scaled] : $int<9>
    $intermediate $W[array_obj_ref_42_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_42_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_42_root_address] : $int<9>
    $W[array_obj_ref_42_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_42_data_0] : $int<32>
    // a_rc_even
    $W[a_rc_even_43] : $int<32>
    // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 34
    // A_1[R][Cr]
    $intermediate $W[R_R_45_resized] : $int<9>
    $intermediate $W[R_R_45_scaled] : $int<9>
    $intermediate $W[R_Cr_46_resized] : $int<9>
    $intermediate $W[R_Cr_46_scaled] : $int<9>
    $intermediate $W[array_obj_ref_47_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_47_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_47_root_address] : $int<9>
    $W[array_obj_ref_47_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_47_data_0] : $int<32>
    // a_rc_odd
    $W[a_rc_odd_48] : $int<32>
    // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 35
    // x_0[Cr]
    $intermediate $W[R_Cr_50_resized] : $int<4>
    $intermediate $W[R_Cr_50_scaled] : $int<4>
    $intermediate $W[array_obj_ref_51_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_51_root_address] : $int<4>
    $W[array_obj_ref_51_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_51_data_0] : $int<32>
    // xval_even
    $W[xval_even_52] : $int<32>
    // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 36
    // x_1[Cr]
    $intermediate $W[R_Cr_54_resized] : $int<4>
    $intermediate $W[R_Cr_54_scaled] : $int<4>
    $intermediate $W[array_obj_ref_55_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_55_root_address] : $int<4>
    $W[array_obj_ref_55_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_55_data_0] : $int<32>
    // xval_odd
    $W[xval_odd_56] : $int<32>
    // 			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 37
    // val_even_58_delayed_5_0
    $W[val_even_58_delayed_5_0_59] : $int<32>
    // 			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 38
    // (a_rc_even * xval_even)
    $intermediate $W[MUL_u32_u32_64_wire] : $int<32>
    // nval_even
    $W[nval_even_66] : $int<32>
    // 			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 40
    // val_odd_70_delayed_5_0
    $W[val_odd_70_delayed_5_0_74] : $int<32>
    // 			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 41
    // (a_rc_odd * xval_odd)
    $intermediate $W[MUL_u32_u32_79_wire] : $int<32>
    // nval_odd
    $W[nval_odd_81] : $int<32>
    // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 43
    // nC
    $W[nC_91] : $int<8>
    // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 47
    // result
    // datapath-instances for block %dotP_even%mmloop
    //  file .Aa/mvp.opt.aa, line 20
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 22
    // (nC < 32 )
    <[ULT_u8_u1_95_inst] (nC_91 konst_94_wire_constant) (ULT_u8_u1_95_wire)   $flowthrough 
    $delay ULT_u8_u1_95_inst 0
    ==0? [do_while_stmt_16_branch] (ULT_u8_u1_95_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 24
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 25
    # := [nC_91_22_buf] (nC_91) (nC_91_22_buffered)     $fullrate
    $buffering $out nC_91_22_buf nC_91_22_buffered  1
    # $phi [phi_stmt_18] (type_cast_21_wire_constant nC_91_22_buffered) ( C_18 ) $fullrate
    // $buffering  $out phi_stmt_18 C_18 2
    // 			$phi val_even := 			  nval_even $on   $loopback 			  ($bitcast ($uint<32>) 0  ) $on   $entry 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 27
    # := [nval_even_66_25_buf] (nval_even_66) (nval_even_66_25_buffered)     $fullrate
    $buffering $out nval_even_66_25_buf nval_even_66_25_buffered  1
    # $phi [phi_stmt_23] (nval_even_66_25_buffered type_cast_27_wire_constant) ( val_even_23 ) $fullrate
    // $buffering  $out phi_stmt_23 val_even_23 2
    // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 29
    # := [nval_odd_81_32_buf] (nval_odd_81) (nval_odd_81_32_buffered)     $fullrate
    $buffering $out nval_odd_81_32_buf nval_odd_81_32_buffered  1
    # $phi [phi_stmt_28] (type_cast_31_wire_constant nval_odd_81_32_buffered) ( val_odd_28 ) $fullrate
    // $buffering  $out phi_stmt_28 val_odd_28 2
    // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 32
    // ( $slice C 7 1 ) 
    [:] [slice_37_inst] (C_18 7 1) (Cr_38)  $flowthrough
    $delay slice_37_inst 0
    // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 33
    // A_0[R][Cr]
    &/ [array_obj_ref_42_index_0_resize] (R) (R_R_40_resized) 
    $flowthrough 
    *[array_obj_ref_42_index_0_scale] (R_R_40_resized array_obj_ref_42_offset_scale_factor_0) (R_R_40_scaled)    $fullrate
    $buffering  $in array_obj_ref_42_index_0_scale R_R_40_resized 2
    $buffering  $in array_obj_ref_42_index_0_scale array_obj_ref_42_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_42_index_0_scale R_R_40_scaled 2
    $delay array_obj_ref_42_index_0_scale 2
    &/ [array_obj_ref_42_index_1_resize] (Cr_38) (R_Cr_41_resized) 
    $flowthrough 
    &/ [array_obj_ref_42_index_1_rename] (R_Cr_41_resized) (R_Cr_41_scaled) 
    $flowthrough 
    +[array_obj_ref_42_index_sum_1] (R_Cr_41_scaled R_R_40_scaled) (array_obj_ref_42_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_42_index_sum_1 R_Cr_41_scaled 2
    $buffering  $in array_obj_ref_42_index_sum_1 R_R_40_scaled 2
    $buffering  $out array_obj_ref_42_index_sum_1 array_obj_ref_42_index_partial_sum_1 2
    $delay array_obj_ref_42_index_sum_1 2
    &/ [array_obj_ref_42_index_offset] (array_obj_ref_42_index_partial_sum_1) (array_obj_ref_42_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_42_root_address_inst] (array_obj_ref_42_final_offset) (array_obj_ref_42_root_address) 
    $flowthrough 
    &/ [array_obj_ref_42_addr_0] (array_obj_ref_42_root_address) (array_obj_ref_42_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_42_load_0] $from memory_space_0 (array_obj_ref_42_word_address_0) (array_obj_ref_42_data_0) 
    $buffering  $in array_obj_ref_42_load_0 array_obj_ref_42_word_address_0 2
    $buffering  $out array_obj_ref_42_load_0 array_obj_ref_42_data_0 2
    $delay array_obj_ref_42_load_0 5
    &/ [array_obj_ref_42_gather_scatter] (array_obj_ref_42_data_0) (a_rc_even_43) 
    $flowthrough 
    // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 34
    // A_1[R][Cr]
    &/ [array_obj_ref_47_index_0_resize] (R) (R_R_45_resized) 
    $flowthrough 
    *[array_obj_ref_47_index_0_scale] (R_R_45_resized array_obj_ref_47_offset_scale_factor_0) (R_R_45_scaled)    $fullrate
    $buffering  $in array_obj_ref_47_index_0_scale R_R_45_resized 2
    $buffering  $in array_obj_ref_47_index_0_scale array_obj_ref_47_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_47_index_0_scale R_R_45_scaled 2
    $delay array_obj_ref_47_index_0_scale 2
    &/ [array_obj_ref_47_index_1_resize] (Cr_38) (R_Cr_46_resized) 
    $flowthrough 
    &/ [array_obj_ref_47_index_1_rename] (R_Cr_46_resized) (R_Cr_46_scaled) 
    $flowthrough 
    +[array_obj_ref_47_index_sum_1] (R_Cr_46_scaled R_R_45_scaled) (array_obj_ref_47_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_47_index_sum_1 R_Cr_46_scaled 2
    $buffering  $in array_obj_ref_47_index_sum_1 R_R_45_scaled 2
    $buffering  $out array_obj_ref_47_index_sum_1 array_obj_ref_47_index_partial_sum_1 2
    $delay array_obj_ref_47_index_sum_1 2
    &/ [array_obj_ref_47_index_offset] (array_obj_ref_47_index_partial_sum_1) (array_obj_ref_47_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_47_root_address_inst] (array_obj_ref_47_final_offset) (array_obj_ref_47_root_address) 
    $flowthrough 
    &/ [array_obj_ref_47_addr_0] (array_obj_ref_47_root_address) (array_obj_ref_47_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_47_load_0] $from memory_space_1 (array_obj_ref_47_word_address_0) (array_obj_ref_47_data_0) 
    $buffering  $in array_obj_ref_47_load_0 array_obj_ref_47_word_address_0 2
    $buffering  $out array_obj_ref_47_load_0 array_obj_ref_47_data_0 2
    $delay array_obj_ref_47_load_0 5
    &/ [array_obj_ref_47_gather_scatter] (array_obj_ref_47_data_0) (a_rc_odd_48) 
    $flowthrough 
    // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 35
    // x_0[Cr]
    &/ [array_obj_ref_51_index_0_resize] (Cr_38) (R_Cr_50_resized) 
    $flowthrough 
    &/ [array_obj_ref_51_index_0_rename] (R_Cr_50_resized) (R_Cr_50_scaled) 
    $flowthrough 
    &/ [array_obj_ref_51_index_offset] (R_Cr_50_scaled) (array_obj_ref_51_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_51_root_address_inst] (array_obj_ref_51_final_offset) (array_obj_ref_51_root_address) 
    $flowthrough 
    &/ [array_obj_ref_51_addr_0] (array_obj_ref_51_root_address) (array_obj_ref_51_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_51_load_0] $from memory_space_2 (array_obj_ref_51_word_address_0) (array_obj_ref_51_data_0) 
    $buffering  $in array_obj_ref_51_load_0 array_obj_ref_51_word_address_0 2
    $buffering  $out array_obj_ref_51_load_0 array_obj_ref_51_data_0 2
    $delay array_obj_ref_51_load_0 5
    &/ [array_obj_ref_51_gather_scatter] (array_obj_ref_51_data_0) (xval_even_52) 
    $flowthrough 
    // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 36
    // x_1[Cr]
    &/ [array_obj_ref_55_index_0_resize] (Cr_38) (R_Cr_54_resized) 
    $flowthrough 
    &/ [array_obj_ref_55_index_0_rename] (R_Cr_54_resized) (R_Cr_54_scaled) 
    $flowthrough 
    &/ [array_obj_ref_55_index_offset] (R_Cr_54_scaled) (array_obj_ref_55_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_55_root_address_inst] (array_obj_ref_55_final_offset) (array_obj_ref_55_root_address) 
    $flowthrough 
    &/ [array_obj_ref_55_addr_0] (array_obj_ref_55_root_address) (array_obj_ref_55_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_55_load_0] $from memory_space_3 (array_obj_ref_55_word_address_0) (array_obj_ref_55_data_0) 
    $buffering  $in array_obj_ref_55_load_0 array_obj_ref_55_word_address_0 2
    $buffering  $out array_obj_ref_55_load_0 array_obj_ref_55_data_0 2
    $delay array_obj_ref_55_load_0 5
    &/ [array_obj_ref_55_gather_scatter] (array_obj_ref_55_data_0) (xval_odd_56) 
    $flowthrough 
    // 			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 37
    # := [W_val_even_58_delayed_5_0_57_inst] (val_even_23) (val_even_58_delayed_5_0_59)  $cut_through    $fullrate
    $buffering  $out W_val_even_58_delayed_5_0_57_inst val_even_58_delayed_5_0_59 5
    // 			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 38
    // (a_rc_even * xval_even)
    *[MUL_u32_u32_64_inst] (a_rc_even_43 xval_even_52) (MUL_u32_u32_64_wire)   $flowthrough 
    $delay MUL_u32_u32_64_inst 0
    // (val_even_58_delayed_5_0 + (a_rc_even * xval_even))
    +[ADD_u32_u32_65_inst] (val_even_58_delayed_5_0_59 MUL_u32_u32_64_wire) (nval_even_66)   $flowthrough 
    $delay ADD_u32_u32_65_inst 0
    // 			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 40
    # := [W_val_odd_70_delayed_5_0_72_inst] (val_odd_28) (val_odd_70_delayed_5_0_74)  $cut_through    $fullrate
    $buffering  $out W_val_odd_70_delayed_5_0_72_inst val_odd_70_delayed_5_0_74 5
    // 			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 41
    // (a_rc_odd * xval_odd)
    *[MUL_u32_u32_79_inst] (a_rc_odd_48 xval_odd_56) (MUL_u32_u32_79_wire)   $flowthrough 
    $delay MUL_u32_u32_79_inst 0
    // (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd))
    +[ADD_u32_u32_80_inst] (val_odd_70_delayed_5_0_74 MUL_u32_u32_79_wire) (nval_odd_81)   $flowthrough 
    $delay ADD_u32_u32_80_inst 0
    // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 43
    // (C + 2 )
    +[ADD_u8_u8_90_inst] (C_18 konst_89_wire_constant) (nC_91)    $fullrate
    $buffering  $out ADD_u8_u8_90_inst nC_91 2
    $delay ADD_u8_u8_90_inst 1
    // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 47
    // (nval_even + nval_odd)
    +[ADD_u32_u32_101_inst] (nval_even_66 nval_odd_81) (result)   
    $buffering  $out ADD_u32_u32_101_inst result 1
    $delay ADD_u32_u32_101_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_16
  //  file .Aa/mvp.opt.aa, line 22
  phi_stmt_18 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_entry_sample_req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_loopback_sample_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_18_phi_mux_ack)
  nC_91_22_buf <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nC_22_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nC_22_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nC_22_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nC_22_Update/ack)
  phi_stmt_23 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_23_loopback_sample_req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_23_entry_sample_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_23_phi_mux_ack)
  nval_even_66_25_buf <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_even_25_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_even_25_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_even_25_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_even_25_Update/ack)
  phi_stmt_28 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_28_entry_sample_req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_28_loopback_sample_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/phi_stmt_28_phi_mux_ack)
  nval_odd_81_32_buf <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_odd_32_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_odd_32_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_odd_32_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/R_nval_odd_32_Update/ack)
  // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 32
  // C
  // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 33
  // A_0[R][Cr]
  // R
  array_obj_ref_42_index_0_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_resize_0/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_resize_0/index_resize_ack)
  array_obj_ref_42_index_0_scale <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_0_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_0_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_0_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_0_Update/ca)
  // Cr
  array_obj_ref_42_index_1_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_resize_1/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_resize_1/index_resize_ack)
  array_obj_ref_42_index_1_rename <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_1/scale_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_index_scale_1/scale_rename_ack)
  array_obj_ref_42_index_sum_1 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_partial_sum_1_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_partial_sum_1_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_partial_sum_1_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_partial_sum_1_Update/ca)
  array_obj_ref_42_index_offset <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_final_index_sum_regn/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_final_index_sum_regn/ack)
  array_obj_ref_42_root_address_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_base_plus_offset/sum_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_base_plus_offset/sum_rename_ack)
  array_obj_ref_42_addr_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_word_addrgen/root_register_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_word_addrgen/root_register_ack)
  array_obj_ref_42_gather_scatter <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Update/array_obj_ref_42_Merge/merge_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Update/array_obj_ref_42_Merge/merge_ack)
  array_obj_ref_42_load_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Sample/word_access_start/word_0/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Update/word_access_complete/word_0/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Sample/word_access_start/word_0/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_42_Update/word_access_complete/word_0/ca)
  // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 34
  // A_1[R][Cr]
  // R
  array_obj_ref_47_index_0_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_resize_0/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_resize_0/index_resize_ack)
  array_obj_ref_47_index_0_scale <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_0_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_0_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_0_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_0_Update/ca)
  // Cr
  array_obj_ref_47_index_1_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_resize_1/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_resize_1/index_resize_ack)
  array_obj_ref_47_index_1_rename <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_1/scale_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_index_scale_1/scale_rename_ack)
  array_obj_ref_47_index_sum_1 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_partial_sum_1_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_partial_sum_1_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_partial_sum_1_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_partial_sum_1_Update/ca)
  array_obj_ref_47_index_offset <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_final_index_sum_regn/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_final_index_sum_regn/ack)
  array_obj_ref_47_root_address_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_base_plus_offset/sum_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_base_plus_offset/sum_rename_ack)
  array_obj_ref_47_addr_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_word_addrgen/root_register_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_word_addrgen/root_register_ack)
  array_obj_ref_47_gather_scatter <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Update/array_obj_ref_47_Merge/merge_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Update/array_obj_ref_47_Merge/merge_ack)
  array_obj_ref_47_load_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Sample/word_access_start/word_0/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Update/word_access_complete/word_0/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Sample/word_access_start/word_0/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_47_Update/word_access_complete/word_0/ca)
  // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 35
  // x_0[Cr]
  // Cr
  array_obj_ref_51_index_0_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_index_resize_0/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_index_resize_0/index_resize_ack)
  array_obj_ref_51_index_0_rename <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_index_scale_0/scale_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_index_scale_0/scale_rename_ack)
  array_obj_ref_51_index_offset <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_final_index_sum_regn/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_final_index_sum_regn/ack)
  array_obj_ref_51_root_address_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_base_plus_offset/sum_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_base_plus_offset/sum_rename_ack)
  array_obj_ref_51_addr_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_word_addrgen/root_register_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_word_addrgen/root_register_ack)
  array_obj_ref_51_gather_scatter <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Update/array_obj_ref_51_Merge/merge_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Update/array_obj_ref_51_Merge/merge_ack)
  array_obj_ref_51_load_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Sample/word_access_start/word_0/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Update/word_access_complete/word_0/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Sample/word_access_start/word_0/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_51_Update/word_access_complete/word_0/ca)
  // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 36
  // x_1[Cr]
  // Cr
  array_obj_ref_55_index_0_resize <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_index_resize_0/index_resize_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_index_resize_0/index_resize_ack)
  array_obj_ref_55_index_0_rename <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_index_scale_0/scale_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_index_scale_0/scale_rename_ack)
  array_obj_ref_55_index_offset <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_final_index_sum_regn/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_final_index_sum_regn/ack)
  array_obj_ref_55_root_address_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_base_plus_offset/sum_rename_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_base_plus_offset/sum_rename_ack)
  array_obj_ref_55_addr_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_word_addrgen/root_register_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_word_addrgen/root_register_ack)
  array_obj_ref_55_gather_scatter <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Update/array_obj_ref_55_Merge/merge_req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Update/array_obj_ref_55_Merge/merge_ack)
  array_obj_ref_55_load_0 <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Sample/word_access_start/word_0/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Update/word_access_complete/word_0/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Sample/word_access_start/word_0/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/array_obj_ref_55_Update/word_access_complete/word_0/ca)
  // 			val_even_58_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 37
  // val_even
  W_val_even_58_delayed_5_0_57_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_59_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_59_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_59_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_59_Update/ack)
  // 			$volatile nval_even := (val_even_58_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 38
  // (val_even_58_delayed_5_0 + (a_rc_even * xval_even))
  // val_even_58_delayed_5_0
  // (a_rc_even * xval_even)
  // a_rc_even
  // xval_even
  // 			val_odd_70_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 40
  // val_odd
  W_val_odd_70_delayed_5_0_72_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_74_Sample/req branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_74_Update/req) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_74_Sample/ack branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/assign_stmt_74_Update/ack)
  // 			$volatile nval_odd := (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 41
  // (val_odd_70_delayed_5_0 + (a_rc_odd * xval_odd))
  // val_odd_70_delayed_5_0
  // (a_rc_odd * xval_odd)
  // a_rc_odd
  // xval_odd
  // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 43
  // (C + 2 )
  // C
  ADD_u8_u8_90_inst <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_90_Sample/rr branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_90_Update/cr) (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_90_Sample/ra branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/ADD_u8_u8_90_Update/ca)
  // (nC < 32 )
  // nC
  do_while_stmt_16_branch <=> (branch_block_stmt_15/do_while_stmt_16/do_while_stmt_16_loop_body/condition_evaluated) (branch_block_stmt_15/do_while_stmt_16/loop_exit/ack branch_block_stmt_15/do_while_stmt_16/loop_taken/ack)
  // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 47
  // (nval_even + nval_odd)
  // nval_even
  // nval_odd
  ADD_u32_u32_101_inst <=> (assign_stmt_102/ADD_u32_u32_101_Sample/rr assign_stmt_102/ADD_u32_u32_101_Update/cr) (assign_stmt_102/ADD_u32_u32_101_Sample/ra assign_stmt_102/ADD_u32_u32_101_Update/ca)
}
$module [dotP_odd] 
{
  $in R:$int<8>
  // can point into 
  $out result:$int<32>
  // can point into 
  // pipe-declarations for block %dotP_odd
  //  file .Aa/mvp.opt.aa, line 49
  // pipe-declarations for block %dotP_odd%mmloop
  //  file .Aa/mvp.opt.aa, line 54
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_107] // Branch Block  file .Aa/mvp.opt.aa, line 54
    {
      $P [branch_block_stmt_107__entry__]
      branch_block_stmt_107__entry__ <-| ($entry)
      $P [branch_block_stmt_107__exit__]
      branch_block_stmt_107__exit__ |-> ($exit)
      $P [do_while_stmt_108__entry__] 
      $P [do_while_stmt_108__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 56
      <o> [do_while_stmt_108]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_108__entry__] 
        $P[do_while_stmt_108__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_108_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_110
          // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_110_sample_start_] 
          $T[phi_stmt_110_sample_completed_] 
          $T[phi_stmt_110_update_start_] 
          $T[phi_stmt_110_update_completed_] 
          $T[phi_stmt_110_sample_start__ps] 
          phi_stmt_110_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_110_sample_completed__ps] 
          phi_stmt_110_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_110_update_start__ps] 
          phi_stmt_110_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_110_update_completed__ps] 
          phi_stmt_110_update_completed_ <-& (phi_stmt_110_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_110_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_110_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_110_update_start_)
          $T[phi_stmt_110_loopback_trigger] 
          phi_stmt_110_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_110_loopback_sample_req] 
          $T[phi_stmt_110_loopback_sample_req_ps] 
          phi_stmt_110_loopback_sample_req <-& (phi_stmt_110_loopback_sample_req_ps)
          phi_stmt_110_loopback_sample_req &-> ($null)
          $T[phi_stmt_110_entry_trigger] 
          phi_stmt_110_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_110_entry_sample_req] 
          $T[phi_stmt_110_entry_sample_req_ps] 
          phi_stmt_110_entry_sample_req <-& (phi_stmt_110_entry_sample_req_ps)
          phi_stmt_110_entry_sample_req &-> ($null)
          phi_stmt_110_update_start_ o<-& (phi_stmt_110_update_completed_ 0)
          phi_stmt_110_sample_start_ o<-& (phi_stmt_110_sample_completed_ 1)
          $T[phi_stmt_110_merged_reqs] 
          $T[phi_stmt_110_phi_mux_ack] 
          $T[phi_stmt_110_phi_mux_ack_ps] 
          phi_stmt_110_phi_mux_ack_ps <-& (phi_stmt_110_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_110_update_completed_)
          $T[type_cast_113_sample_start__ps] 
          $T[type_cast_113_sample_completed__ps] 
          $T[type_cast_113_update_start__ps] 
          $T[type_cast_113_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_113_sample_start_] 
          $T[type_cast_113_sample_completed_] 
          type_cast_113_sample_completed_ <-& (type_cast_113_sample_start_)
          $T[type_cast_113_update_start_] 
          $T [type_cast_113_update_completed_] $delay 
          type_cast_113_update_completed_ <-& (type_cast_113_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_113_sample_start_ <-& (type_cast_113_sample_start__ps)
          type_cast_113_update_start_ <-& (type_cast_113_update_start__ps)
          // Phi complete dependency.
          type_cast_113_sample_completed__ps <-& (type_cast_113_sample_completed_)
          type_cast_113_update_completed__ps <-& (type_cast_113_update_completed_)
          $T[R_nC_114_sample_start__ps] 
          $T[R_nC_114_sample_completed__ps] 
          $T[R_nC_114_update_start__ps] 
          $T[R_nC_114_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nC_114_sample_start_] 
          $T[R_nC_114_sample_completed_] 
          $T[R_nC_114_update_start_] 
          $T[R_nC_114_update_completed_] 
          ;;[R_nC_114_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nC_114_sample_start_ &-> (R_nC_114_Sample)
          R_nC_114_sample_completed_ <-& (R_nC_114_Sample)
          ;;[R_nC_114_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nC_114_update_start_ &-> (R_nC_114_Update)
          R_nC_114_update_completed_ <-& (R_nC_114_Update)
          // RAW reenables for nC
          // Phi start dependency for implicit/constant alternative.
          R_nC_114_sample_start_ <-& (R_nC_114_sample_start__ps)
          R_nC_114_update_start_ <-& (R_nC_114_update_start__ps)
          // Phi complete dependency.
          R_nC_114_sample_completed__ps <-& (R_nC_114_sample_completed_)
          R_nC_114_update_completed__ps <-& (R_nC_114_update_completed_)
          $phisequencer [ phi_stmt_110_phi_seq] : 
          phi_stmt_110_entry_trigger type_cast_113_sample_start__ps type_cast_113_sample_completed__ps type_cast_113_update_start__ps type_cast_113_update_completed__ps phi_stmt_110_loopback_trigger R_nC_114_sample_start__ps R_nC_114_sample_completed__ps R_nC_114_update_start__ps R_nC_114_update_completed__ps :
          phi_stmt_110_sample_start__ps phi_stmt_110_sample_completed__ps phi_stmt_110_update_start__ps phi_stmt_110_update_completed__ps :
          phi_stmt_110_entry_sample_req_ps phi_stmt_110_loopback_sample_req_ps : 
          phi_stmt_110_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_110
          // start:  PHI statement phi_stmt_115
          // 			$phi val_even := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_even $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_115_sample_start_] 
          $T[phi_stmt_115_sample_completed_] 
          $T[phi_stmt_115_update_start_] 
          $T[phi_stmt_115_update_completed_] 
          $T[phi_stmt_115_sample_start__ps] 
          phi_stmt_115_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_115_sample_completed__ps] 
          phi_stmt_115_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_115_update_start__ps] 
          phi_stmt_115_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_115_update_completed__ps] 
          phi_stmt_115_update_completed_ <-& (phi_stmt_115_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_115_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_115_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_115_update_start_)
          $T[phi_stmt_115_loopback_trigger] 
          phi_stmt_115_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_115_loopback_sample_req] 
          $T[phi_stmt_115_loopback_sample_req_ps] 
          phi_stmt_115_loopback_sample_req <-& (phi_stmt_115_loopback_sample_req_ps)
          phi_stmt_115_loopback_sample_req &-> ($null)
          $T[phi_stmt_115_entry_trigger] 
          phi_stmt_115_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_115_entry_sample_req] 
          $T[phi_stmt_115_entry_sample_req_ps] 
          phi_stmt_115_entry_sample_req <-& (phi_stmt_115_entry_sample_req_ps)
          phi_stmt_115_entry_sample_req &-> ($null)
          phi_stmt_115_update_start_ o<-& (phi_stmt_115_update_completed_ 0)
          phi_stmt_115_sample_start_ o<-& (phi_stmt_115_sample_completed_ 1)
          $T[phi_stmt_115_merged_reqs] 
          $T[phi_stmt_115_phi_mux_ack] 
          $T[phi_stmt_115_phi_mux_ack_ps] 
          phi_stmt_115_phi_mux_ack_ps <-& (phi_stmt_115_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_115_update_completed_)
          $T[type_cast_118_sample_start__ps] 
          $T[type_cast_118_sample_completed__ps] 
          $T[type_cast_118_update_start__ps] 
          $T[type_cast_118_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_118_sample_start_] 
          $T[type_cast_118_sample_completed_] 
          type_cast_118_sample_completed_ <-& (type_cast_118_sample_start_)
          $T[type_cast_118_update_start_] 
          $T [type_cast_118_update_completed_] $delay 
          type_cast_118_update_completed_ <-& (type_cast_118_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_118_sample_start_ <-& (type_cast_118_sample_start__ps)
          type_cast_118_update_start_ <-& (type_cast_118_update_start__ps)
          // Phi complete dependency.
          type_cast_118_sample_completed__ps <-& (type_cast_118_sample_completed_)
          type_cast_118_update_completed__ps <-& (type_cast_118_update_completed_)
          $T[R_nval_even_119_sample_start__ps] 
          $T[R_nval_even_119_sample_completed__ps] 
          $T[R_nval_even_119_update_start__ps] 
          $T[R_nval_even_119_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_even_119_sample_start_] 
          $T[R_nval_even_119_sample_completed_] 
          $T[R_nval_even_119_update_start_] 
          $T[R_nval_even_119_update_completed_] 
          ;;[R_nval_even_119_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_even_119_sample_start_ &-> (R_nval_even_119_Sample)
          R_nval_even_119_sample_completed_ <-& (R_nval_even_119_Sample)
          ;;[R_nval_even_119_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_even_119_update_start_ &-> (R_nval_even_119_Update)
          R_nval_even_119_update_completed_ <-& (R_nval_even_119_Update)
          // RAW reenables for nval_even
          // Phi start dependency for implicit/constant alternative.
          R_nval_even_119_sample_start_ <-& (R_nval_even_119_sample_start__ps)
          R_nval_even_119_update_start_ <-& (R_nval_even_119_update_start__ps)
          // Phi complete dependency.
          R_nval_even_119_sample_completed__ps <-& (R_nval_even_119_sample_completed_)
          R_nval_even_119_update_completed__ps <-& (R_nval_even_119_update_completed_)
          $phisequencer [ phi_stmt_115_phi_seq] : 
          phi_stmt_115_entry_trigger type_cast_118_sample_start__ps type_cast_118_sample_completed__ps type_cast_118_update_start__ps type_cast_118_update_completed__ps phi_stmt_115_loopback_trigger R_nval_even_119_sample_start__ps R_nval_even_119_sample_completed__ps R_nval_even_119_update_start__ps R_nval_even_119_update_completed__ps :
          phi_stmt_115_sample_start__ps phi_stmt_115_sample_completed__ps phi_stmt_115_update_start__ps phi_stmt_115_update_completed__ps :
          phi_stmt_115_entry_sample_req_ps phi_stmt_115_loopback_sample_req_ps : 
          phi_stmt_115_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_115
          // start:  PHI statement phi_stmt_120
          // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_120_sample_start_] 
          $T[phi_stmt_120_sample_completed_] 
          $T[phi_stmt_120_update_start_] 
          $T[phi_stmt_120_update_completed_] 
          $T[phi_stmt_120_sample_start__ps] 
          phi_stmt_120_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_120_sample_completed__ps] 
          phi_stmt_120_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_120_update_start__ps] 
          phi_stmt_120_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_120_update_completed__ps] 
          phi_stmt_120_update_completed_ <-& (phi_stmt_120_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_120_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_120_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_120_update_start_)
          $T[phi_stmt_120_loopback_trigger] 
          phi_stmt_120_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_120_loopback_sample_req] 
          $T[phi_stmt_120_loopback_sample_req_ps] 
          phi_stmt_120_loopback_sample_req <-& (phi_stmt_120_loopback_sample_req_ps)
          phi_stmt_120_loopback_sample_req &-> ($null)
          $T[phi_stmt_120_entry_trigger] 
          phi_stmt_120_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_120_entry_sample_req] 
          $T[phi_stmt_120_entry_sample_req_ps] 
          phi_stmt_120_entry_sample_req <-& (phi_stmt_120_entry_sample_req_ps)
          phi_stmt_120_entry_sample_req &-> ($null)
          phi_stmt_120_update_start_ o<-& (phi_stmt_120_update_completed_ 0)
          phi_stmt_120_sample_start_ o<-& (phi_stmt_120_sample_completed_ 1)
          $T[phi_stmt_120_merged_reqs] 
          $T[phi_stmt_120_phi_mux_ack] 
          $T[phi_stmt_120_phi_mux_ack_ps] 
          phi_stmt_120_phi_mux_ack_ps <-& (phi_stmt_120_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_120_update_completed_)
          $T[type_cast_123_sample_start__ps] 
          $T[type_cast_123_sample_completed__ps] 
          $T[type_cast_123_update_start__ps] 
          $T[type_cast_123_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_123_sample_start_] 
          $T[type_cast_123_sample_completed_] 
          type_cast_123_sample_completed_ <-& (type_cast_123_sample_start_)
          $T[type_cast_123_update_start_] 
          $T [type_cast_123_update_completed_] $delay 
          type_cast_123_update_completed_ <-& (type_cast_123_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_123_sample_start_ <-& (type_cast_123_sample_start__ps)
          type_cast_123_update_start_ <-& (type_cast_123_update_start__ps)
          // Phi complete dependency.
          type_cast_123_sample_completed__ps <-& (type_cast_123_sample_completed_)
          type_cast_123_update_completed__ps <-& (type_cast_123_update_completed_)
          $T[R_nval_odd_124_sample_start__ps] 
          $T[R_nval_odd_124_sample_completed__ps] 
          $T[R_nval_odd_124_update_start__ps] 
          $T[R_nval_odd_124_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nval_odd_124_sample_start_] 
          $T[R_nval_odd_124_sample_completed_] 
          $T[R_nval_odd_124_update_start_] 
          $T[R_nval_odd_124_update_completed_] 
          ;;[R_nval_odd_124_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nval_odd_124_sample_start_ &-> (R_nval_odd_124_Sample)
          R_nval_odd_124_sample_completed_ <-& (R_nval_odd_124_Sample)
          ;;[R_nval_odd_124_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nval_odd_124_update_start_ &-> (R_nval_odd_124_Update)
          R_nval_odd_124_update_completed_ <-& (R_nval_odd_124_Update)
          // RAW reenables for nval_odd
          // Phi start dependency for implicit/constant alternative.
          R_nval_odd_124_sample_start_ <-& (R_nval_odd_124_sample_start__ps)
          R_nval_odd_124_update_start_ <-& (R_nval_odd_124_update_start__ps)
          // Phi complete dependency.
          R_nval_odd_124_sample_completed__ps <-& (R_nval_odd_124_sample_completed_)
          R_nval_odd_124_update_completed__ps <-& (R_nval_odd_124_update_completed_)
          $phisequencer [ phi_stmt_120_phi_seq] : 
          phi_stmt_120_entry_trigger type_cast_123_sample_start__ps type_cast_123_sample_completed__ps type_cast_123_update_start__ps type_cast_123_update_completed__ps phi_stmt_120_loopback_trigger R_nval_odd_124_sample_start__ps R_nval_odd_124_sample_completed__ps R_nval_odd_124_update_start__ps R_nval_odd_124_update_completed__ps :
          phi_stmt_120_sample_start__ps phi_stmt_120_sample_completed__ps phi_stmt_120_update_start__ps phi_stmt_120_update_completed__ps :
          phi_stmt_120_entry_sample_req_ps phi_stmt_120_loopback_sample_req_ps : 
          phi_stmt_120_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_120
          // start: WAR dependencies for Cr
          // done: WAR dependencies for Cr
          // start:  			$volatile Cr := ( $slice C 7 1 )  $buffering 1
          //  file .Aa/mvp.opt.aa, line 66
          // volatile! 
          // Source expression
          // ( $slice C 7 1 ) 
          // C
          // Target expression
          // (as target) Cr
          // start: WAR dependencies for Cr
          // done: WAR dependencies for Cr
          // end:  			$volatile Cr := ( $slice C 7 1 )  $buffering 1
          // start:  			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 67
          // Source expression
          // A_0[R][Cr]
          $T[array_obj_ref_133_base_address_calculated] 
          $T[array_obj_ref_133_sample_start_] 
          $T[array_obj_ref_133_sample_completed_] 
          $T[array_obj_ref_133_update_start_] 
          $T[array_obj_ref_133_update_completed_] 
          $T[array_obj_ref_133_word_address_calculated] 
          $T[array_obj_ref_133_root_address_calculated] 
          $T[array_obj_ref_133_offset_calculated] 
          $T[array_obj_ref_133_index_resized_0] 
          $T[array_obj_ref_133_index_scaled_0] 
          $T[array_obj_ref_133_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_133_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_133_index_computed_0
          ;;[array_obj_ref_133_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_133_index_computed_0 &-> (array_obj_ref_133_index_resize_0)
          array_obj_ref_133_index_resized_0 <-& (array_obj_ref_133_index_resize_0)
          $T[array_obj_ref_133_index_scale_0_sample_start] 
          $T[array_obj_ref_133_index_scale_0_sample_complete] 
          $T[array_obj_ref_133_index_scale_0_update_start] 
          $T[array_obj_ref_133_index_scale_0_update_complete] 
          ;;[array_obj_ref_133_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_133_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_133_index_resized_0 &-> (array_obj_ref_133_index_scale_0_sample_start)
          array_obj_ref_133_index_scale_0_sample_start &-> (array_obj_ref_133_index_scale_0_Sample)
          array_obj_ref_133_index_scale_0_sample_complete <-& (array_obj_ref_133_index_scale_0_Sample)
          array_obj_ref_133_index_scale_0_update_start &-> (array_obj_ref_133_index_scale_0_Update)
          array_obj_ref_133_index_scale_0_update_complete <-& (array_obj_ref_133_index_scale_0_Update)
          array_obj_ref_133_index_scaled_0 <-& (array_obj_ref_133_index_scale_0_update_complete)
          array_obj_ref_133_index_scale_0_sample_start o<-& (array_obj_ref_133_index_scale_0_sample_complete 1)
          array_obj_ref_133_index_scale_0_update_start o<-& (array_obj_ref_133_index_scale_0_update_complete 0)
          $T[array_obj_ref_133_index_resized_1] 
          $T[array_obj_ref_133_index_scaled_1] 
          $T[array_obj_ref_133_index_computed_1] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_133_index_computed_1
          array_obj_ref_133_index_computed_1 <-& (phi_stmt_110_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_133_index_computed_1
          ;;[array_obj_ref_133_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_133_index_computed_1 &-> (array_obj_ref_133_index_resize_1)
          array_obj_ref_133_index_resized_1 <-& (array_obj_ref_133_index_resize_1)
          ;;[array_obj_ref_133_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_133_index_resized_1 &-> (array_obj_ref_133_index_scale_1)
          array_obj_ref_133_index_scaled_1 <-& (array_obj_ref_133_index_scale_1)
          $T[array_obj_ref_133_partial_sum_1_sample_start] 
          $T[array_obj_ref_133_partial_sum_1_sample_complete] 
          $T[array_obj_ref_133_partial_sum_1_update_start] 
          $T[array_obj_ref_133_partial_sum_1_update_complete] 
          ;;[array_obj_ref_133_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_133_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_133_partial_sum_1_sample_start &-> (array_obj_ref_133_partial_sum_1_Sample)
          array_obj_ref_133_partial_sum_1_sample_complete <-& (array_obj_ref_133_partial_sum_1_Sample)
          array_obj_ref_133_partial_sum_1_update_start &-> (array_obj_ref_133_partial_sum_1_Update)
          array_obj_ref_133_partial_sum_1_update_complete <-& (array_obj_ref_133_partial_sum_1_Update)
          array_obj_ref_133_partial_sum_1_sample_start o<-& (array_obj_ref_133_partial_sum_1_sample_complete 1)
          array_obj_ref_133_partial_sum_1_update_start o<-& (array_obj_ref_133_partial_sum_1_update_complete 0)
          array_obj_ref_133_partial_sum_1_sample_start <-& (array_obj_ref_133_index_scaled_0)
          array_obj_ref_133_partial_sum_1_sample_start <-& (array_obj_ref_133_index_scaled_1)
          array_obj_ref_133_index_scaled_0 o<-& (array_obj_ref_133_partial_sum_1_sample_complete 1)
          phi_stmt_110_update_start_ o<-& (array_obj_ref_133_partial_sum_1_sample_complete 1)
          array_obj_ref_133_offset_calculated <-& (array_obj_ref_133_partial_sum_1_update_complete)
          ;;[array_obj_ref_133_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_133_partial_sum_1_update_complete &-> (array_obj_ref_133_final_index_sum_regn)
          array_obj_ref_133_offset_calculated <-& (array_obj_ref_133_final_index_sum_regn)
          ;;[array_obj_ref_133_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_133_offset_calculated &-> (array_obj_ref_133_base_plus_offset)
          array_obj_ref_133_root_address_calculated <-& (array_obj_ref_133_base_plus_offset)
          ;;[array_obj_ref_133_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_133_root_address_calculated &-> (array_obj_ref_133_word_addrgen)
          array_obj_ref_133_word_address_calculated <-& (array_obj_ref_133_word_addrgen)
          ;;[array_obj_ref_133_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_133_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_133_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_133_sample_start_ <-& (array_obj_ref_133_word_address_calculated)
          // reenable-joins
          array_obj_ref_133_partial_sum_1_update_start o<-& (array_obj_ref_133_sample_completed_ 0)
          array_obj_ref_133_sample_start_ &-> (array_obj_ref_133_Sample)
          array_obj_ref_133_sample_completed_ <-& (array_obj_ref_133_Sample)
          array_obj_ref_133_sample_completed_ &-> ($null)
          array_obj_ref_133_update_start_ &-> (array_obj_ref_133_Update)
          array_obj_ref_133_update_completed_ <-& (array_obj_ref_133_Update)
          // self-release: 
          array_obj_ref_133_sample_start_ o<-& (array_obj_ref_133_sample_completed_ 1)
          $null &-> (array_obj_ref_133_update_start_)
          array_obj_ref_133_update_start_ o<-& (array_obj_ref_133_update_completed_ 0)
          // Target expression
          // (as target) a_rc_even
          // start: WAR dependencies for a_rc_even
          // done: WAR dependencies for a_rc_even
          // end:  			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          // start:  			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 68
          // Source expression
          // A_1[R][Cr]
          $T[array_obj_ref_138_base_address_calculated] 
          $T[array_obj_ref_138_sample_start_] 
          $T[array_obj_ref_138_sample_completed_] 
          $T[array_obj_ref_138_update_start_] 
          $T[array_obj_ref_138_update_completed_] 
          $T[array_obj_ref_138_word_address_calculated] 
          $T[array_obj_ref_138_root_address_calculated] 
          $T[array_obj_ref_138_offset_calculated] 
          $T[array_obj_ref_138_index_resized_0] 
          $T[array_obj_ref_138_index_scaled_0] 
          $T[array_obj_ref_138_index_computed_0] 
          // R
          // start: Forward dependencies from R to transition array_obj_ref_138_index_computed_0
          // done: Forward dependencies from R to transition array_obj_ref_138_index_computed_0
          ;;[array_obj_ref_138_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_138_index_computed_0 &-> (array_obj_ref_138_index_resize_0)
          array_obj_ref_138_index_resized_0 <-& (array_obj_ref_138_index_resize_0)
          $T[array_obj_ref_138_index_scale_0_sample_start] 
          $T[array_obj_ref_138_index_scale_0_sample_complete] 
          $T[array_obj_ref_138_index_scale_0_update_start] 
          $T[array_obj_ref_138_index_scale_0_update_complete] 
          ;;[array_obj_ref_138_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_138_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_138_index_resized_0 &-> (array_obj_ref_138_index_scale_0_sample_start)
          array_obj_ref_138_index_scale_0_sample_start &-> (array_obj_ref_138_index_scale_0_Sample)
          array_obj_ref_138_index_scale_0_sample_complete <-& (array_obj_ref_138_index_scale_0_Sample)
          array_obj_ref_138_index_scale_0_update_start &-> (array_obj_ref_138_index_scale_0_Update)
          array_obj_ref_138_index_scale_0_update_complete <-& (array_obj_ref_138_index_scale_0_Update)
          array_obj_ref_138_index_scaled_0 <-& (array_obj_ref_138_index_scale_0_update_complete)
          array_obj_ref_138_index_scale_0_sample_start o<-& (array_obj_ref_138_index_scale_0_sample_complete 1)
          array_obj_ref_138_index_scale_0_update_start o<-& (array_obj_ref_138_index_scale_0_update_complete 0)
          $T[array_obj_ref_138_index_resized_1] 
          $T[array_obj_ref_138_index_scaled_1] 
          $T[array_obj_ref_138_index_computed_1] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_138_index_computed_1
          array_obj_ref_138_index_computed_1 <-& (phi_stmt_110_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_138_index_computed_1
          ;;[array_obj_ref_138_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_138_index_computed_1 &-> (array_obj_ref_138_index_resize_1)
          array_obj_ref_138_index_resized_1 <-& (array_obj_ref_138_index_resize_1)
          ;;[array_obj_ref_138_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_138_index_resized_1 &-> (array_obj_ref_138_index_scale_1)
          array_obj_ref_138_index_scaled_1 <-& (array_obj_ref_138_index_scale_1)
          $T[array_obj_ref_138_partial_sum_1_sample_start] 
          $T[array_obj_ref_138_partial_sum_1_sample_complete] 
          $T[array_obj_ref_138_partial_sum_1_update_start] 
          $T[array_obj_ref_138_partial_sum_1_update_complete] 
          ;;[array_obj_ref_138_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_138_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_138_partial_sum_1_sample_start &-> (array_obj_ref_138_partial_sum_1_Sample)
          array_obj_ref_138_partial_sum_1_sample_complete <-& (array_obj_ref_138_partial_sum_1_Sample)
          array_obj_ref_138_partial_sum_1_update_start &-> (array_obj_ref_138_partial_sum_1_Update)
          array_obj_ref_138_partial_sum_1_update_complete <-& (array_obj_ref_138_partial_sum_1_Update)
          array_obj_ref_138_partial_sum_1_sample_start o<-& (array_obj_ref_138_partial_sum_1_sample_complete 1)
          array_obj_ref_138_partial_sum_1_update_start o<-& (array_obj_ref_138_partial_sum_1_update_complete 0)
          array_obj_ref_138_partial_sum_1_sample_start <-& (array_obj_ref_138_index_scaled_0)
          array_obj_ref_138_partial_sum_1_sample_start <-& (array_obj_ref_138_index_scaled_1)
          array_obj_ref_138_index_scaled_0 o<-& (array_obj_ref_138_partial_sum_1_sample_complete 1)
          phi_stmt_110_update_start_ o<-& (array_obj_ref_138_partial_sum_1_sample_complete 1)
          array_obj_ref_138_offset_calculated <-& (array_obj_ref_138_partial_sum_1_update_complete)
          ;;[array_obj_ref_138_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_138_partial_sum_1_update_complete &-> (array_obj_ref_138_final_index_sum_regn)
          array_obj_ref_138_offset_calculated <-& (array_obj_ref_138_final_index_sum_regn)
          ;;[array_obj_ref_138_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_138_offset_calculated &-> (array_obj_ref_138_base_plus_offset)
          array_obj_ref_138_root_address_calculated <-& (array_obj_ref_138_base_plus_offset)
          ;;[array_obj_ref_138_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_138_root_address_calculated &-> (array_obj_ref_138_word_addrgen)
          array_obj_ref_138_word_address_calculated <-& (array_obj_ref_138_word_addrgen)
          ;;[array_obj_ref_138_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_138_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_138_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_138_sample_start_ <-& (array_obj_ref_138_word_address_calculated)
          // reenable-joins
          array_obj_ref_138_partial_sum_1_update_start o<-& (array_obj_ref_138_sample_completed_ 0)
          array_obj_ref_138_sample_start_ &-> (array_obj_ref_138_Sample)
          array_obj_ref_138_sample_completed_ <-& (array_obj_ref_138_Sample)
          array_obj_ref_138_sample_completed_ &-> ($null)
          array_obj_ref_138_update_start_ &-> (array_obj_ref_138_Update)
          array_obj_ref_138_update_completed_ <-& (array_obj_ref_138_Update)
          // self-release: 
          array_obj_ref_138_sample_start_ o<-& (array_obj_ref_138_sample_completed_ 1)
          $null &-> (array_obj_ref_138_update_start_)
          array_obj_ref_138_update_start_ o<-& (array_obj_ref_138_update_completed_ 0)
          // Target expression
          // (as target) a_rc_odd
          // start: WAR dependencies for a_rc_odd
          // done: WAR dependencies for a_rc_odd
          // end:  			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          // start:  			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 69
          // Source expression
          // x_0[Cr]
          $T[array_obj_ref_142_base_address_calculated] 
          $T[array_obj_ref_142_sample_start_] 
          $T[array_obj_ref_142_sample_completed_] 
          $T[array_obj_ref_142_update_start_] 
          $T[array_obj_ref_142_update_completed_] 
          $T[array_obj_ref_142_word_address_calculated] 
          $T[array_obj_ref_142_root_address_calculated] 
          $T[array_obj_ref_142_offset_calculated] 
          $T[array_obj_ref_142_index_resized_0] 
          $T[array_obj_ref_142_index_scaled_0] 
          $T[array_obj_ref_142_index_computed_0] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_142_index_computed_0
          array_obj_ref_142_index_computed_0 <-& (phi_stmt_110_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_142_index_computed_0
          ;;[array_obj_ref_142_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_142_index_computed_0 &-> (array_obj_ref_142_index_resize_0)
          array_obj_ref_142_index_resized_0 <-& (array_obj_ref_142_index_resize_0)
          ;;[array_obj_ref_142_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_142_index_resized_0 &-> (array_obj_ref_142_index_scale_0)
          array_obj_ref_142_index_scaled_0 <-& (array_obj_ref_142_index_scale_0)
          ;;[array_obj_ref_142_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_142_index_scaled_0 &-> (array_obj_ref_142_final_index_sum_regn)
          array_obj_ref_142_offset_calculated <-& (array_obj_ref_142_final_index_sum_regn)
          ;;[array_obj_ref_142_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_142_offset_calculated &-> (array_obj_ref_142_base_plus_offset)
          array_obj_ref_142_root_address_calculated <-& (array_obj_ref_142_base_plus_offset)
          ;;[array_obj_ref_142_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_142_root_address_calculated &-> (array_obj_ref_142_word_addrgen)
          array_obj_ref_142_word_address_calculated <-& (array_obj_ref_142_word_addrgen)
          ;;[array_obj_ref_142_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_142_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_142_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_142_sample_start_ <-& (array_obj_ref_142_word_address_calculated)
          // reenable-joins
          phi_stmt_110_update_start_ o<-& (array_obj_ref_142_sample_completed_ 0)
          array_obj_ref_142_sample_start_ &-> (array_obj_ref_142_Sample)
          array_obj_ref_142_sample_completed_ <-& (array_obj_ref_142_Sample)
          array_obj_ref_142_sample_completed_ &-> ($null)
          array_obj_ref_142_update_start_ &-> (array_obj_ref_142_Update)
          array_obj_ref_142_update_completed_ <-& (array_obj_ref_142_Update)
          // self-release: 
          array_obj_ref_142_sample_start_ o<-& (array_obj_ref_142_sample_completed_ 1)
          $null &-> (array_obj_ref_142_update_start_)
          array_obj_ref_142_update_start_ o<-& (array_obj_ref_142_update_completed_ 0)
          // Target expression
          // (as target) xval_even
          // start: WAR dependencies for xval_even
          // done: WAR dependencies for xval_even
          // end:  			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          // start:  			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 70
          // Source expression
          // x_1[Cr]
          $T[array_obj_ref_146_base_address_calculated] 
          $T[array_obj_ref_146_sample_start_] 
          $T[array_obj_ref_146_sample_completed_] 
          $T[array_obj_ref_146_update_start_] 
          $T[array_obj_ref_146_update_completed_] 
          $T[array_obj_ref_146_word_address_calculated] 
          $T[array_obj_ref_146_root_address_calculated] 
          $T[array_obj_ref_146_offset_calculated] 
          $T[array_obj_ref_146_index_resized_0] 
          $T[array_obj_ref_146_index_scaled_0] 
          $T[array_obj_ref_146_index_computed_0] 
          // Cr
          // start: Forward dependencies from Cr to transition array_obj_ref_146_index_computed_0
          array_obj_ref_146_index_computed_0 <-& (phi_stmt_110_update_completed_)
          // done: Forward dependencies from Cr to transition array_obj_ref_146_index_computed_0
          ;;[array_obj_ref_146_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_146_index_computed_0 &-> (array_obj_ref_146_index_resize_0)
          array_obj_ref_146_index_resized_0 <-& (array_obj_ref_146_index_resize_0)
          ;;[array_obj_ref_146_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_146_index_resized_0 &-> (array_obj_ref_146_index_scale_0)
          array_obj_ref_146_index_scaled_0 <-& (array_obj_ref_146_index_scale_0)
          ;;[array_obj_ref_146_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_146_index_scaled_0 &-> (array_obj_ref_146_final_index_sum_regn)
          array_obj_ref_146_offset_calculated <-& (array_obj_ref_146_final_index_sum_regn)
          ;;[array_obj_ref_146_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_146_offset_calculated &-> (array_obj_ref_146_base_plus_offset)
          array_obj_ref_146_root_address_calculated <-& (array_obj_ref_146_base_plus_offset)
          ;;[array_obj_ref_146_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_146_root_address_calculated &-> (array_obj_ref_146_word_addrgen)
          array_obj_ref_146_word_address_calculated <-& (array_obj_ref_146_word_addrgen)
          ;;[array_obj_ref_146_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_146_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_146_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_146_sample_start_ <-& (array_obj_ref_146_word_address_calculated)
          // reenable-joins
          phi_stmt_110_update_start_ o<-& (array_obj_ref_146_sample_completed_ 0)
          array_obj_ref_146_sample_start_ &-> (array_obj_ref_146_Sample)
          array_obj_ref_146_sample_completed_ <-& (array_obj_ref_146_Sample)
          array_obj_ref_146_sample_completed_ &-> ($null)
          array_obj_ref_146_update_start_ &-> (array_obj_ref_146_Update)
          array_obj_ref_146_update_completed_ <-& (array_obj_ref_146_Update)
          // self-release: 
          array_obj_ref_146_sample_start_ o<-& (array_obj_ref_146_sample_completed_ 1)
          $null &-> (array_obj_ref_146_update_start_)
          array_obj_ref_146_update_start_ o<-& (array_obj_ref_146_update_completed_ 0)
          // Target expression
          // (as target) xval_odd
          // start: WAR dependencies for xval_odd
          // done: WAR dependencies for xval_odd
          // end:  			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          // start:  			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 71
          $T[assign_stmt_150_sample_start_] 
          $T[assign_stmt_150_sample_completed_] 
          $T[assign_stmt_150_update_start_] 
          $T[assign_stmt_150_update_completed_] 
          // Source expression
          // val_even
          // Target expression
          // (as target) val_even_143_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_150_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_150_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_150_sample_start_ &-> (assign_stmt_150_Sample)
          assign_stmt_150_sample_completed_ <-& (assign_stmt_150_Sample)
          assign_stmt_150_sample_completed_ &-> ($null)
          assign_stmt_150_update_start_ &-> (assign_stmt_150_Update)
          assign_stmt_150_update_completed_ <-& (assign_stmt_150_Update)
          // start: Forward dependencies from val_even to transition assign_stmt_150_sample_start_
          assign_stmt_150_sample_start_ <-& (phi_stmt_115_update_completed_)
          // done: Forward dependencies from val_even to transition assign_stmt_150_sample_start_
          // RAW reenables for val_even
          phi_stmt_115_update_start_ o<-& (assign_stmt_150_sample_completed_ 0)
          // self-release: 
          assign_stmt_150_sample_start_ o<-& (assign_stmt_150_sample_completed_ 1)
          $null &-> (assign_stmt_150_update_start_)
          assign_stmt_150_update_start_ o<-& (assign_stmt_150_update_completed_ 0)
          // start: WAR dependencies for val_even_143_delayed_5_0
          // done: WAR dependencies for val_even_143_delayed_5_0
          // end:  			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_even
          // WAR dependency: Read: nval_even before Write: 			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          array_obj_ref_133_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (array_obj_ref_133_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			a_rc_even := A_0[R][Cr] $buffering 1// bits of buffering = 32. 
          array_obj_ref_142_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (array_obj_ref_142_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			xval_even := x_0[Cr] $buffering 1// bits of buffering = 32. 
          assign_stmt_150_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (assign_stmt_150_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_even
          // start:  			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 72
          // volatile! 
          // Source expression
          // (val_even_143_delayed_5_0 + (a_rc_even * xval_even))
          // val_even_143_delayed_5_0
          // (a_rc_even * xval_even)
          // a_rc_even
          // xval_even
          // Target expression
          // (as target) nval_even
          // start: WAR dependencies for nval_even
          // WAR dependency: Read: nval_even before Write: 			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          array_obj_ref_133_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (array_obj_ref_133_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
          array_obj_ref_142_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (array_obj_ref_142_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
          assign_stmt_150_update_start_ <-& (phi_stmt_115_sample_completed_)
          phi_stmt_115_sample_start_ o<-& (assign_stmt_150_update_completed_ 0)
          // WAR dependency: release  Read: nval_even with Write: 			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_even
          // end:  			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
          // start:  			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          //  file .Aa/mvp.opt.aa, line 74
          $T[assign_stmt_165_sample_start_] 
          $T[assign_stmt_165_sample_completed_] 
          $T[assign_stmt_165_update_start_] 
          $T[assign_stmt_165_update_completed_] 
          // Source expression
          // val_odd
          // Target expression
          // (as target) val_odd_155_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_165_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_165_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_165_sample_start_ &-> (assign_stmt_165_Sample)
          assign_stmt_165_sample_completed_ <-& (assign_stmt_165_Sample)
          assign_stmt_165_sample_completed_ &-> ($null)
          assign_stmt_165_update_start_ &-> (assign_stmt_165_Update)
          assign_stmt_165_update_completed_ <-& (assign_stmt_165_Update)
          // start: Forward dependencies from val_odd to transition assign_stmt_165_sample_start_
          assign_stmt_165_sample_start_ <-& (phi_stmt_120_update_completed_)
          // done: Forward dependencies from val_odd to transition assign_stmt_165_sample_start_
          // RAW reenables for val_odd
          phi_stmt_120_update_start_ o<-& (assign_stmt_165_sample_completed_ 0)
          // self-release: 
          assign_stmt_165_sample_start_ o<-& (assign_stmt_165_sample_completed_ 1)
          $null &-> (assign_stmt_165_update_start_)
          assign_stmt_165_update_start_ o<-& (assign_stmt_165_update_completed_ 0)
          // start: WAR dependencies for val_odd_155_delayed_5_0
          // done: WAR dependencies for val_odd_155_delayed_5_0
          // end:  			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // start: WAR dependencies for nval_odd
          // WAR dependency: Read: nval_odd before Write: 			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          array_obj_ref_138_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (array_obj_ref_138_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			a_rc_odd := A_1[R][Cr] $buffering 1// bits of buffering = 32. 
          array_obj_ref_146_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (array_obj_ref_146_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			xval_odd := x_1[Cr] $buffering 1// bits of buffering = 32. 
          assign_stmt_165_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (assign_stmt_165_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_odd
          // start:  			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          //  file .Aa/mvp.opt.aa, line 75
          // volatile! 
          // Source expression
          // (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd))
          // val_odd_155_delayed_5_0
          // (a_rc_odd * xval_odd)
          // a_rc_odd
          // xval_odd
          // Target expression
          // (as target) nval_odd
          // start: WAR dependencies for nval_odd
          // WAR dependency: Read: nval_odd before Write: 			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          array_obj_ref_138_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (array_obj_ref_138_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
          array_obj_ref_146_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (array_obj_ref_146_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
          assign_stmt_165_update_start_ <-& (phi_stmt_120_sample_completed_)
          phi_stmt_120_sample_start_ o<-& (assign_stmt_165_update_completed_ 0)
          // WAR dependency: release  Read: nval_odd with Write: 			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
          // done: WAR dependencies for nval_odd
          // end:  			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
          // start:  			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          //  file .Aa/mvp.opt.aa, line 77
          // Source expression
          // (C + 2 )
          $T[ADD_u8_u8_181_sample_start_] 
          $T[ADD_u8_u8_181_sample_completed_] 
          $T[ADD_u8_u8_181_update_start_] 
          $T[ADD_u8_u8_181_update_completed_] 
          // C
          // start: Forward dependencies from C to transition ADD_u8_u8_181_sample_start_
          ADD_u8_u8_181_sample_start_ <-& (phi_stmt_110_update_completed_)
          // done: Forward dependencies from C to transition ADD_u8_u8_181_sample_start_
          ;;[ADD_u8_u8_181_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u8_u8_181_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u8_u8_181_sample_start_ &-> (ADD_u8_u8_181_Sample)
          ADD_u8_u8_181_sample_completed_ <-& (ADD_u8_u8_181_Sample)
          ADD_u8_u8_181_sample_completed_ &-> ($null)
          ADD_u8_u8_181_update_start_ &-> (ADD_u8_u8_181_Update)
          ADD_u8_u8_181_update_completed_ <-& (ADD_u8_u8_181_Update)
          // RAW reenables for C
          phi_stmt_110_update_start_ o<-& (ADD_u8_u8_181_sample_completed_ 0)
          // self-release: 
          ADD_u8_u8_181_sample_start_ o<-& (ADD_u8_u8_181_sample_completed_ 1)
          $null &-> (ADD_u8_u8_181_update_start_)
          ADD_u8_u8_181_update_start_ o<-& (ADD_u8_u8_181_update_completed_ 0)
          // Target expression
          // (as target) nC
          // start: WAR dependencies for nC
          // WAR dependency: Read: nC before Write: 			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          ADD_u8_u8_181_update_start_ <-& (phi_stmt_110_sample_completed_)
          phi_stmt_110_sample_start_ o<-& (ADD_u8_u8_181_update_completed_ 0)
          // WAR dependency: release  Read: nC with Write: 			nC := (C + 2 ) $buffering 1// bits of buffering = 8. 
          // done: WAR dependencies for nC
          // end:  			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
          // (nC < 32 )
          // nC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u8_u8_181_update_completed_)
          // done: Forward dependencies from (nC < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  array_obj_ref_146 load
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_142 load
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  array_obj_ref_138 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  array_obj_ref_133 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_108__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_108_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_108__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_108_loop_body : condition_evaluated
        $bind do_while_stmt_108__entry__  => do_while_stmt_108_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_108_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_108__exit__)
      }
      do_while_stmt_108__entry__ |-> (do_while_stmt_108)
      do_while_stmt_108__exit__ <-| (do_while_stmt_108)
      do_while_stmt_108__entry__ <-| (branch_block_stmt_107__entry__)
      do_while_stmt_108__exit__ |-> (branch_block_stmt_107__exit__)
    }
    ::[assign_stmt_192] 
    {
      // start:  	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
      //  file .Aa/mvp.opt.aa, line 81
      // Source expression
      // (nval_even + nval_odd)
      $T[ADD_u32_u32_191_sample_start_] 
      $T[ADD_u32_u32_191_sample_completed_] 
      $T[ADD_u32_u32_191_update_start_] 
      $T[ADD_u32_u32_191_update_completed_] 
      // nval_even
      // nval_odd
      // start: Forward dependencies from nval_even to transition ADD_u32_u32_191_sample_start_
      // done: Forward dependencies from nval_even to transition ADD_u32_u32_191_sample_start_
      // start: Forward dependencies from nval_odd to transition ADD_u32_u32_191_sample_start_
      // done: Forward dependencies from nval_odd to transition ADD_u32_u32_191_sample_start_
      ;;[ADD_u32_u32_191_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_191_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_191_sample_start_ &-> (ADD_u32_u32_191_Sample)
      ADD_u32_u32_191_sample_completed_ <-& (ADD_u32_u32_191_Sample)
      ADD_u32_u32_191_sample_completed_ &-> ($null)
      ADD_u32_u32_191_update_start_ &-> (ADD_u32_u32_191_Update)
      ADD_u32_u32_191_update_completed_ <-& (ADD_u32_u32_191_Update)
      // Target expression
      // (as target) result
      // result
      // write to interface object
      // start: WAR dependencies for result
      // done: WAR dependencies for result
      // result
      // write to interface object
      // end:  	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %dotP_odd%mmloop%
    //  file .Aa/mvp.opt.aa, line 58
    // constant-object-declarations for block %dotP_odd%mmloop
    //  file .Aa/mvp.opt.aa, line 54
    // constant-object-declarations for block %dotP_odd
    //  file .Aa/mvp.opt.aa, line 49
    // constant-declarations for block %dotP_odd%mmloop
    //  file .Aa/mvp.opt.aa, line 54
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 56
    // 32 
    $constant $W[konst_185_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %dotP_odd%mmloop%
    //  file .Aa/mvp.opt.aa, line 58
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_113_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi val_even := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_even $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 61
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_118_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 63
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_123_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // A_0[R][Cr]
    $constant $W[array_obj_ref_133_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_133_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_133_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_133_word_offset_0] : $int<9> := _b000000000// 0
    // A_1[R][Cr]
    $constant $W[array_obj_ref_138_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_138_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_138_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_138_word_offset_0] : $int<9> := _b000000000// 0
    // x_0[Cr]
    $constant $W[array_obj_ref_142_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_142_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_142_word_offset_0] : $int<4> := _b0000// 0
    // x_1[Cr]
    $constant $W[array_obj_ref_146_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_146_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_146_word_offset_0] : $int<4> := _b0000// 0
    // 2 
    $constant $W[konst_180_wire_constant] : $int<8> := _b00000010// 2
    // block %dotP_odd%mmloop
    //  file .Aa/mvp.opt.aa, line 54
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 56
    // (nC < 32 )
    $intermediate $W[ULT_u8_u1_186_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 58
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    $W[nC_182_114_buffered] : $int<8>
    // C
    $W[C_110] : $int<8>
    // 			$phi val_even := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_even $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 61
    $W[nval_even_157_119_buffered] : $int<32>
    // val_even
    $W[val_even_115] : $int<32>
    // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 63
    $W[nval_odd_172_124_buffered] : $int<32>
    // val_odd
    $W[val_odd_120] : $int<32>
    // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 66
    // Cr
    $W[Cr_129] : $int<7>
    // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 67
    // A_0[R][Cr]
    $intermediate $W[R_R_131_resized] : $int<9>
    $intermediate $W[R_R_131_scaled] : $int<9>
    $intermediate $W[R_Cr_132_resized] : $int<9>
    $intermediate $W[R_Cr_132_scaled] : $int<9>
    $intermediate $W[array_obj_ref_133_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_133_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_133_root_address] : $int<9>
    $W[array_obj_ref_133_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_133_data_0] : $int<32>
    // a_rc_even
    $W[a_rc_even_134] : $int<32>
    // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 68
    // A_1[R][Cr]
    $intermediate $W[R_R_136_resized] : $int<9>
    $intermediate $W[R_R_136_scaled] : $int<9>
    $intermediate $W[R_Cr_137_resized] : $int<9>
    $intermediate $W[R_Cr_137_scaled] : $int<9>
    $intermediate $W[array_obj_ref_138_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_138_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_138_root_address] : $int<9>
    $W[array_obj_ref_138_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_138_data_0] : $int<32>
    // a_rc_odd
    $W[a_rc_odd_139] : $int<32>
    // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 69
    // x_0[Cr]
    $intermediate $W[R_Cr_141_resized] : $int<4>
    $intermediate $W[R_Cr_141_scaled] : $int<4>
    $intermediate $W[array_obj_ref_142_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_142_root_address] : $int<4>
    $W[array_obj_ref_142_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_142_data_0] : $int<32>
    // xval_even
    $W[xval_even_143] : $int<32>
    // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 70
    // x_1[Cr]
    $intermediate $W[R_Cr_145_resized] : $int<4>
    $intermediate $W[R_Cr_145_scaled] : $int<4>
    $intermediate $W[array_obj_ref_146_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_146_root_address] : $int<4>
    $W[array_obj_ref_146_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_146_data_0] : $int<32>
    // xval_odd
    $W[xval_odd_147] : $int<32>
    // 			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 71
    // val_even_143_delayed_5_0
    $W[val_even_143_delayed_5_0_150] : $int<32>
    // 			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 72
    // (a_rc_even * xval_even)
    $intermediate $W[MUL_u32_u32_155_wire] : $int<32>
    // nval_even
    $W[nval_even_157] : $int<32>
    // 			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 74
    // val_odd_155_delayed_5_0
    $W[val_odd_155_delayed_5_0_165] : $int<32>
    // 			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 75
    // (a_rc_odd * xval_odd)
    $intermediate $W[MUL_u32_u32_170_wire] : $int<32>
    // nval_odd
    $W[nval_odd_172] : $int<32>
    // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 77
    // nC
    $W[nC_182] : $int<8>
    // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 81
    // result
    // datapath-instances for block %dotP_odd%mmloop
    //  file .Aa/mvp.opt.aa, line 54
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 56
    // (nC < 32 )
    <[ULT_u8_u1_186_inst] (nC_182 konst_185_wire_constant) (ULT_u8_u1_186_wire)   $flowthrough 
    $delay ULT_u8_u1_186_inst 0
    ==0? [do_while_stmt_108_branch] (ULT_u8_u1_186_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 58
    // 			$phi C := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nC $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 59
    # := [nC_182_114_buf] (nC_182) (nC_182_114_buffered)     $fullrate
    $buffering $out nC_182_114_buf nC_182_114_buffered  1
    # $phi [phi_stmt_110] (type_cast_113_wire_constant nC_182_114_buffered) ( C_110 ) $fullrate
    // $buffering  $out phi_stmt_110 C_110 2
    // 			$phi val_even := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_even $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 61
    # := [nval_even_157_119_buf] (nval_even_157) (nval_even_157_119_buffered)     $fullrate
    $buffering $out nval_even_157_119_buf nval_even_157_119_buffered  1
    # $phi [phi_stmt_115] (type_cast_118_wire_constant nval_even_157_119_buffered) ( val_even_115 ) $fullrate
    // $buffering  $out phi_stmt_115 val_even_115 2
    // 			$phi val_odd := 			  ($bitcast ($uint<32>) 0  ) $on   $entry 			  nval_odd $on   $loopback 
    // type of target is $uint<32>
    //  file .Aa/mvp.opt.aa, line 63
    # := [nval_odd_172_124_buf] (nval_odd_172) (nval_odd_172_124_buffered)     $fullrate
    $buffering $out nval_odd_172_124_buf nval_odd_172_124_buffered  1
    # $phi [phi_stmt_120] (type_cast_123_wire_constant nval_odd_172_124_buffered) ( val_odd_120 ) $fullrate
    // $buffering  $out phi_stmt_120 val_odd_120 2
    // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 66
    // ( $slice C 7 1 ) 
    [:] [slice_128_inst] (C_110 7 1) (Cr_129)  $flowthrough
    $delay slice_128_inst 0
    // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 67
    // A_0[R][Cr]
    &/ [array_obj_ref_133_index_0_resize] (R) (R_R_131_resized) 
    $flowthrough 
    *[array_obj_ref_133_index_0_scale] (R_R_131_resized array_obj_ref_133_offset_scale_factor_0) (R_R_131_scaled)    $fullrate
    $buffering  $in array_obj_ref_133_index_0_scale R_R_131_resized 2
    $buffering  $in array_obj_ref_133_index_0_scale array_obj_ref_133_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_133_index_0_scale R_R_131_scaled 2
    $delay array_obj_ref_133_index_0_scale 2
    &/ [array_obj_ref_133_index_1_resize] (Cr_129) (R_Cr_132_resized) 
    $flowthrough 
    &/ [array_obj_ref_133_index_1_rename] (R_Cr_132_resized) (R_Cr_132_scaled) 
    $flowthrough 
    +[array_obj_ref_133_index_sum_1] (R_Cr_132_scaled R_R_131_scaled) (array_obj_ref_133_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_133_index_sum_1 R_Cr_132_scaled 2
    $buffering  $in array_obj_ref_133_index_sum_1 R_R_131_scaled 2
    $buffering  $out array_obj_ref_133_index_sum_1 array_obj_ref_133_index_partial_sum_1 2
    $delay array_obj_ref_133_index_sum_1 2
    &/ [array_obj_ref_133_index_offset] (array_obj_ref_133_index_partial_sum_1) (array_obj_ref_133_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_133_root_address_inst] (array_obj_ref_133_final_offset) (array_obj_ref_133_root_address) 
    $flowthrough 
    &/ [array_obj_ref_133_addr_0] (array_obj_ref_133_root_address) (array_obj_ref_133_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_133_load_0] $from memory_space_0 (array_obj_ref_133_word_address_0) (array_obj_ref_133_data_0) 
    $buffering  $in array_obj_ref_133_load_0 array_obj_ref_133_word_address_0 2
    $buffering  $out array_obj_ref_133_load_0 array_obj_ref_133_data_0 2
    $delay array_obj_ref_133_load_0 5
    &/ [array_obj_ref_133_gather_scatter] (array_obj_ref_133_data_0) (a_rc_even_134) 
    $flowthrough 
    // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 68
    // A_1[R][Cr]
    &/ [array_obj_ref_138_index_0_resize] (R) (R_R_136_resized) 
    $flowthrough 
    *[array_obj_ref_138_index_0_scale] (R_R_136_resized array_obj_ref_138_offset_scale_factor_0) (R_R_136_scaled)    $fullrate
    $buffering  $in array_obj_ref_138_index_0_scale R_R_136_resized 2
    $buffering  $in array_obj_ref_138_index_0_scale array_obj_ref_138_offset_scale_factor_0 2
    $buffering  $out array_obj_ref_138_index_0_scale R_R_136_scaled 2
    $delay array_obj_ref_138_index_0_scale 2
    &/ [array_obj_ref_138_index_1_resize] (Cr_129) (R_Cr_137_resized) 
    $flowthrough 
    &/ [array_obj_ref_138_index_1_rename] (R_Cr_137_resized) (R_Cr_137_scaled) 
    $flowthrough 
    +[array_obj_ref_138_index_sum_1] (R_Cr_137_scaled R_R_136_scaled) (array_obj_ref_138_index_partial_sum_1)    $fullrate
    $buffering  $in array_obj_ref_138_index_sum_1 R_Cr_137_scaled 2
    $buffering  $in array_obj_ref_138_index_sum_1 R_R_136_scaled 2
    $buffering  $out array_obj_ref_138_index_sum_1 array_obj_ref_138_index_partial_sum_1 2
    $delay array_obj_ref_138_index_sum_1 2
    &/ [array_obj_ref_138_index_offset] (array_obj_ref_138_index_partial_sum_1) (array_obj_ref_138_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_138_root_address_inst] (array_obj_ref_138_final_offset) (array_obj_ref_138_root_address) 
    $flowthrough 
    &/ [array_obj_ref_138_addr_0] (array_obj_ref_138_root_address) (array_obj_ref_138_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_138_load_0] $from memory_space_1 (array_obj_ref_138_word_address_0) (array_obj_ref_138_data_0) 
    $buffering  $in array_obj_ref_138_load_0 array_obj_ref_138_word_address_0 2
    $buffering  $out array_obj_ref_138_load_0 array_obj_ref_138_data_0 2
    $delay array_obj_ref_138_load_0 5
    &/ [array_obj_ref_138_gather_scatter] (array_obj_ref_138_data_0) (a_rc_odd_139) 
    $flowthrough 
    // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 69
    // x_0[Cr]
    &/ [array_obj_ref_142_index_0_resize] (Cr_129) (R_Cr_141_resized) 
    $flowthrough 
    &/ [array_obj_ref_142_index_0_rename] (R_Cr_141_resized) (R_Cr_141_scaled) 
    $flowthrough 
    &/ [array_obj_ref_142_index_offset] (R_Cr_141_scaled) (array_obj_ref_142_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_142_root_address_inst] (array_obj_ref_142_final_offset) (array_obj_ref_142_root_address) 
    $flowthrough 
    &/ [array_obj_ref_142_addr_0] (array_obj_ref_142_root_address) (array_obj_ref_142_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_142_load_0] $from memory_space_2 (array_obj_ref_142_word_address_0) (array_obj_ref_142_data_0) 
    $buffering  $in array_obj_ref_142_load_0 array_obj_ref_142_word_address_0 2
    $buffering  $out array_obj_ref_142_load_0 array_obj_ref_142_data_0 2
    $delay array_obj_ref_142_load_0 5
    &/ [array_obj_ref_142_gather_scatter] (array_obj_ref_142_data_0) (xval_even_143) 
    $flowthrough 
    // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
    //  file .Aa/mvp.opt.aa, line 70
    // x_1[Cr]
    &/ [array_obj_ref_146_index_0_resize] (Cr_129) (R_Cr_145_resized) 
    $flowthrough 
    &/ [array_obj_ref_146_index_0_rename] (R_Cr_145_resized) (R_Cr_145_scaled) 
    $flowthrough 
    &/ [array_obj_ref_146_index_offset] (R_Cr_145_scaled) (array_obj_ref_146_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_146_root_address_inst] (array_obj_ref_146_final_offset) (array_obj_ref_146_root_address) 
    $flowthrough 
    &/ [array_obj_ref_146_addr_0] (array_obj_ref_146_root_address) (array_obj_ref_146_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_146_load_0] $from memory_space_3 (array_obj_ref_146_word_address_0) (array_obj_ref_146_data_0) 
    $buffering  $in array_obj_ref_146_load_0 array_obj_ref_146_word_address_0 2
    $buffering  $out array_obj_ref_146_load_0 array_obj_ref_146_data_0 2
    $delay array_obj_ref_146_load_0 5
    &/ [array_obj_ref_146_gather_scatter] (array_obj_ref_146_data_0) (xval_odd_147) 
    $flowthrough 
    // 			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 71
    # := [W_val_even_143_delayed_5_0_148_inst] (val_even_115) (val_even_143_delayed_5_0_150)  $cut_through    $fullrate
    $buffering  $out W_val_even_143_delayed_5_0_148_inst val_even_143_delayed_5_0_150 5
    // 			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 72
    // (a_rc_even * xval_even)
    *[MUL_u32_u32_155_inst] (a_rc_even_134 xval_even_143) (MUL_u32_u32_155_wire)   $flowthrough 
    $delay MUL_u32_u32_155_inst 0
    // (val_even_143_delayed_5_0 + (a_rc_even * xval_even))
    +[ADD_u32_u32_156_inst] (val_even_143_delayed_5_0_150 MUL_u32_u32_155_wire) (nval_even_157)   $flowthrough 
    $delay ADD_u32_u32_156_inst 0
    // 			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
    //  file .Aa/mvp.opt.aa, line 74
    # := [W_val_odd_155_delayed_5_0_163_inst] (val_odd_120) (val_odd_155_delayed_5_0_165)  $cut_through    $fullrate
    $buffering  $out W_val_odd_155_delayed_5_0_163_inst val_odd_155_delayed_5_0_165 5
    // 			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
    //  file .Aa/mvp.opt.aa, line 75
    // (a_rc_odd * xval_odd)
    *[MUL_u32_u32_170_inst] (a_rc_odd_139 xval_odd_147) (MUL_u32_u32_170_wire)   $flowthrough 
    $delay MUL_u32_u32_170_inst 0
    // (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd))
    +[ADD_u32_u32_171_inst] (val_odd_155_delayed_5_0_165 MUL_u32_u32_170_wire) (nval_odd_172)   $flowthrough 
    $delay ADD_u32_u32_171_inst 0
    // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
    //  file .Aa/mvp.opt.aa, line 77
    // (C + 2 )
    +[ADD_u8_u8_181_inst] (C_110 konst_180_wire_constant) (nC_182)    $fullrate
    $buffering  $out ADD_u8_u8_181_inst nC_182 2
    $delay ADD_u8_u8_181_inst 1
    // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 81
    // (nval_even + nval_odd)
    +[ADD_u32_u32_191_inst] (nval_even_157 nval_odd_172) (result)   
    $buffering  $out ADD_u32_u32_191_inst result 1
    $delay ADD_u32_u32_191_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_108
  //  file .Aa/mvp.opt.aa, line 56
  phi_stmt_110 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_110_entry_sample_req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_110_loopback_sample_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_110_phi_mux_ack)
  nC_182_114_buf <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nC_114_Sample/req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nC_114_Update/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nC_114_Sample/ack branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nC_114_Update/ack)
  phi_stmt_115 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_115_entry_sample_req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_115_loopback_sample_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_115_phi_mux_ack)
  nval_even_157_119_buf <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_even_119_Sample/req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_even_119_Update/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_even_119_Sample/ack branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_even_119_Update/ack)
  phi_stmt_120 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_120_entry_sample_req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_120_loopback_sample_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/phi_stmt_120_phi_mux_ack)
  nval_odd_172_124_buf <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_odd_124_Sample/req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_odd_124_Update/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_odd_124_Sample/ack branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/R_nval_odd_124_Update/ack)
  // 			$volatile Cr := ( $slice C 7 1 )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 66
  // C
  // 			a_rc_even := A_0[R][Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 67
  // A_0[R][Cr]
  // R
  array_obj_ref_133_index_0_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_resize_0/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_resize_0/index_resize_ack)
  array_obj_ref_133_index_0_scale <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_0_Sample/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_0_Update/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_0_Sample/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_0_Update/ca)
  // Cr
  array_obj_ref_133_index_1_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_resize_1/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_resize_1/index_resize_ack)
  array_obj_ref_133_index_1_rename <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_1/scale_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_index_scale_1/scale_rename_ack)
  array_obj_ref_133_index_sum_1 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_partial_sum_1_Sample/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_partial_sum_1_Update/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_partial_sum_1_Sample/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_partial_sum_1_Update/ca)
  array_obj_ref_133_index_offset <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_final_index_sum_regn/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_final_index_sum_regn/ack)
  array_obj_ref_133_root_address_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_base_plus_offset/sum_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_base_plus_offset/sum_rename_ack)
  array_obj_ref_133_addr_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_word_addrgen/root_register_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_word_addrgen/root_register_ack)
  array_obj_ref_133_gather_scatter <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Update/array_obj_ref_133_Merge/merge_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Update/array_obj_ref_133_Merge/merge_ack)
  array_obj_ref_133_load_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Sample/word_access_start/word_0/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Update/word_access_complete/word_0/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Sample/word_access_start/word_0/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_133_Update/word_access_complete/word_0/ca)
  // 			a_rc_odd := A_1[R][Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 68
  // A_1[R][Cr]
  // R
  array_obj_ref_138_index_0_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_resize_0/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_resize_0/index_resize_ack)
  array_obj_ref_138_index_0_scale <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_0_Sample/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_0_Update/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_0_Sample/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_0_Update/ca)
  // Cr
  array_obj_ref_138_index_1_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_resize_1/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_resize_1/index_resize_ack)
  array_obj_ref_138_index_1_rename <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_1/scale_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_index_scale_1/scale_rename_ack)
  array_obj_ref_138_index_sum_1 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_partial_sum_1_Sample/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_partial_sum_1_Update/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_partial_sum_1_Sample/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_partial_sum_1_Update/ca)
  array_obj_ref_138_index_offset <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_final_index_sum_regn/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_final_index_sum_regn/ack)
  array_obj_ref_138_root_address_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_base_plus_offset/sum_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_base_plus_offset/sum_rename_ack)
  array_obj_ref_138_addr_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_word_addrgen/root_register_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_word_addrgen/root_register_ack)
  array_obj_ref_138_gather_scatter <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Update/array_obj_ref_138_Merge/merge_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Update/array_obj_ref_138_Merge/merge_ack)
  array_obj_ref_138_load_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Sample/word_access_start/word_0/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Update/word_access_complete/word_0/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Sample/word_access_start/word_0/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_138_Update/word_access_complete/word_0/ca)
  // 			xval_even := x_0[Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 69
  // x_0[Cr]
  // Cr
  array_obj_ref_142_index_0_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_index_resize_0/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_index_resize_0/index_resize_ack)
  array_obj_ref_142_index_0_rename <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_index_scale_0/scale_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_index_scale_0/scale_rename_ack)
  array_obj_ref_142_index_offset <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_final_index_sum_regn/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_final_index_sum_regn/ack)
  array_obj_ref_142_root_address_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_base_plus_offset/sum_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_base_plus_offset/sum_rename_ack)
  array_obj_ref_142_addr_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_word_addrgen/root_register_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_word_addrgen/root_register_ack)
  array_obj_ref_142_gather_scatter <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Update/array_obj_ref_142_Merge/merge_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Update/array_obj_ref_142_Merge/merge_ack)
  array_obj_ref_142_load_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Sample/word_access_start/word_0/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Update/word_access_complete/word_0/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Sample/word_access_start/word_0/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_142_Update/word_access_complete/word_0/ca)
  // 			xval_odd := x_1[Cr] $buffering 2// bits of buffering = 64. 
  //  file .Aa/mvp.opt.aa, line 70
  // x_1[Cr]
  // Cr
  array_obj_ref_146_index_0_resize <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_index_resize_0/index_resize_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_index_resize_0/index_resize_ack)
  array_obj_ref_146_index_0_rename <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_index_scale_0/scale_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_index_scale_0/scale_rename_ack)
  array_obj_ref_146_index_offset <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_final_index_sum_regn/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_final_index_sum_regn/ack)
  array_obj_ref_146_root_address_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_base_plus_offset/sum_rename_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_base_plus_offset/sum_rename_ack)
  array_obj_ref_146_addr_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_word_addrgen/root_register_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_word_addrgen/root_register_ack)
  array_obj_ref_146_gather_scatter <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Update/array_obj_ref_146_Merge/merge_req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Update/array_obj_ref_146_Merge/merge_ack)
  array_obj_ref_146_load_0 <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Sample/word_access_start/word_0/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Update/word_access_complete/word_0/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Sample/word_access_start/word_0/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/array_obj_ref_146_Update/word_access_complete/word_0/ca)
  // 			val_even_143_delayed_5_0 := val_even $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 71
  // val_even
  W_val_even_143_delayed_5_0_148_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_150_Sample/req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_150_Update/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_150_Sample/ack branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_150_Update/ack)
  // 			$volatile nval_even := (val_even_143_delayed_5_0 + (a_rc_even * xval_even)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 72
  // (val_even_143_delayed_5_0 + (a_rc_even * xval_even))
  // val_even_143_delayed_5_0
  // (a_rc_even * xval_even)
  // a_rc_even
  // xval_even
  // 			val_odd_155_delayed_5_0 := val_odd $buffering 5 $cut_through // bits of buffering = 160. 
  //  file .Aa/mvp.opt.aa, line 74
  // val_odd
  W_val_odd_155_delayed_5_0_163_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_165_Sample/req branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_165_Update/req) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_165_Sample/ack branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/assign_stmt_165_Update/ack)
  // 			$volatile nval_odd := (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd)) $buffering 1
  //  file .Aa/mvp.opt.aa, line 75
  // (val_odd_155_delayed_5_0 + (a_rc_odd * xval_odd))
  // val_odd_155_delayed_5_0
  // (a_rc_odd * xval_odd)
  // a_rc_odd
  // xval_odd
  // 			nC := (C + 2 ) $buffering 2// bits of buffering = 16. 
  //  file .Aa/mvp.opt.aa, line 77
  // (C + 2 )
  // C
  ADD_u8_u8_181_inst <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/ADD_u8_u8_181_Sample/rr branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/ADD_u8_u8_181_Update/cr) (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/ADD_u8_u8_181_Sample/ra branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/ADD_u8_u8_181_Update/ca)
  // (nC < 32 )
  // nC
  do_while_stmt_108_branch <=> (branch_block_stmt_107/do_while_stmt_108/do_while_stmt_108_loop_body/condition_evaluated) (branch_block_stmt_107/do_while_stmt_108/loop_exit/ack branch_block_stmt_107/do_while_stmt_108/loop_taken/ack)
  // 	result := (nval_even + nval_odd) $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 81
  // (nval_even + nval_odd)
  // nval_even
  // nval_odd
  ADD_u32_u32_191_inst <=> (assign_stmt_192/ADD_u32_u32_191_Sample/rr assign_stmt_192/ADD_u32_u32_191_Update/cr) (assign_stmt_192/ADD_u32_u32_191_Sample/ra assign_stmt_192/ADD_u32_u32_191_Update/ca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/mvp.opt.aa, line 83
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/mvp.opt.aa, line 83
  }
  // end data-path
}
$module [multiplyMatrixVector] 
{
  // pipe-declarations for block %multiplyMatrixVector
  //  file .Aa/mvp.opt.aa, line 90
  // pipe-declarations for block %multiplyMatrixVector%mmloop
  //  file .Aa/mvp.opt.aa, line 95
  // pipe-declarations for block %multiplyMatrixVector%mmloop%
  //  file .Aa/mvp.opt.aa, line 97
  // memory-space 4 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_198] // Branch Block  file .Aa/mvp.opt.aa, line 95
    {
      $P [branch_block_stmt_198__entry__]
      branch_block_stmt_198__entry__ <-| ($entry)
      $P [branch_block_stmt_198__exit__]
      branch_block_stmt_198__exit__ |-> ($exit)
      $P [merge_stmt_199__entry__] 
      $P [merge_stmt_199__exit__] 
      $P [call_stmt_208_to_assign_stmt_228__entry__] 
      $P [call_stmt_208_to_assign_stmt_228__exit__] 
      $P [if_stmt_229__entry__] 
      $P [if_stmt_229__exit__] 
      ::[call_stmt_208_to_assign_stmt_228] 
      {
        // start: 		$call dotP_even (R ) (val_even ) 
        //  file .Aa/mvp.opt.aa, line 101
        $T[call_stmt_208_sample_start_] 
        $T[call_stmt_208_sample_completed_] 
        $T[call_stmt_208_update_start_] 
        $T[call_stmt_208_update_completed_] 
        // Call input argument 0
        // R
        // start: Forward dependencies from R to transition call_stmt_208_sample_start_
        // done: Forward dependencies from R to transition call_stmt_208_sample_start_
        ;;[call_stmt_208_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_208_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_208_sample_start_ &-> (call_stmt_208_Sample)
        call_stmt_208_sample_completed_ <-& (call_stmt_208_Sample)
        call_stmt_208_sample_completed_ &-> ($null)
        call_stmt_208_update_start_ &-> (call_stmt_208_Update)
        call_stmt_208_update_completed_ <-& (call_stmt_208_Update)
        // Call output argument 0
        // (as target) val_even
        // start: WAR dependencies for val_even
        // done: WAR dependencies for val_even
        // end: 		$call dotP_even (R ) (val_even ) 
        // start: 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
        //  file .Aa/mvp.opt.aa, line 102
        $T[call_stmt_213_sample_start_] 
        $T[call_stmt_213_sample_completed_] 
        $T[call_stmt_213_update_start_] 
        $T[call_stmt_213_update_completed_] 
        // Call input argument 0
        // (R + 1 )
        // R
        // start: Forward dependencies from (R + 1 ) to transition call_stmt_213_sample_start_
        // done: Forward dependencies from (R + 1 ) to transition call_stmt_213_sample_start_
        ;;[call_stmt_213_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_213_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_213_sample_start_ &-> (call_stmt_213_Sample)
        call_stmt_213_sample_completed_ <-& (call_stmt_213_Sample)
        call_stmt_213_sample_completed_ &-> ($null)
        call_stmt_213_update_start_ &-> (call_stmt_213_Update)
        call_stmt_213_update_completed_ <-& (call_stmt_213_Update)
        // Call output argument 0
        // (as target) val_odd
        // start: WAR dependencies for val_odd
        // done: WAR dependencies for val_odd
        // end: 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
        // start:  		y[R] := val_even $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 103
        // Source expression
        // val_even
        // Target expression
        // y[R]
        $T[array_obj_ref_215_sample_start_] 
        $T[array_obj_ref_215_sample_completed_] 
        $T[array_obj_ref_215_update_start_] 
        $T[array_obj_ref_215_update_completed_] 
        $T[array_obj_ref_215_word_address_calculated] 
        $T[array_obj_ref_215_root_address_calculated] 
        $T[array_obj_ref_215_offset_calculated] 
        $T[array_obj_ref_215_index_resized_0] 
        $T[array_obj_ref_215_index_scaled_0] 
        $T[array_obj_ref_215_index_computed_0] 
        // R
        // start: Forward dependencies from R to transition array_obj_ref_215_index_computed_0
        // done: Forward dependencies from R to transition array_obj_ref_215_index_computed_0
        ;;[array_obj_ref_215_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_215_index_computed_0 &-> (array_obj_ref_215_index_resize_0)
        array_obj_ref_215_index_resized_0 <-& (array_obj_ref_215_index_resize_0)
        ;;[array_obj_ref_215_index_scale_0] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_215_index_resized_0 &-> (array_obj_ref_215_index_scale_0)
        array_obj_ref_215_index_scaled_0 <-& (array_obj_ref_215_index_scale_0)
        ;;[array_obj_ref_215_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_215_index_scaled_0 &-> (array_obj_ref_215_final_index_sum_regn)
        array_obj_ref_215_offset_calculated <-& (array_obj_ref_215_final_index_sum_regn)
        ;;[array_obj_ref_215_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_215_offset_calculated &-> (array_obj_ref_215_base_plus_offset)
        array_obj_ref_215_root_address_calculated <-& (array_obj_ref_215_base_plus_offset)
        ;;[array_obj_ref_215_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_215_root_address_calculated &-> (array_obj_ref_215_word_addrgen)
        array_obj_ref_215_word_address_calculated <-& (array_obj_ref_215_word_addrgen)
        ;;[array_obj_ref_215_Sample] 
        {
          ;;[array_obj_ref_215_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_215_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_215_sample_start_ <-& (array_obj_ref_215_word_address_calculated)
        array_obj_ref_215_sample_start_ &-> (array_obj_ref_215_Sample)
        array_obj_ref_215_sample_completed_ <-& (array_obj_ref_215_Sample)
        array_obj_ref_215_sample_completed_ &-> ($null)
        array_obj_ref_215_update_start_ &-> (array_obj_ref_215_Update)
        array_obj_ref_215_update_completed_ <-& (array_obj_ref_215_Update)
        // start: Forward dependencies from val_even to transition array_obj_ref_215_sample_start_
        array_obj_ref_215_sample_start_ <-& (call_stmt_208_update_completed_)
        // done: Forward dependencies from val_even to transition array_obj_ref_215_sample_start_
        // end:  		y[R] := val_even $buffering 1// bits of buffering = 32. 
        // start:  		y[(R + 1 )] := val_odd $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 104
        // Source expression
        // val_odd
        // Target expression
        // y[(R + 1 )]
        $T[array_obj_ref_221_sample_start_] 
        $T[array_obj_ref_221_sample_completed_] 
        $T[array_obj_ref_221_update_start_] 
        $T[array_obj_ref_221_update_completed_] 
        $T[array_obj_ref_221_word_address_calculated] 
        $T[array_obj_ref_221_root_address_calculated] 
        $T[array_obj_ref_221_offset_calculated] 
        $T[array_obj_ref_221_index_resized_0] 
        $T[array_obj_ref_221_index_scaled_0] 
        $T[array_obj_ref_221_index_computed_0] 
        // (R + 1 )
        // R
        // start: Forward dependencies from (R + 1 ) to transition array_obj_ref_221_index_computed_0
        // done: Forward dependencies from (R + 1 ) to transition array_obj_ref_221_index_computed_0
        ;;[array_obj_ref_221_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_221_index_computed_0 &-> (array_obj_ref_221_index_resize_0)
        array_obj_ref_221_index_resized_0 <-& (array_obj_ref_221_index_resize_0)
        ;;[array_obj_ref_221_index_scale_0] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_221_index_resized_0 &-> (array_obj_ref_221_index_scale_0)
        array_obj_ref_221_index_scaled_0 <-& (array_obj_ref_221_index_scale_0)
        ;;[array_obj_ref_221_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_221_index_scaled_0 &-> (array_obj_ref_221_final_index_sum_regn)
        array_obj_ref_221_offset_calculated <-& (array_obj_ref_221_final_index_sum_regn)
        ;;[array_obj_ref_221_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_221_offset_calculated &-> (array_obj_ref_221_base_plus_offset)
        array_obj_ref_221_root_address_calculated <-& (array_obj_ref_221_base_plus_offset)
        ;;[array_obj_ref_221_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_221_root_address_calculated &-> (array_obj_ref_221_word_addrgen)
        array_obj_ref_221_word_address_calculated <-& (array_obj_ref_221_word_addrgen)
        ;;[array_obj_ref_221_Sample] 
        {
          ;;[array_obj_ref_221_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_221_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_221_sample_start_ <-& (array_obj_ref_221_word_address_calculated)
        array_obj_ref_221_sample_start_ &-> (array_obj_ref_221_Sample)
        array_obj_ref_221_sample_completed_ <-& (array_obj_ref_221_Sample)
        array_obj_ref_221_sample_completed_ &-> ($null)
        array_obj_ref_221_update_start_ &-> (array_obj_ref_221_Update)
        array_obj_ref_221_update_completed_ <-& (array_obj_ref_221_Update)
        // start: Forward dependencies from val_odd to transition array_obj_ref_221_sample_start_
        array_obj_ref_221_sample_start_ <-& (call_stmt_213_update_completed_)
        // done: Forward dependencies from val_odd to transition array_obj_ref_221_sample_start_
        // end:  		y[(R + 1 )] := val_odd $buffering 1// bits of buffering = 32. 
        // start:  		nR := (R + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 105
        // Source expression
        // (R + 1 )
        $T[ADD_u8_u8_227_sample_start_] 
        $T[ADD_u8_u8_227_sample_completed_] 
        $T[ADD_u8_u8_227_update_start_] 
        $T[ADD_u8_u8_227_update_completed_] 
        // R
        // start: Forward dependencies from R to transition ADD_u8_u8_227_sample_start_
        // done: Forward dependencies from R to transition ADD_u8_u8_227_sample_start_
        ;;[ADD_u8_u8_227_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_227_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_227_sample_start_ &-> (ADD_u8_u8_227_Sample)
        ADD_u8_u8_227_sample_completed_ <-& (ADD_u8_u8_227_Sample)
        ADD_u8_u8_227_sample_completed_ &-> ($null)
        ADD_u8_u8_227_update_start_ &-> (ADD_u8_u8_227_Update)
        ADD_u8_u8_227_update_completed_ <-& (ADD_u8_u8_227_Update)
        // Target expression
        // (as target) nR
        // start: WAR dependencies for nR
        // done: WAR dependencies for nR
        // end:  		nR := (R + 1 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_4
        //  array_obj_ref_215 store
        //  array_obj_ref_221 store
        $T [array_obj_ref_215_array_obj_ref_221_delay] $delay
        // array_obj_ref_215(store) -> array_obj_ref_221(store)
        array_obj_ref_221_sample_start_ <-& (array_obj_ref_215_array_obj_ref_221_delay)
        array_obj_ref_215_array_obj_ref_221_delay <-& (array_obj_ref_215_sample_completed_)
        // memory-space  memory_space_3
        //  call_stmt_208 load
        //  call_stmt_213 load
        // memory-space  memory_space_2
        //  call_stmt_208 load
        //  call_stmt_213 load
        // memory-space  memory_space_1
        //  call_stmt_208 load
        //  call_stmt_213 load
        // memory-space  memory_space_0
        //  call_stmt_208 load
        //  call_stmt_213 load
      }
      call_stmt_208_to_assign_stmt_228__entry__ |-> (call_stmt_208_to_assign_stmt_228)
      call_stmt_208_to_assign_stmt_228__exit__ <-| (call_stmt_208_to_assign_stmt_228)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_229_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_229__entry__ |-> (if_stmt_229_dead_link)
      if_stmt_229__exit__ <-| (if_stmt_229_dead_link)
      ;;[if_stmt_229_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nR < 32 )
        ;;[ULT_u8_u1_232] 
        {
          // binary expression 
          ||[ULT_u8_u1_232_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_229__entry__ |-> (if_stmt_229_eval_test)
      $P [ULT_u8_u1_232_place]
      ULT_u8_u1_232_place <-| (if_stmt_229_eval_test)
      ;;[if_stmt_229_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_229_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_232_place |-> (if_stmt_229_if_link if_stmt_229_else_link)
      $P [loopback]
      loopback <-| (if_stmt_229_if_link)
      if_stmt_229__exit__ <-| (if_stmt_229_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 97
      ;;[merge_stmt_199_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_199__entry__ |-> (merge_stmt_199_dead_link)
      merge_stmt_199__exit__ <-| (merge_stmt_199_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 97  --------------------------
      ||[merge_stmt_199__entry___PhiReq] 
      {
        ;;[phi_stmt_200] 
        {
          ||[phi_stmt_200_sources] 
          {
            // sources for 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_203_konst_delay_trans] $delay
          }
          $T [phi_stmt_200_req] 
        }
      }
      merge_stmt_199__entry__ |-> (merge_stmt_199__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_200] 
        {
          ||[phi_stmt_200_sources] 
          {
            // sources for 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_200_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_199_PhiReqMerge] 
      merge_stmt_199_PhiReqMerge <-| ( merge_stmt_199__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_199_PhiAck] 
      {
        $T [phi_stmt_200_ack] 
      }
      merge_stmt_199_PhiReqMerge |-> (merge_stmt_199_PhiAck)
      merge_stmt_199__exit__  <-| (merge_stmt_199_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 97  --------------------------
      merge_stmt_199__entry__ <-| (branch_block_stmt_198__entry__)
      call_stmt_208_to_assign_stmt_228__entry__ <-| (merge_stmt_199__exit__)
      if_stmt_229__entry__ <-| (call_stmt_208_to_assign_stmt_228__exit__)
      if_stmt_229__exit__ |-> (branch_block_stmt_198__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %multiplyMatrixVector%mmloop%
    //  file .Aa/mvp.opt.aa, line 97
    // constant-object-declarations for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 95
    // constant-object-declarations for block %multiplyMatrixVector
    //  file .Aa/mvp.opt.aa, line 90
    // constant-declarations for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 95
    // constant-declarations for block %multiplyMatrixVector%mmloop%
    //  file .Aa/mvp.opt.aa, line 97
    // constant-declarations for phi:  			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 98
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_203_wire_constant] : $int<8> := _b00000000// 0
    // 		$call dotP_even (R ) (val_even ) 
    //  file .Aa/mvp.opt.aa, line 101
    // 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
    //  file .Aa/mvp.opt.aa, line 102
    // 1 
    $constant $W[konst_210_wire_constant] : $int<8> := _b00000001// 1
    // y[R]
    $constant $W[array_obj_ref_215_resized_base_address] : $int<5> := _b00000// 0
    $constant $W[array_obj_ref_215_offset_scale_factor_0] : $int<5> := _b00001// 1
    $constant $W[array_obj_ref_215_word_offset_0] : $int<5> := _b00000// 0
    // y[(R + 1 )]
    // 1 
    $constant $W[konst_219_wire_constant] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_221_resized_base_address] : $int<5> := _b00000// 0
    $constant $W[array_obj_ref_221_offset_scale_factor_0] : $int<5> := _b00001// 1
    $constant $W[array_obj_ref_221_word_offset_0] : $int<5> := _b00000// 0
    // 1 
    $constant $W[konst_226_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_231_wire_constant] : $int<8> := _b00100000// 32
    // block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 95
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 97
    // 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 98
    $W[nR_228_204_buffered] : $int<8>
    // R
    $W[R_200] : $int<8>
    // 		$call dotP_even (R ) (val_even ) 
    //  file .Aa/mvp.opt.aa, line 101
    // val_even
    $W[val_even_208] : $int<32>
    // 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
    //  file .Aa/mvp.opt.aa, line 102
    // (R + 1 )
    $intermediate $W[ADD_u8_u8_211_wire] : $int<8>
    // val_odd
    $W[val_odd_213] : $int<32>
    // 		y[R] := val_even $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 103
    // y[R]
    $intermediate $W[R_R_214_resized] : $int<5>
    $intermediate $W[R_R_214_scaled] : $int<5>
    $intermediate $W[array_obj_ref_215_final_offset] : $int<5>
    $intermediate $W[array_obj_ref_215_root_address] : $int<5>
    $W[array_obj_ref_215_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_215_data_0] : $int<32>
    // 		y[(R + 1 )] := val_odd $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 104
    // y[(R + 1 )]
    // (R + 1 )
    $intermediate $W[ADD_u8_u8_220_wire] : $int<8>
    $intermediate $W[ADD_u8_u8_220_resized] : $int<5>
    $intermediate $W[ADD_u8_u8_220_scaled] : $int<5>
    $intermediate $W[array_obj_ref_221_final_offset] : $int<5>
    $intermediate $W[array_obj_ref_221_root_address] : $int<5>
    $W[array_obj_ref_221_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_221_data_0] : $int<32>
    // 		nR := (R + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 105
    // nR
    $W[nR_228] : $int<8>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nR < 32 )
    $intermediate $W[ULT_u8_u1_232_wire] : $int<1>
    // datapath-instances for block %multiplyMatrixVector%mmloop
    //  file .Aa/mvp.opt.aa, line 95
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 97
    // 			$phi R := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nR $on   loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 98
    # := [nR_228_204_buf] (nR_228) (nR_228_204_buffered)    
    $phi [phi_stmt_200] (type_cast_203_wire_constant nR_228_204_buffered) ( R_200 ) 
    // 		$call dotP_even (R ) (val_even ) 
    //  file .Aa/mvp.opt.aa, line 101
    $call [call_stmt_208_call] $module dotP_even(R_200) (val_even_208)  
    $delay call_stmt_208_call 4
    $buffering  $in call_stmt_208_call R_200 1
    $buffering  $out call_stmt_208_call val_even_208 1
    // 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
    //  file .Aa/mvp.opt.aa, line 102
    // (R + 1 )
    +[ADD_u8_u8_211_inst] (R_200 konst_210_wire_constant) (ADD_u8_u8_211_wire)   $flowthrough 
    $delay ADD_u8_u8_211_inst 0
    $call [call_stmt_213_call] $module dotP_odd(ADD_u8_u8_211_wire) (val_odd_213)  
    $delay call_stmt_213_call 4
    $buffering  $in call_stmt_213_call ADD_u8_u8_211_wire 1
    $buffering  $out call_stmt_213_call val_odd_213 1
    // 		y[R] := val_even $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 103
    // y[R]
    &/ [array_obj_ref_215_index_0_resize] (R_200) (R_R_214_resized) 
    $flowthrough 
    &/ [array_obj_ref_215_index_0_rename] (R_R_214_resized) (R_R_214_scaled) 
    $flowthrough 
    &/ [array_obj_ref_215_index_offset] (R_R_214_scaled) (array_obj_ref_215_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_215_root_address_inst] (array_obj_ref_215_final_offset) (array_obj_ref_215_root_address) 
    $flowthrough 
    &/ [array_obj_ref_215_addr_0] (array_obj_ref_215_root_address) (array_obj_ref_215_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_215_store_0] $to memory_space_4 (array_obj_ref_215_word_address_0 array_obj_ref_215_data_0) 
    $delay array_obj_ref_215_store_0 4
    &/ [array_obj_ref_215_gather_scatter] (val_even_208) (array_obj_ref_215_data_0) 
    $flowthrough 
    // 		y[(R + 1 )] := val_odd $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 104
    // y[(R + 1 )]
    // (R + 1 )
    +[ADD_u8_u8_220_inst] (R_200 konst_219_wire_constant) (ADD_u8_u8_220_wire)   $flowthrough 
    $delay ADD_u8_u8_220_inst 0
    &/ [array_obj_ref_221_index_0_resize] (ADD_u8_u8_220_wire) (ADD_u8_u8_220_resized) 
    $flowthrough 
    &/ [array_obj_ref_221_index_0_rename] (ADD_u8_u8_220_resized) (ADD_u8_u8_220_scaled) 
    $flowthrough 
    &/ [array_obj_ref_221_index_offset] (ADD_u8_u8_220_scaled) (array_obj_ref_221_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_221_root_address_inst] (array_obj_ref_221_final_offset) (array_obj_ref_221_root_address) 
    $flowthrough 
    &/ [array_obj_ref_221_addr_0] (array_obj_ref_221_root_address) (array_obj_ref_221_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_221_store_0] $to memory_space_4 (array_obj_ref_221_word_address_0 array_obj_ref_221_data_0) 
    $delay array_obj_ref_221_store_0 4
    &/ [array_obj_ref_221_gather_scatter] (val_odd_213) (array_obj_ref_221_data_0) 
    $flowthrough 
    // 		nR := (R + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 105
    // (R + 1 )
    +[ADD_u8_u8_227_inst] (R_200 konst_226_wire_constant) (nR_228)   
    $buffering  $out ADD_u8_u8_227_inst nR_228 1
    $delay ADD_u8_u8_227_inst 1
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nR < 32 )
    <[ULT_u8_u1_232_inst] (nR_228 konst_231_wire_constant) (ULT_u8_u1_232_wire)   $flowthrough 
    $delay ULT_u8_u1_232_inst 0
    ==0? [if_stmt_229_branch] (ULT_u8_u1_232_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 97
  nR_228_204_buf <=> (branch_block_stmt_198/loopback_PhiReq/phi_stmt_200/phi_stmt_200_sources/Interlock/Sample/req branch_block_stmt_198/loopback_PhiReq/phi_stmt_200/phi_stmt_200_sources/Interlock/Update/req) (branch_block_stmt_198/loopback_PhiReq/phi_stmt_200/phi_stmt_200_sources/Interlock/Sample/ack branch_block_stmt_198/loopback_PhiReq/phi_stmt_200/phi_stmt_200_sources/Interlock/Update/ack)
  phi_stmt_200 <=> (branch_block_stmt_198/merge_stmt_199__entry___PhiReq/phi_stmt_200/phi_stmt_200_req branch_block_stmt_198/loopback_PhiReq/phi_stmt_200/phi_stmt_200_req) (branch_block_stmt_198/merge_stmt_199_PhiAck/phi_stmt_200_ack)
  // 		$call dotP_even (R ) (val_even ) 
  //  file .Aa/mvp.opt.aa, line 101
  // R
  call_stmt_208_call <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_208_Sample/crr branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_208_Update/ccr) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_208_Sample/cra branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_208_Update/cca)
  // 		$call dotP_odd ((R + 1 ) ) (val_odd ) 
  //  file .Aa/mvp.opt.aa, line 102
  // (R + 1 )
  // R
  call_stmt_213_call <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_213_Sample/crr branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_213_Update/ccr) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_213_Sample/cra branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/call_stmt_213_Update/cca)
  // 		y[R] := val_even $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 103
  // val_even
  // R
  array_obj_ref_215_index_0_resize <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_index_resize_0/index_resize_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_index_resize_0/index_resize_ack)
  array_obj_ref_215_index_0_rename <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_index_scale_0/scale_rename_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_index_scale_0/scale_rename_ack)
  array_obj_ref_215_index_offset <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_final_index_sum_regn/req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_final_index_sum_regn/ack)
  array_obj_ref_215_root_address_inst <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_base_plus_offset/sum_rename_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_base_plus_offset/sum_rename_ack)
  array_obj_ref_215_addr_0 <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_word_addrgen/root_register_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_word_addrgen/root_register_ack)
  array_obj_ref_215_gather_scatter <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Sample/array_obj_ref_215_Split/split_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Sample/array_obj_ref_215_Split/split_ack)
  array_obj_ref_215_store_0 <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Sample/word_access_start/word_0/rr branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Update/word_access_complete/word_0/cr) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Sample/word_access_start/word_0/ra branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_215_Update/word_access_complete/word_0/ca)
  // 		y[(R + 1 )] := val_odd $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 104
  // val_odd
  // (R + 1 )
  // R
  array_obj_ref_221_index_0_resize <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_index_resize_0/index_resize_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_index_resize_0/index_resize_ack)
  array_obj_ref_221_index_0_rename <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_index_scale_0/scale_rename_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_index_scale_0/scale_rename_ack)
  array_obj_ref_221_index_offset <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_final_index_sum_regn/req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_final_index_sum_regn/ack)
  array_obj_ref_221_root_address_inst <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_base_plus_offset/sum_rename_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_base_plus_offset/sum_rename_ack)
  array_obj_ref_221_addr_0 <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_word_addrgen/root_register_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_word_addrgen/root_register_ack)
  array_obj_ref_221_gather_scatter <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Sample/array_obj_ref_221_Split/split_req) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Sample/array_obj_ref_221_Split/split_ack)
  array_obj_ref_221_store_0 <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Sample/word_access_start/word_0/rr branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Update/word_access_complete/word_0/cr) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Sample/word_access_start/word_0/ra branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/array_obj_ref_221_Update/word_access_complete/word_0/ca)
  // 		nR := (R + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 105
  // (R + 1 )
  // R
  ADD_u8_u8_227_inst <=> (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/ADD_u8_u8_227_Sample/rr branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/ADD_u8_u8_227_Update/cr) (branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/ADD_u8_u8_227_Sample/ra branch_block_stmt_198/call_stmt_208_to_assign_stmt_228/ADD_u8_u8_227_Update/ca)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nR < 32 )
  if_stmt_229_branch <=> (branch_block_stmt_198/if_stmt_229_eval_test/branch_req) (branch_block_stmt_198/if_stmt_229_else_link/else_choice_transition branch_block_stmt_198/if_stmt_229_if_link/if_choice_transition)
}
$module [readMatrix] 
{
  // pipe-declarations for block %readMatrix
  //  file .Aa/mvp.opt.aa, line 111
  // pipe-declarations for block %readMatrix%mRead
  //  file .Aa/mvp.opt.aa, line 116
  // pipe-declarations for block %readMatrix%mRead%
  //  file .Aa/mvp.opt.aa, line 118
  // pipe-declarations for block %readMatrix%mRead%
  //  file .Aa/mvp.opt.aa, line 123
  // memory-space 1 is written into.
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_238] // Branch Block  file .Aa/mvp.opt.aa, line 116
    {
      $P [branch_block_stmt_238__entry__]
      branch_block_stmt_238__entry__ <-| ($entry)
      $P [branch_block_stmt_238__exit__]
      branch_block_stmt_238__exit__ |-> ($exit)
      $P [merge_stmt_239__entry__] 
      $P [merge_stmt_239__exit__] 
      $P [assign_stmt_250__entry__] 
      $P [assign_stmt_250__exit__] 
      $P [merge_stmt_251__entry__] 
      $P [merge_stmt_251__exit__] 
      $P [assign_stmt_262_to_assign_stmt_292__entry__] 
      $P [assign_stmt_262_to_assign_stmt_292__exit__] 
      $P [if_stmt_299__entry__] 
      $P [if_stmt_299__exit__] 
      $P [if_stmt_305__entry__] 
      $P [if_stmt_305__exit__] 
      ::[assign_stmt_250] 
      {
        // start:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 122
        // Source expression
        // (I + 1 )
        $T[ADD_u8_u8_249_sample_start_] 
        $T[ADD_u8_u8_249_sample_completed_] 
        $T[ADD_u8_u8_249_update_start_] 
        $T[ADD_u8_u8_249_update_completed_] 
        // I
        // start: Forward dependencies from I to transition ADD_u8_u8_249_sample_start_
        // done: Forward dependencies from I to transition ADD_u8_u8_249_sample_start_
        ;;[ADD_u8_u8_249_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_249_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_249_sample_start_ &-> (ADD_u8_u8_249_Sample)
        ADD_u8_u8_249_sample_completed_ <-& (ADD_u8_u8_249_Sample)
        ADD_u8_u8_249_sample_completed_ &-> ($null)
        ADD_u8_u8_249_update_start_ &-> (ADD_u8_u8_249_Update)
        ADD_u8_u8_249_update_completed_ <-& (ADD_u8_u8_249_Update)
        // Target expression
        // (as target) nI
        // start: WAR dependencies for nI
        // done: WAR dependencies for nI
        // end:  		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
        // load-store dependencies..
      }
      assign_stmt_250__entry__ |-> (assign_stmt_250)
      assign_stmt_250__exit__ <-| (assign_stmt_250)
      ::[assign_stmt_262_to_assign_stmt_292] 
      {
        // start:  		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
        //  file .Aa/mvp.opt.aa, line 127
        // Source expression
        // (J + 1 )
        $T[ADD_u8_u8_261_sample_start_] 
        $T[ADD_u8_u8_261_sample_completed_] 
        $T[ADD_u8_u8_261_update_start_] 
        $T[ADD_u8_u8_261_update_completed_] 
        // J
        // start: Forward dependencies from J to transition ADD_u8_u8_261_sample_start_
        // done: Forward dependencies from J to transition ADD_u8_u8_261_sample_start_
        ;;[ADD_u8_u8_261_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_261_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_261_sample_start_ &-> (ADD_u8_u8_261_Sample)
        ADD_u8_u8_261_sample_completed_ <-& (ADD_u8_u8_261_Sample)
        ADD_u8_u8_261_sample_completed_ &-> ($null)
        ADD_u8_u8_261_update_start_ &-> (ADD_u8_u8_261_Update)
        ADD_u8_u8_261_update_completed_ <-& (ADD_u8_u8_261_Update)
        // Target expression
        // (as target) nJ
        // start: WAR dependencies for nJ
        // done: WAR dependencies for nJ
        // end:  		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
        // start: WAR dependencies for odd_idx
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for odd_idx
        // start:  		$volatile odd_idx := (J [] 0 ) $buffering 1
        //  file .Aa/mvp.opt.aa, line 128
        // volatile! 
        // Source expression
        // (J [] 0 )
        // J
        // Target expression
        // (as target) odd_idx
        // start: WAR dependencies for odd_idx
        // ignored out-of-scope w_root 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for odd_idx
        // end:  		$volatile odd_idx := (J [] 0 ) $buffering 1
        // start:  		Jr := ( $slice J 7 1 )  $buffering 1// bits of buffering = 7. 
        //  file .Aa/mvp.opt.aa, line 129
        // Source expression
        // ( $slice J 7 1 ) 
        $T[slice_270_sample_start_] 
        $T[slice_270_sample_completed_] 
        $T[slice_270_update_start_] 
        $T[slice_270_update_completed_] 
        // J
        // start: Forward dependencies from J to transition slice_270_sample_start_
        // done: Forward dependencies from J to transition slice_270_sample_start_
        ;;[slice_270_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[slice_270_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        slice_270_sample_start_ &-> (slice_270_Sample)
        slice_270_sample_completed_ <-& (slice_270_Sample)
        slice_270_sample_completed_ &-> ($null)
        slice_270_update_start_ &-> (slice_270_Update)
        slice_270_update_completed_ <-& (slice_270_Update)
        // Target expression
        // (as target) Jr
        // start: WAR dependencies for Jr
        // done: WAR dependencies for Jr
        // end:  		Jr := ( $slice J 7 1 )  $buffering 1// bits of buffering = 7. 
        // start:  		aval := in_data $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 130
        // Source expression
        // in_data
        $T[RPIPE_in_data_273_sample_start_] 
        $T[RPIPE_in_data_273_sample_completed_] 
        $T[RPIPE_in_data_273_update_start_] 
        $T[RPIPE_in_data_273_update_completed_] 
        ;;[RPIPE_in_data_273_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_in_data_273_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_in_data_273_sample_start_ &-> (RPIPE_in_data_273_Sample)
        RPIPE_in_data_273_sample_completed_ <-& (RPIPE_in_data_273_Sample)
        RPIPE_in_data_273_update_start_ <-& (RPIPE_in_data_273_sample_completed_)
        RPIPE_in_data_273_update_start_ &-> (RPIPE_in_data_273_Update)
        RPIPE_in_data_273_update_completed_ <-& (RPIPE_in_data_273_Update)
        // Target expression
        // (as target) aval
        // start: WAR dependencies for aval
        // done: WAR dependencies for aval
        // end:  		aval := in_data $buffering 1// bits of buffering = 32. 
        // start:  		$guard (odd_idx) A_1[I][Jr] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 131
        // Guard expression 
        // odd_idx
        // Source expression
        // aval
        // Target expression
        // A_1[I][Jr]
        $T[array_obj_ref_278_sample_start_] 
        $T[array_obj_ref_278_sample_completed_] 
        $T[array_obj_ref_278_update_start_] 
        $T[array_obj_ref_278_update_completed_] 
        $T[array_obj_ref_278_word_address_calculated] 
        $T[array_obj_ref_278_root_address_calculated] 
        $T[array_obj_ref_278_offset_calculated] 
        $T[array_obj_ref_278_index_resized_0] 
        $T[array_obj_ref_278_index_scaled_0] 
        $T[array_obj_ref_278_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_278_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_278_index_computed_0
        ;;[array_obj_ref_278_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_278_index_computed_0 &-> (array_obj_ref_278_index_resize_0)
        array_obj_ref_278_index_resized_0 <-& (array_obj_ref_278_index_resize_0)
        $T[array_obj_ref_278_index_scale_0_sample_start] 
        $T[array_obj_ref_278_index_scale_0_sample_complete] 
        $T[array_obj_ref_278_index_scale_0_update_start] 
        $T[array_obj_ref_278_index_scale_0_update_complete] 
        ;;[array_obj_ref_278_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_278_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_278_index_resized_0 &-> (array_obj_ref_278_index_scale_0_sample_start)
        array_obj_ref_278_index_scale_0_sample_start &-> (array_obj_ref_278_index_scale_0_Sample)
        array_obj_ref_278_index_scale_0_sample_complete <-& (array_obj_ref_278_index_scale_0_Sample)
        array_obj_ref_278_index_scale_0_update_start &-> (array_obj_ref_278_index_scale_0_Update)
        array_obj_ref_278_index_scale_0_update_complete <-& (array_obj_ref_278_index_scale_0_Update)
        array_obj_ref_278_index_scaled_0 <-& (array_obj_ref_278_index_scale_0_update_complete)
        $T[array_obj_ref_278_index_resized_1] 
        $T[array_obj_ref_278_index_scaled_1] 
        $T[array_obj_ref_278_index_computed_1] 
        // Jr
        // start: Forward dependencies from Jr to transition array_obj_ref_278_index_computed_1
        array_obj_ref_278_index_computed_1 <-& (slice_270_update_completed_)
        // done: Forward dependencies from Jr to transition array_obj_ref_278_index_computed_1
        ;;[array_obj_ref_278_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_278_index_computed_1 &-> (array_obj_ref_278_index_resize_1)
        array_obj_ref_278_index_resized_1 <-& (array_obj_ref_278_index_resize_1)
        ;;[array_obj_ref_278_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_278_index_resized_1 &-> (array_obj_ref_278_index_scale_1)
        array_obj_ref_278_index_scaled_1 <-& (array_obj_ref_278_index_scale_1)
        $T[array_obj_ref_278_partial_sum_1_sample_start] 
        $T[array_obj_ref_278_partial_sum_1_sample_complete] 
        $T[array_obj_ref_278_partial_sum_1_update_start] 
        $T[array_obj_ref_278_partial_sum_1_update_complete] 
        ;;[array_obj_ref_278_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_278_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_278_partial_sum_1_sample_start &-> (array_obj_ref_278_partial_sum_1_Sample)
        array_obj_ref_278_partial_sum_1_sample_complete <-& (array_obj_ref_278_partial_sum_1_Sample)
        array_obj_ref_278_partial_sum_1_update_start &-> (array_obj_ref_278_partial_sum_1_Update)
        array_obj_ref_278_partial_sum_1_update_complete <-& (array_obj_ref_278_partial_sum_1_Update)
        array_obj_ref_278_partial_sum_1_sample_start <-& (array_obj_ref_278_index_scaled_0)
        array_obj_ref_278_partial_sum_1_sample_start <-& (array_obj_ref_278_index_scaled_1)
        array_obj_ref_278_offset_calculated <-& (array_obj_ref_278_partial_sum_1_update_complete)
        ;;[array_obj_ref_278_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_278_partial_sum_1_update_complete &-> (array_obj_ref_278_final_index_sum_regn)
        array_obj_ref_278_offset_calculated <-& (array_obj_ref_278_final_index_sum_regn)
        ;;[array_obj_ref_278_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_278_offset_calculated &-> (array_obj_ref_278_base_plus_offset)
        array_obj_ref_278_root_address_calculated <-& (array_obj_ref_278_base_plus_offset)
        ;;[array_obj_ref_278_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_278_root_address_calculated &-> (array_obj_ref_278_word_addrgen)
        array_obj_ref_278_word_address_calculated <-& (array_obj_ref_278_word_addrgen)
        ;;[array_obj_ref_278_Sample] 
        {
          ;;[array_obj_ref_278_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_278_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_278_sample_start_ <-& (array_obj_ref_278_word_address_calculated)
        array_obj_ref_278_sample_start_ &-> (array_obj_ref_278_Sample)
        array_obj_ref_278_sample_completed_ <-& (array_obj_ref_278_Sample)
        array_obj_ref_278_sample_completed_ &-> ($null)
        array_obj_ref_278_update_start_ &-> (array_obj_ref_278_Update)
        array_obj_ref_278_update_completed_ <-& (array_obj_ref_278_Update)
        // Guard dependency for expression array_obj_ref_278 with guard R_odd_idx_275
        // root phi_stmt_252 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_278_sample_start_
        array_obj_ref_278_sample_start_ <-& (RPIPE_in_data_273_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_278_sample_start_
        // end:  		$guard (odd_idx) A_1[I][Jr] := aval $buffering 1// bits of buffering = 32. 
        // start:  		$guard (~odd_idx) A_0[I][Jr] := aval $buffering 1// bits of buffering = 32. 
        //  file .Aa/mvp.opt.aa, line 133
        // Guard expression 
        // odd_idx
        // Source expression
        // aval
        // Target expression
        // A_0[I][Jr]
        $T[array_obj_ref_290_sample_start_] 
        $T[array_obj_ref_290_sample_completed_] 
        $T[array_obj_ref_290_update_start_] 
        $T[array_obj_ref_290_update_completed_] 
        $T[array_obj_ref_290_word_address_calculated] 
        $T[array_obj_ref_290_root_address_calculated] 
        $T[array_obj_ref_290_offset_calculated] 
        $T[array_obj_ref_290_index_resized_0] 
        $T[array_obj_ref_290_index_scaled_0] 
        $T[array_obj_ref_290_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_290_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_290_index_computed_0
        ;;[array_obj_ref_290_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_290_index_computed_0 &-> (array_obj_ref_290_index_resize_0)
        array_obj_ref_290_index_resized_0 <-& (array_obj_ref_290_index_resize_0)
        $T[array_obj_ref_290_index_scale_0_sample_start] 
        $T[array_obj_ref_290_index_scale_0_sample_complete] 
        $T[array_obj_ref_290_index_scale_0_update_start] 
        $T[array_obj_ref_290_index_scale_0_update_complete] 
        ;;[array_obj_ref_290_index_scale_0_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_290_index_scale_0_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_290_index_resized_0 &-> (array_obj_ref_290_index_scale_0_sample_start)
        array_obj_ref_290_index_scale_0_sample_start &-> (array_obj_ref_290_index_scale_0_Sample)
        array_obj_ref_290_index_scale_0_sample_complete <-& (array_obj_ref_290_index_scale_0_Sample)
        array_obj_ref_290_index_scale_0_update_start &-> (array_obj_ref_290_index_scale_0_Update)
        array_obj_ref_290_index_scale_0_update_complete <-& (array_obj_ref_290_index_scale_0_Update)
        array_obj_ref_290_index_scaled_0 <-& (array_obj_ref_290_index_scale_0_update_complete)
        $T[array_obj_ref_290_index_resized_1] 
        $T[array_obj_ref_290_index_scaled_1] 
        $T[array_obj_ref_290_index_computed_1] 
        // Jr
        // start: Forward dependencies from Jr to transition array_obj_ref_290_index_computed_1
        array_obj_ref_290_index_computed_1 <-& (slice_270_update_completed_)
        // done: Forward dependencies from Jr to transition array_obj_ref_290_index_computed_1
        ;;[array_obj_ref_290_index_resize_1] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_290_index_computed_1 &-> (array_obj_ref_290_index_resize_1)
        array_obj_ref_290_index_resized_1 <-& (array_obj_ref_290_index_resize_1)
        ;;[array_obj_ref_290_index_scale_1] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_290_index_resized_1 &-> (array_obj_ref_290_index_scale_1)
        array_obj_ref_290_index_scaled_1 <-& (array_obj_ref_290_index_scale_1)
        $T[array_obj_ref_290_partial_sum_1_sample_start] 
        $T[array_obj_ref_290_partial_sum_1_sample_complete] 
        $T[array_obj_ref_290_partial_sum_1_update_start] 
        $T[array_obj_ref_290_partial_sum_1_update_complete] 
        ;;[array_obj_ref_290_partial_sum_1_Sample] 
        {
          $T [rr] $T [ra] 
        }
        ;;[array_obj_ref_290_partial_sum_1_Update] 
        {
          $T [cr] $T [ca] 
        }
        array_obj_ref_290_partial_sum_1_sample_start &-> (array_obj_ref_290_partial_sum_1_Sample)
        array_obj_ref_290_partial_sum_1_sample_complete <-& (array_obj_ref_290_partial_sum_1_Sample)
        array_obj_ref_290_partial_sum_1_update_start &-> (array_obj_ref_290_partial_sum_1_Update)
        array_obj_ref_290_partial_sum_1_update_complete <-& (array_obj_ref_290_partial_sum_1_Update)
        array_obj_ref_290_partial_sum_1_sample_start <-& (array_obj_ref_290_index_scaled_0)
        array_obj_ref_290_partial_sum_1_sample_start <-& (array_obj_ref_290_index_scaled_1)
        array_obj_ref_290_offset_calculated <-& (array_obj_ref_290_partial_sum_1_update_complete)
        ;;[array_obj_ref_290_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_290_partial_sum_1_update_complete &-> (array_obj_ref_290_final_index_sum_regn)
        array_obj_ref_290_offset_calculated <-& (array_obj_ref_290_final_index_sum_regn)
        ;;[array_obj_ref_290_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_290_offset_calculated &-> (array_obj_ref_290_base_plus_offset)
        array_obj_ref_290_root_address_calculated <-& (array_obj_ref_290_base_plus_offset)
        ;;[array_obj_ref_290_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_290_root_address_calculated &-> (array_obj_ref_290_word_addrgen)
        array_obj_ref_290_word_address_calculated <-& (array_obj_ref_290_word_addrgen)
        ;;[array_obj_ref_290_Sample] 
        {
          ;;[array_obj_ref_290_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_290_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_290_sample_start_ <-& (array_obj_ref_290_word_address_calculated)
        array_obj_ref_290_sample_start_ &-> (array_obj_ref_290_Sample)
        array_obj_ref_290_sample_completed_ <-& (array_obj_ref_290_Sample)
        array_obj_ref_290_sample_completed_ &-> ($null)
        array_obj_ref_290_update_start_ &-> (array_obj_ref_290_Update)
        array_obj_ref_290_update_completed_ <-& (array_obj_ref_290_Update)
        // Guard dependency for expression array_obj_ref_290 with guard R_odd_idx_287
        // root phi_stmt_252 of guard-expression not in visited elements.
        // start: Forward dependencies from aval to transition array_obj_ref_290_sample_start_
        array_obj_ref_290_sample_start_ <-& (RPIPE_in_data_273_update_completed_)
        // done: Forward dependencies from aval to transition array_obj_ref_290_sample_start_
        // end:  		$guard (~odd_idx) A_0[I][Jr] := aval $buffering 1// bits of buffering = 32. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  array_obj_ref_278 store
        // memory-space  memory_space_0
        //  array_obj_ref_290 store
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
      }
      assign_stmt_262_to_assign_stmt_292__entry__ |-> (assign_stmt_262_to_assign_stmt_292)
      assign_stmt_262_to_assign_stmt_292__exit__ <-| (assign_stmt_262_to_assign_stmt_292)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_299_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_299__entry__ |-> (if_stmt_299_dead_link)
      if_stmt_299__exit__ <-| (if_stmt_299_dead_link)
      ;;[if_stmt_299_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nJ < 32 )
        ;;[ULT_u8_u1_302] 
        {
          // binary expression 
          ||[ULT_u8_u1_302_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_299__entry__ |-> (if_stmt_299_eval_test)
      $P [ULT_u8_u1_302_place]
      ULT_u8_u1_302_place <-| (if_stmt_299_eval_test)
      ;;[if_stmt_299_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_299_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_302_place |-> (if_stmt_299_if_link if_stmt_299_else_link)
      $P [inner_loopback]
      inner_loopback <-| (if_stmt_299_if_link)
      if_stmt_299__exit__ <-| (if_stmt_299_else_link)
      // if-statement  
      //  file .Aa/mvp.opt.aa, line 0
      ;;[if_stmt_305_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_305__entry__ |-> (if_stmt_305_dead_link)
      if_stmt_305__exit__ <-| (if_stmt_305_dead_link)
      ;;[if_stmt_305_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (nI < 32 )
        ;;[ULT_u8_u1_308] 
        {
          // binary expression 
          ||[ULT_u8_u1_308_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_305__entry__ |-> (if_stmt_305_eval_test)
      $P [ULT_u8_u1_308_place]
      ULT_u8_u1_308_place <-| (if_stmt_305_eval_test)
      ;;[if_stmt_305_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_305_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_308_place |-> (if_stmt_305_if_link if_stmt_305_else_link)
      $P [outer_loopback]
      outer_loopback <-| (if_stmt_305_if_link)
      if_stmt_305__exit__ <-| (if_stmt_305_else_link)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 118
      ;;[merge_stmt_239_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_239__entry__ |-> (merge_stmt_239_dead_link)
      merge_stmt_239__exit__ <-| (merge_stmt_239_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 118  --------------------------
      ||[merge_stmt_239__entry___PhiReq] 
      {
        ;;[phi_stmt_240] 
        {
          ||[phi_stmt_240_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_243_konst_delay_trans] $delay
          }
          $T [phi_stmt_240_req] 
        }
      }
      merge_stmt_239__entry__ |-> (merge_stmt_239__entry___PhiReq)
      ||[outer_loopback_PhiReq] 
      {
        ;;[phi_stmt_240] 
        {
          ||[phi_stmt_240_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_240_req] 
        }
      }
      outer_loopback |-> (outer_loopback_PhiReq)
      $P [merge_stmt_239_PhiReqMerge] 
      merge_stmt_239_PhiReqMerge <-| ( merge_stmt_239__entry___PhiReq  outer_loopback_PhiReq )
      ||[merge_stmt_239_PhiAck] 
      {
        $T [phi_stmt_240_ack] 
      }
      merge_stmt_239_PhiReqMerge |-> (merge_stmt_239_PhiAck)
      merge_stmt_239__exit__  <-| (merge_stmt_239_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 118  --------------------------
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 123
      ;;[merge_stmt_251_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_251__entry__ |-> (merge_stmt_251_dead_link)
      merge_stmt_251__exit__ <-| (merge_stmt_251_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 123  --------------------------
      ||[merge_stmt_251__entry___PhiReq] 
      {
        ;;[phi_stmt_252] 
        {
          ||[phi_stmt_252_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_255_konst_delay_trans] $delay
          }
          $T [phi_stmt_252_req] 
        }
      }
      merge_stmt_251__entry__ |-> (merge_stmt_251__entry___PhiReq)
      ||[inner_loopback_PhiReq] 
      {
        ;;[phi_stmt_252] 
        {
          ||[phi_stmt_252_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_252_req] 
        }
      }
      inner_loopback |-> (inner_loopback_PhiReq)
      $P [merge_stmt_251_PhiReqMerge] 
      merge_stmt_251_PhiReqMerge <-| ( merge_stmt_251__entry___PhiReq  inner_loopback_PhiReq )
      ||[merge_stmt_251_PhiAck] 
      {
        $T [phi_stmt_252_ack] 
      }
      merge_stmt_251_PhiReqMerge |-> (merge_stmt_251_PhiAck)
      merge_stmt_251__exit__  <-| (merge_stmt_251_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 123  --------------------------
      merge_stmt_239__entry__ <-| (branch_block_stmt_238__entry__)
      assign_stmt_250__entry__ <-| (merge_stmt_239__exit__)
      merge_stmt_251__entry__ <-| (assign_stmt_250__exit__)
      assign_stmt_262_to_assign_stmt_292__entry__ <-| (merge_stmt_251__exit__)
      if_stmt_299__entry__ <-| (assign_stmt_262_to_assign_stmt_292__exit__)
      if_stmt_305__entry__ <-| (if_stmt_299__exit__)
      if_stmt_305__exit__ |-> (branch_block_stmt_238__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 118
    // constant-object-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 123
    // constant-object-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 116
    // constant-object-declarations for block %readMatrix
    //  file .Aa/mvp.opt.aa, line 111
    // constant-declarations for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 116
    // constant-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 118
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 119
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_243_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_248_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %readMatrix%mRead%
    //  file .Aa/mvp.opt.aa, line 123
    // constant-declarations for phi:  			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 124
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_255_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_260_wire_constant] : $int<8> := _b00000001// 1
    // 0 
    $constant $W[konst_265_wire_constant] : $int<8> := _b00000000// 0
    // A_1[I][Jr]
    $constant $W[array_obj_ref_278_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_278_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_278_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_278_word_offset_0] : $int<9> := _b000000000// 0
    // A_0[I][Jr]
    $constant $W[array_obj_ref_290_resized_base_address] : $int<9> := _b000000000// 0
    $constant $W[array_obj_ref_290_offset_scale_factor_0] : $int<9> := _b000010000// 16
    $constant $W[array_obj_ref_290_offset_scale_factor_1] : $int<9> := _b000000001// 1
    $constant $W[array_obj_ref_290_word_offset_0] : $int<9> := _b000000000// 0
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_301_wire_constant] : $int<8> := _b00100000// 32
    // if-statement  
    //  file .Aa/mvp.opt.aa, line 0
    // 32 
    $constant $W[konst_307_wire_constant] : $int<8> := _b00100000// 32
    // block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 116
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 118
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 119
    $W[nI_250_244_buffered] : $int<8>
    // I
    $W[I_240] : $int<8>
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 122
    // nI
    $W[nI_250] : $int<8>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 123
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 124
    $W[nJ_262_256_buffered] : $int<8>
    // J
    $W[J_252] : $int<8>
    // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 127
    // nJ
    $W[nJ_262] : $int<8>
    // 		$volatile odd_idx := (J [] 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 128
    // odd_idx
    $W[odd_idx_267] : $int<1>
    // 		Jr := ( $slice J 7 1 )  $buffering 1// bits of buffering = 7. 
    //  file .Aa/mvp.opt.aa, line 129
    // Jr
    $W[Jr_271] : $int<7>
    // 		aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 130
    // aval
    $W[aval_274] : $int<32>
    // 		$guard (odd_idx) A_1[I][Jr] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 131
    // A_1[I][Jr]
    $intermediate $W[R_I_276_resized] : $int<9>
    $intermediate $W[R_I_276_scaled] : $int<9>
    $intermediate $W[R_Jr_277_resized] : $int<9>
    $intermediate $W[R_Jr_277_scaled] : $int<9>
    $intermediate $W[array_obj_ref_278_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_278_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_278_root_address] : $int<9>
    $W[array_obj_ref_278_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_278_data_0] : $int<32>
    // 		$guard (~odd_idx) A_0[I][Jr] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 133
    // A_0[I][Jr]
    $intermediate $W[R_I_288_resized] : $int<9>
    $intermediate $W[R_I_288_scaled] : $int<9>
    $intermediate $W[R_Jr_289_resized] : $int<9>
    $intermediate $W[R_Jr_289_scaled] : $int<9>
    $intermediate $W[array_obj_ref_290_index_partial_sum_1] : $int<9>
    $intermediate $W[array_obj_ref_290_final_offset] : $int<9>
    $intermediate $W[array_obj_ref_290_root_address] : $int<9>
    $W[array_obj_ref_290_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_290_data_0] : $int<32>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nJ < 32 )
    $intermediate $W[ULT_u8_u1_302_wire] : $int<1>
    // if statement  
    //  file .Aa/mvp.opt.aa, line 0
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_308_wire] : $int<1>
    // datapath-instances for block %readMatrix%mRead
    //  file .Aa/mvp.opt.aa, line 116
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 118
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   outer_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 119
    # := [nI_250_244_buf] (nI_250) (nI_250_244_buffered)    
    $phi [phi_stmt_240] (type_cast_243_wire_constant nI_250_244_buffered) ( I_240 ) 
    // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 122
    // (I + 1 )
    +[ADD_u8_u8_249_inst] (I_240 konst_248_wire_constant) (nI_250)   
    $buffering  $out ADD_u8_u8_249_inst nI_250 1
    $delay ADD_u8_u8_249_inst 1
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 123
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nJ $on   inner_loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 124
    # := [nJ_262_256_buf] (nJ_262) (nJ_262_256_buffered)    
    $phi [phi_stmt_252] (type_cast_255_wire_constant nJ_262_256_buffered) ( J_252 ) 
    // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
    //  file .Aa/mvp.opt.aa, line 127
    // (J + 1 )
    +[ADD_u8_u8_261_inst] (J_252 konst_260_wire_constant) (nJ_262)   
    $buffering  $out ADD_u8_u8_261_inst nJ_262 1
    $delay ADD_u8_u8_261_inst 1
    // 		$volatile odd_idx := (J [] 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 128
    // (J [] 0 )
    [][BITSEL_u8_u1_266_inst] (J_252 konst_265_wire_constant) (odd_idx_267)   $flowthrough 
    $delay BITSEL_u8_u1_266_inst 0
    // 		Jr := ( $slice J 7 1 )  $buffering 1// bits of buffering = 7. 
    //  file .Aa/mvp.opt.aa, line 129
    // ( $slice J 7 1 ) 
    [:] [slice_270_inst] (J_252 7 1) (Jr_271) 
    $buffering  $out slice_270_inst Jr_271 1
    $delay slice_270_inst 1
    // 		aval := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 130
    // in_data
    $ioport $in [RPIPE_in_data_273_inst] (in_data) (aval_274) 
    $buffering $out RPIPE_in_data_273_inst aval_274 1
    // 		$guard (odd_idx) A_1[I][Jr] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 131
    // A_1[I][Jr]
    &/ [array_obj_ref_278_index_0_resize] (I_240) (R_I_276_resized) $guard ( odd_idx_267 ) 
    $flowthrough 
    *[array_obj_ref_278_index_0_scale] (R_I_276_resized array_obj_ref_278_offset_scale_factor_0) (R_I_276_scaled) $guard ( odd_idx_267 )   
    $delay array_obj_ref_278_index_0_scale 2
    &/ [array_obj_ref_278_index_1_resize] (Jr_271) (R_Jr_277_resized) $guard ( odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_278_index_1_rename] (R_Jr_277_resized) (R_Jr_277_scaled) $guard ( odd_idx_267 ) 
    $flowthrough 
    +[array_obj_ref_278_index_sum_1] (R_Jr_277_scaled R_I_276_scaled) (array_obj_ref_278_index_partial_sum_1) $guard ( odd_idx_267 )   
    $delay array_obj_ref_278_index_sum_1 2
    &/ [array_obj_ref_278_index_offset] (array_obj_ref_278_index_partial_sum_1) (array_obj_ref_278_final_offset) $guard ( odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_278_root_address_inst] (array_obj_ref_278_final_offset) (array_obj_ref_278_root_address) $guard ( odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_278_addr_0] (array_obj_ref_278_root_address) (array_obj_ref_278_word_address_0) $guard ( odd_idx_267 ) 
    $flowthrough 
    $store [array_obj_ref_278_store_0] $to memory_space_1 (array_obj_ref_278_word_address_0 array_obj_ref_278_data_0) $guard ( odd_idx_267 ) 
    $delay array_obj_ref_278_store_0 4
    &/ [array_obj_ref_278_gather_scatter] (aval_274) (array_obj_ref_278_data_0) $guard ( odd_idx_267 ) 
    $flowthrough 
    // 		$guard (~odd_idx) A_0[I][Jr] := aval $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 133
    // A_0[I][Jr]
    &/ [array_obj_ref_290_index_0_resize] (I_240) (R_I_288_resized) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    *[array_obj_ref_290_index_0_scale] (R_I_288_resized array_obj_ref_290_offset_scale_factor_0) (R_I_288_scaled) $guard ( ~ odd_idx_267 )   
    $delay array_obj_ref_290_index_0_scale 2
    &/ [array_obj_ref_290_index_1_resize] (Jr_271) (R_Jr_289_resized) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_290_index_1_rename] (R_Jr_289_resized) (R_Jr_289_scaled) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    +[array_obj_ref_290_index_sum_1] (R_Jr_289_scaled R_I_288_scaled) (array_obj_ref_290_index_partial_sum_1) $guard ( ~ odd_idx_267 )   
    $delay array_obj_ref_290_index_sum_1 2
    &/ [array_obj_ref_290_index_offset] (array_obj_ref_290_index_partial_sum_1) (array_obj_ref_290_final_offset) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_290_root_address_inst] (array_obj_ref_290_final_offset) (array_obj_ref_290_root_address) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    &/ [array_obj_ref_290_addr_0] (array_obj_ref_290_root_address) (array_obj_ref_290_word_address_0) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    $store [array_obj_ref_290_store_0] $to memory_space_0 (array_obj_ref_290_word_address_0 array_obj_ref_290_data_0) $guard ( ~ odd_idx_267 ) 
    $delay array_obj_ref_290_store_0 4
    &/ [array_obj_ref_290_gather_scatter] (aval_274) (array_obj_ref_290_data_0) $guard ( ~ odd_idx_267 ) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nJ < 32 )
    <[ULT_u8_u1_302_inst] (nJ_262 konst_301_wire_constant) (ULT_u8_u1_302_wire)   $flowthrough 
    $delay ULT_u8_u1_302_inst 0
    ==0? [if_stmt_299_branch] (ULT_u8_u1_302_wire)
    // datapath-instances for if  
    //  file .Aa/mvp.opt.aa, line 0
    // (nI < 32 )
    <[ULT_u8_u1_308_inst] (nI_250 konst_307_wire_constant) (ULT_u8_u1_308_wire)   $flowthrough 
    $delay ULT_u8_u1_308_inst 0
    ==0? [if_stmt_305_branch] (ULT_u8_u1_308_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 118
  nI_250_244_buf <=> (branch_block_stmt_238/outer_loopback_PhiReq/phi_stmt_240/phi_stmt_240_sources/Interlock/Sample/req branch_block_stmt_238/outer_loopback_PhiReq/phi_stmt_240/phi_stmt_240_sources/Interlock/Update/req) (branch_block_stmt_238/outer_loopback_PhiReq/phi_stmt_240/phi_stmt_240_sources/Interlock/Sample/ack branch_block_stmt_238/outer_loopback_PhiReq/phi_stmt_240/phi_stmt_240_sources/Interlock/Update/ack)
  phi_stmt_240 <=> (branch_block_stmt_238/merge_stmt_239__entry___PhiReq/phi_stmt_240/phi_stmt_240_req branch_block_stmt_238/outer_loopback_PhiReq/phi_stmt_240/phi_stmt_240_req) (branch_block_stmt_238/merge_stmt_239_PhiAck/phi_stmt_240_ack)
  // 		nI := (I + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 122
  // (I + 1 )
  // I
  ADD_u8_u8_249_inst <=> (branch_block_stmt_238/assign_stmt_250/ADD_u8_u8_249_Sample/rr branch_block_stmt_238/assign_stmt_250/ADD_u8_u8_249_Update/cr) (branch_block_stmt_238/assign_stmt_250/ADD_u8_u8_249_Sample/ra branch_block_stmt_238/assign_stmt_250/ADD_u8_u8_249_Update/ca)
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 123
  nJ_262_256_buf <=> (branch_block_stmt_238/inner_loopback_PhiReq/phi_stmt_252/phi_stmt_252_sources/Interlock/Sample/req branch_block_stmt_238/inner_loopback_PhiReq/phi_stmt_252/phi_stmt_252_sources/Interlock/Update/req) (branch_block_stmt_238/inner_loopback_PhiReq/phi_stmt_252/phi_stmt_252_sources/Interlock/Sample/ack branch_block_stmt_238/inner_loopback_PhiReq/phi_stmt_252/phi_stmt_252_sources/Interlock/Update/ack)
  phi_stmt_252 <=> (branch_block_stmt_238/merge_stmt_251__entry___PhiReq/phi_stmt_252/phi_stmt_252_req branch_block_stmt_238/inner_loopback_PhiReq/phi_stmt_252/phi_stmt_252_req) (branch_block_stmt_238/merge_stmt_251_PhiAck/phi_stmt_252_ack)
  // 		nJ := (J + 1 ) $buffering 1// bits of buffering = 8. 
  //  file .Aa/mvp.opt.aa, line 127
  // (J + 1 )
  // J
  ADD_u8_u8_261_inst <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/ADD_u8_u8_261_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/ADD_u8_u8_261_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/ADD_u8_u8_261_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/ADD_u8_u8_261_Update/ca)
  // 		$volatile odd_idx := (J [] 0 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 128
  // (J [] 0 )
  // J
  // 		Jr := ( $slice J 7 1 )  $buffering 1// bits of buffering = 7. 
  //  file .Aa/mvp.opt.aa, line 129
  // J
  // ( $slice J 7 1 ) 
  slice_270_inst <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/slice_270_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/slice_270_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/slice_270_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/slice_270_Update/ca)
  // 		aval := in_data $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 130
  // in_data
  RPIPE_in_data_273_inst <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/RPIPE_in_data_273_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/RPIPE_in_data_273_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/RPIPE_in_data_273_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/RPIPE_in_data_273_Update/ca)
  // 		$guard (odd_idx) A_1[I][Jr] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 131
  // aval
  // I
  array_obj_ref_278_index_0_resize <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_resize_0/index_resize_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_resize_0/index_resize_ack)
  array_obj_ref_278_index_0_scale <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_0_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_0_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_0_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_0_Update/ca)
  // Jr
  array_obj_ref_278_index_1_resize <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_resize_1/index_resize_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_resize_1/index_resize_ack)
  array_obj_ref_278_index_1_rename <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_1/scale_rename_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_index_scale_1/scale_rename_ack)
  array_obj_ref_278_index_sum_1 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_partial_sum_1_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_partial_sum_1_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_partial_sum_1_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_partial_sum_1_Update/ca)
  array_obj_ref_278_index_offset <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_final_index_sum_regn/req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_final_index_sum_regn/ack)
  array_obj_ref_278_root_address_inst <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_base_plus_offset/sum_rename_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_base_plus_offset/sum_rename_ack)
  array_obj_ref_278_addr_0 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_word_addrgen/root_register_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_word_addrgen/root_register_ack)
  array_obj_ref_278_gather_scatter <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Sample/array_obj_ref_278_Split/split_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Sample/array_obj_ref_278_Split/split_ack)
  array_obj_ref_278_store_0 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Sample/word_access_start/word_0/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Update/word_access_complete/word_0/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Sample/word_access_start/word_0/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_278_Update/word_access_complete/word_0/ca)
  // 		$guard (~odd_idx) A_0[I][Jr] := aval $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 133
  // aval
  // I
  array_obj_ref_290_index_0_resize <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_resize_0/index_resize_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_resize_0/index_resize_ack)
  array_obj_ref_290_index_0_scale <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_0_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_0_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_0_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_0_Update/ca)
  // Jr
  array_obj_ref_290_index_1_resize <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_resize_1/index_resize_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_resize_1/index_resize_ack)
  array_obj_ref_290_index_1_rename <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_1/scale_rename_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_index_scale_1/scale_rename_ack)
  array_obj_ref_290_index_sum_1 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_partial_sum_1_Sample/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_partial_sum_1_Update/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_partial_sum_1_Sample/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_partial_sum_1_Update/ca)
  array_obj_ref_290_index_offset <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_final_index_sum_regn/req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_final_index_sum_regn/ack)
  array_obj_ref_290_root_address_inst <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_base_plus_offset/sum_rename_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_base_plus_offset/sum_rename_ack)
  array_obj_ref_290_addr_0 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_word_addrgen/root_register_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_word_addrgen/root_register_ack)
  array_obj_ref_290_gather_scatter <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Sample/array_obj_ref_290_Split/split_req) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Sample/array_obj_ref_290_Split/split_ack)
  array_obj_ref_290_store_0 <=> (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Sample/word_access_start/word_0/rr branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Update/word_access_complete/word_0/cr) (branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Sample/word_access_start/word_0/ra branch_block_stmt_238/assign_stmt_262_to_assign_stmt_292/array_obj_ref_290_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nJ < 32 )
  if_stmt_299_branch <=> (branch_block_stmt_238/if_stmt_299_eval_test/branch_req) (branch_block_stmt_238/if_stmt_299_else_link/else_choice_transition branch_block_stmt_238/if_stmt_299_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/mvp.opt.aa, line 0
  // (nI < 32 )
  if_stmt_305_branch <=> (branch_block_stmt_238/if_stmt_305_eval_test/branch_req) (branch_block_stmt_238/if_stmt_305_else_link/else_choice_transition branch_block_stmt_238/if_stmt_305_if_link/if_choice_transition)
}
$module [readVector] 
{
  // pipe-declarations for block %readVector
  //  file .Aa/mvp.opt.aa, line 143
  // pipe-declarations for block %readVector%loop
  //  file .Aa/mvp.opt.aa, line 148
  // memory-space 3 is written into.
  // memory-space 2 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_314] // Branch Block  file .Aa/mvp.opt.aa, line 148
    {
      $P [branch_block_stmt_314__entry__]
      branch_block_stmt_314__entry__ <-| ($entry)
      $P [branch_block_stmt_314__exit__]
      branch_block_stmt_314__exit__ |-> ($exit)
      $P [do_while_stmt_315__entry__] 
      $P [do_while_stmt_315__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 150
      <o> [do_while_stmt_315]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_315__entry__] 
        $P[do_while_stmt_315__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_315_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_317
          // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_317_sample_start_] 
          $T[phi_stmt_317_sample_completed_] 
          $T[phi_stmt_317_update_start_] 
          $T[phi_stmt_317_update_completed_] 
          $T[phi_stmt_317_sample_start__ps] 
          phi_stmt_317_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_317_sample_completed__ps] 
          phi_stmt_317_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_317_update_start__ps] 
          phi_stmt_317_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_317_update_completed__ps] 
          phi_stmt_317_update_completed_ <-& (phi_stmt_317_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_317_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_317_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_317_update_start_)
          $T[phi_stmt_317_loopback_trigger] 
          phi_stmt_317_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_317_loopback_sample_req] 
          $T[phi_stmt_317_loopback_sample_req_ps] 
          phi_stmt_317_loopback_sample_req <-& (phi_stmt_317_loopback_sample_req_ps)
          phi_stmt_317_loopback_sample_req &-> ($null)
          $T[phi_stmt_317_entry_trigger] 
          phi_stmt_317_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_317_entry_sample_req] 
          $T[phi_stmt_317_entry_sample_req_ps] 
          phi_stmt_317_entry_sample_req <-& (phi_stmt_317_entry_sample_req_ps)
          phi_stmt_317_entry_sample_req &-> ($null)
          phi_stmt_317_update_start_ o<-& (phi_stmt_317_update_completed_ 0)
          phi_stmt_317_sample_start_ o<-& (phi_stmt_317_sample_completed_ 1)
          $T[phi_stmt_317_merged_reqs] 
          $T[phi_stmt_317_phi_mux_ack] 
          $T[phi_stmt_317_phi_mux_ack_ps] 
          phi_stmt_317_phi_mux_ack_ps <-& (phi_stmt_317_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_317_update_completed_)
          $T[type_cast_320_sample_start__ps] 
          $T[type_cast_320_sample_completed__ps] 
          $T[type_cast_320_update_start__ps] 
          $T[type_cast_320_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_320_sample_start_] 
          $T[type_cast_320_sample_completed_] 
          type_cast_320_sample_completed_ <-& (type_cast_320_sample_start_)
          $T[type_cast_320_update_start_] 
          $T [type_cast_320_update_completed_] $delay 
          type_cast_320_update_completed_ <-& (type_cast_320_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_320_sample_start_ <-& (type_cast_320_sample_start__ps)
          type_cast_320_update_start_ <-& (type_cast_320_update_start__ps)
          // Phi complete dependency.
          type_cast_320_sample_completed__ps <-& (type_cast_320_sample_completed_)
          type_cast_320_update_completed__ps <-& (type_cast_320_update_completed_)
          $T[R_nI_321_sample_start__ps] 
          $T[R_nI_321_sample_completed__ps] 
          $T[R_nI_321_update_start__ps] 
          $T[R_nI_321_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_321_sample_start_] 
          $T[R_nI_321_sample_completed_] 
          $T[R_nI_321_update_start_] 
          $T[R_nI_321_update_completed_] 
          ;;[R_nI_321_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_321_sample_start_ &-> (R_nI_321_Sample)
          R_nI_321_sample_completed_ <-& (R_nI_321_Sample)
          ;;[R_nI_321_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_321_update_start_ &-> (R_nI_321_Update)
          R_nI_321_update_completed_ <-& (R_nI_321_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_321_sample_start_ <-& (R_nI_321_sample_start__ps)
          R_nI_321_update_start_ <-& (R_nI_321_update_start__ps)
          // Phi complete dependency.
          R_nI_321_sample_completed__ps <-& (R_nI_321_sample_completed_)
          R_nI_321_update_completed__ps <-& (R_nI_321_update_completed_)
          $phisequencer [ phi_stmt_317_phi_seq] : 
          phi_stmt_317_entry_trigger type_cast_320_sample_start__ps type_cast_320_sample_completed__ps type_cast_320_update_start__ps type_cast_320_update_completed__ps phi_stmt_317_loopback_trigger R_nI_321_sample_start__ps R_nI_321_sample_completed__ps R_nI_321_update_start__ps R_nI_321_update_completed__ps :
          phi_stmt_317_sample_start__ps phi_stmt_317_sample_completed__ps phi_stmt_317_update_start__ps phi_stmt_317_update_completed__ps :
          phi_stmt_317_entry_sample_req_ps phi_stmt_317_loopback_sample_req_ps : 
          phi_stmt_317_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_317
          // start: WAR dependencies for odd_idx
          // done: WAR dependencies for odd_idx
          // start:  			$volatile odd_idx := (I [] 0 ) $buffering 1
          //  file .Aa/mvp.opt.aa, line 156
          // volatile! 
          // Source expression
          // (I [] 0 )
          // I
          // Target expression
          // (as target) odd_idx
          // start: WAR dependencies for odd_idx
          // done: WAR dependencies for odd_idx
          // end:  			$volatile odd_idx := (I [] 0 ) $buffering 1
          // start: WAR dependencies for I_idx
          // done: WAR dependencies for I_idx
          // start:  			$volatile I_idx := ( $slice I 7 1 )  $buffering 1
          //  file .Aa/mvp.opt.aa, line 157
          // volatile! 
          // Source expression
          // ( $slice I 7 1 ) 
          // I
          // Target expression
          // (as target) I_idx
          // start: WAR dependencies for I_idx
          // done: WAR dependencies for I_idx
          // end:  			$volatile I_idx := ( $slice I 7 1 )  $buffering 1
          // start:  			temp_val := in_data $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 158
          // Source expression
          // in_data
          $T[RPIPE_in_data_333_sample_start_] 
          $T[RPIPE_in_data_333_sample_completed_] 
          $T[RPIPE_in_data_333_update_start_] 
          $T[RPIPE_in_data_333_update_completed_] 
          ;;[RPIPE_in_data_333_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_333_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_333_sample_start_ &-> (RPIPE_in_data_333_Sample)
          RPIPE_in_data_333_sample_completed_ <-& (RPIPE_in_data_333_Sample)
          RPIPE_in_data_333_update_start_ <-& (RPIPE_in_data_333_sample_completed_)
          RPIPE_in_data_333_update_start_ &-> (RPIPE_in_data_333_Update)
          RPIPE_in_data_333_update_completed_ <-& (RPIPE_in_data_333_Update)
          RPIPE_in_data_333_sample_start_ o<-& (RPIPE_in_data_333_update_completed_ 0)
          // Target expression
          // (as target) temp_val
          // start: WAR dependencies for temp_val
          // done: WAR dependencies for temp_val
          // end:  			temp_val := in_data $buffering 1// bits of buffering = 32. 
          // start:  			$guard (odd_idx) x_1[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 159
          // Guard expression 
          // odd_idx
          // Source expression
          // temp_val
          // Target expression
          // x_1[I_idx]
          $T[array_obj_ref_337_sample_start_] 
          $T[array_obj_ref_337_sample_completed_] 
          $T[array_obj_ref_337_update_start_] 
          $T[array_obj_ref_337_update_completed_] 
          $T[array_obj_ref_337_word_address_calculated] 
          $T[array_obj_ref_337_root_address_calculated] 
          $T[array_obj_ref_337_offset_calculated] 
          $T[array_obj_ref_337_index_resized_0] 
          $T[array_obj_ref_337_index_scaled_0] 
          $T[array_obj_ref_337_index_computed_0] 
          // I_idx
          // start: Forward dependencies from I_idx to transition array_obj_ref_337_index_computed_0
          array_obj_ref_337_index_computed_0 <-& (phi_stmt_317_update_completed_)
          // done: Forward dependencies from I_idx to transition array_obj_ref_337_index_computed_0
          ;;[array_obj_ref_337_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_337_index_computed_0 &-> (array_obj_ref_337_index_resize_0)
          array_obj_ref_337_index_resized_0 <-& (array_obj_ref_337_index_resize_0)
          ;;[array_obj_ref_337_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_337_index_resized_0 &-> (array_obj_ref_337_index_scale_0)
          array_obj_ref_337_index_scaled_0 <-& (array_obj_ref_337_index_scale_0)
          ;;[array_obj_ref_337_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_337_index_scaled_0 &-> (array_obj_ref_337_final_index_sum_regn)
          array_obj_ref_337_offset_calculated <-& (array_obj_ref_337_final_index_sum_regn)
          ;;[array_obj_ref_337_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_337_offset_calculated &-> (array_obj_ref_337_base_plus_offset)
          array_obj_ref_337_root_address_calculated <-& (array_obj_ref_337_base_plus_offset)
          ;;[array_obj_ref_337_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_337_root_address_calculated &-> (array_obj_ref_337_word_addrgen)
          array_obj_ref_337_word_address_calculated <-& (array_obj_ref_337_word_addrgen)
          ;;[array_obj_ref_337_Sample] 
          {
            ;;[array_obj_ref_337_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_337_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_337_sample_start_ <-& (array_obj_ref_337_word_address_calculated)
          // reenable-joins
          phi_stmt_317_update_start_ o<-& (array_obj_ref_337_sample_completed_ 0)
          array_obj_ref_337_sample_start_ &-> (array_obj_ref_337_Sample)
          array_obj_ref_337_sample_completed_ <-& (array_obj_ref_337_Sample)
          array_obj_ref_337_sample_completed_ &-> ($null)
          array_obj_ref_337_update_start_ &-> (array_obj_ref_337_Update)
          array_obj_ref_337_update_completed_ <-& (array_obj_ref_337_Update)
          // Guard dependency for expression array_obj_ref_337 with guard R_odd_idx_335
          array_obj_ref_337_sample_start_ <-& (phi_stmt_317_update_completed_)
          // RAW reenables for odd_idx
          phi_stmt_317_update_start_ o<-& (array_obj_ref_337_sample_completed_ 0)
          // self-release: 
          array_obj_ref_337_sample_start_ o<-& (array_obj_ref_337_sample_completed_ 1)
          $null &-> (array_obj_ref_337_update_start_)
          array_obj_ref_337_update_start_ o<-& (array_obj_ref_337_update_completed_ 0)
          // start: Forward dependencies from temp_val to transition array_obj_ref_337_sample_start_
          array_obj_ref_337_sample_start_ <-& (RPIPE_in_data_333_update_completed_)
          // done: Forward dependencies from temp_val to transition array_obj_ref_337_sample_start_
          // RAW reenables for temp_val
          RPIPE_in_data_333_update_start_ o<-& (array_obj_ref_337_sample_completed_ 0)
          // end:  			$guard (odd_idx) x_1[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
          // start:  			$guard (~odd_idx) x_0[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 160
          // Guard expression 
          // odd_idx
          // Source expression
          // temp_val
          // Target expression
          // x_0[I_idx]
          $T[array_obj_ref_342_sample_start_] 
          $T[array_obj_ref_342_sample_completed_] 
          $T[array_obj_ref_342_update_start_] 
          $T[array_obj_ref_342_update_completed_] 
          $T[array_obj_ref_342_word_address_calculated] 
          $T[array_obj_ref_342_root_address_calculated] 
          $T[array_obj_ref_342_offset_calculated] 
          $T[array_obj_ref_342_index_resized_0] 
          $T[array_obj_ref_342_index_scaled_0] 
          $T[array_obj_ref_342_index_computed_0] 
          // I_idx
          // start: Forward dependencies from I_idx to transition array_obj_ref_342_index_computed_0
          array_obj_ref_342_index_computed_0 <-& (phi_stmt_317_update_completed_)
          // done: Forward dependencies from I_idx to transition array_obj_ref_342_index_computed_0
          ;;[array_obj_ref_342_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_342_index_computed_0 &-> (array_obj_ref_342_index_resize_0)
          array_obj_ref_342_index_resized_0 <-& (array_obj_ref_342_index_resize_0)
          ;;[array_obj_ref_342_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_342_index_resized_0 &-> (array_obj_ref_342_index_scale_0)
          array_obj_ref_342_index_scaled_0 <-& (array_obj_ref_342_index_scale_0)
          ;;[array_obj_ref_342_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_342_index_scaled_0 &-> (array_obj_ref_342_final_index_sum_regn)
          array_obj_ref_342_offset_calculated <-& (array_obj_ref_342_final_index_sum_regn)
          ;;[array_obj_ref_342_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_342_offset_calculated &-> (array_obj_ref_342_base_plus_offset)
          array_obj_ref_342_root_address_calculated <-& (array_obj_ref_342_base_plus_offset)
          ;;[array_obj_ref_342_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_342_root_address_calculated &-> (array_obj_ref_342_word_addrgen)
          array_obj_ref_342_word_address_calculated <-& (array_obj_ref_342_word_addrgen)
          ;;[array_obj_ref_342_Sample] 
          {
            ;;[array_obj_ref_342_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_342_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_342_sample_start_ <-& (array_obj_ref_342_word_address_calculated)
          // reenable-joins
          phi_stmt_317_update_start_ o<-& (array_obj_ref_342_sample_completed_ 0)
          array_obj_ref_342_sample_start_ &-> (array_obj_ref_342_Sample)
          array_obj_ref_342_sample_completed_ <-& (array_obj_ref_342_Sample)
          array_obj_ref_342_sample_completed_ &-> ($null)
          array_obj_ref_342_update_start_ &-> (array_obj_ref_342_Update)
          array_obj_ref_342_update_completed_ <-& (array_obj_ref_342_Update)
          // Guard dependency for expression array_obj_ref_342 with guard R_odd_idx_340
          array_obj_ref_342_sample_start_ <-& (phi_stmt_317_update_completed_)
          // RAW reenables for odd_idx
          phi_stmt_317_update_start_ o<-& (array_obj_ref_342_sample_completed_ 0)
          // self-release: 
          array_obj_ref_342_sample_start_ o<-& (array_obj_ref_342_sample_completed_ 1)
          $null &-> (array_obj_ref_342_update_start_)
          array_obj_ref_342_update_start_ o<-& (array_obj_ref_342_update_completed_ 0)
          // start: Forward dependencies from temp_val to transition array_obj_ref_342_sample_start_
          array_obj_ref_342_sample_start_ <-& (RPIPE_in_data_333_update_completed_)
          // done: Forward dependencies from temp_val to transition array_obj_ref_342_sample_start_
          // RAW reenables for temp_val
          RPIPE_in_data_333_update_start_ o<-& (array_obj_ref_342_sample_completed_ 0)
          // end:  			$guard (~odd_idx) x_0[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file .Aa/mvp.opt.aa, line 161
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // (nI < 32 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_317_update_completed_)
          // done: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_3
          //  array_obj_ref_337 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  array_obj_ref_342 store
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data
          // read-dependencies for pipe in_data
          // write-dependencies for pipe in_data
          // signal write dependencies for in_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_315__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_315_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_315__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_315_loop_body : condition_evaluated
        $bind do_while_stmt_315__entry__  => do_while_stmt_315_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_315_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_315__exit__)
      }
      do_while_stmt_315__entry__ |-> (do_while_stmt_315)
      do_while_stmt_315__exit__ <-| (do_while_stmt_315)
      do_while_stmt_315__entry__ <-| (branch_block_stmt_314__entry__)
      do_while_stmt_315__exit__ |-> (branch_block_stmt_314__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %readVector%loop%
    //  file .Aa/mvp.opt.aa, line 152
    // constant-object-declarations for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 148
    // constant-object-declarations for block %readVector
    //  file .Aa/mvp.opt.aa, line 143
    // constant-declarations for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 148
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 150
    // 32 
    $constant $W[konst_352_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %readVector%loop%
    //  file .Aa/mvp.opt.aa, line 152
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 153
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_320_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_325_wire_constant] : $int<8> := _b00000000// 0
    // x_1[I_idx]
    $constant $W[array_obj_ref_337_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_337_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_337_word_offset_0] : $int<4> := _b0000// 0
    // x_0[I_idx]
    $constant $W[array_obj_ref_342_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_342_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_342_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_347_wire_constant] : $int<8> := _b00000001// 1
    // block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 148
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 150
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_353_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 152
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 153
    $W[nI_349_321_buffered] : $int<8>
    // I
    $W[I_317] : $int<8>
    // 			$volatile odd_idx := (I [] 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 156
    // odd_idx
    $W[odd_idx_327] : $int<1>
    // 			$volatile I_idx := ( $slice I 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 157
    // I_idx
    $W[I_idx_331] : $int<7>
    // 			temp_val := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 158
    // temp_val
    $W[temp_val_334] : $int<32>
    // 			$guard (odd_idx) x_1[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 159
    // x_1[I_idx]
    $intermediate $W[R_I_idx_336_resized] : $int<4>
    $intermediate $W[R_I_idx_336_scaled] : $int<4>
    $intermediate $W[array_obj_ref_337_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_337_root_address] : $int<4>
    $W[array_obj_ref_337_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_337_data_0] : $int<32>
    // 			$guard (~odd_idx) x_0[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 160
    // x_0[I_idx]
    $intermediate $W[R_I_idx_341_resized] : $int<4>
    $intermediate $W[R_I_idx_341_scaled] : $int<4>
    $intermediate $W[array_obj_ref_342_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_342_root_address] : $int<4>
    $W[array_obj_ref_342_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_342_data_0] : $int<32>
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 161
    // nI
    $W[nI_349] : $int<8>
    // datapath-instances for block %readVector%loop
    //  file .Aa/mvp.opt.aa, line 148
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 150
    // (nI < 32 )
    <[ULT_u8_u1_353_inst] (nI_349 konst_352_wire_constant) (ULT_u8_u1_353_wire)   $flowthrough 
    $delay ULT_u8_u1_353_inst 0
    ==0? [do_while_stmt_315_branch] (ULT_u8_u1_353_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 152
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 153
    # := [nI_349_321_buf] (nI_349) (nI_349_321_buffered)     $fullrate
    $buffering $out nI_349_321_buf nI_349_321_buffered  1
    # $phi [phi_stmt_317] (type_cast_320_wire_constant nI_349_321_buffered) ( I_317 ) $fullrate
    // $buffering  $out phi_stmt_317 I_317 2
    // 			$volatile odd_idx := (I [] 0 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 156
    // (I [] 0 )
    [][BITSEL_u8_u1_326_inst] (I_317 konst_325_wire_constant) (odd_idx_327)   $flowthrough 
    $delay BITSEL_u8_u1_326_inst 0
    // 			$volatile I_idx := ( $slice I 7 1 )  $buffering 1
    //  file .Aa/mvp.opt.aa, line 157
    // ( $slice I 7 1 ) 
    [:] [slice_330_inst] (I_317 7 1) (I_idx_331)  $flowthrough
    $delay slice_330_inst 0
    // 			temp_val := in_data $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 158
    // in_data
    $ioport $in [RPIPE_in_data_333_inst] (in_data) (temp_val_334)  $fullrate 
    $buffering $out RPIPE_in_data_333_inst temp_val_334 1
    // 			$guard (odd_idx) x_1[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 159
    // x_1[I_idx]
    &/ [array_obj_ref_337_index_0_resize] (I_idx_331) (R_I_idx_336_resized) $guard ( odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_337_index_0_rename] (R_I_idx_336_resized) (R_I_idx_336_scaled) $guard ( odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_337_index_offset] (R_I_idx_336_scaled) (array_obj_ref_337_final_offset) $guard ( odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_337_root_address_inst] (array_obj_ref_337_final_offset) (array_obj_ref_337_root_address) $guard ( odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_337_addr_0] (array_obj_ref_337_root_address) (array_obj_ref_337_word_address_0) $guard ( odd_idx_327 ) 
    $flowthrough 
    $store [array_obj_ref_337_store_0] $to memory_space_3 (array_obj_ref_337_word_address_0 array_obj_ref_337_data_0) $guard ( odd_idx_327 ) 
    $buffering  $in array_obj_ref_337_store_0 array_obj_ref_337_word_address_0 2
    $buffering  $in array_obj_ref_337_store_0 array_obj_ref_337_data_0 2
    $delay array_obj_ref_337_store_0 4
    &/ [array_obj_ref_337_gather_scatter] (temp_val_334) (array_obj_ref_337_data_0) $guard ( odd_idx_327 ) 
    $flowthrough 
    // 			$guard (~odd_idx) x_0[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 160
    // x_0[I_idx]
    &/ [array_obj_ref_342_index_0_resize] (I_idx_331) (R_I_idx_341_resized) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_342_index_0_rename] (R_I_idx_341_resized) (R_I_idx_341_scaled) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_342_index_offset] (R_I_idx_341_scaled) (array_obj_ref_342_final_offset) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_342_root_address_inst] (array_obj_ref_342_final_offset) (array_obj_ref_342_root_address) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    &/ [array_obj_ref_342_addr_0] (array_obj_ref_342_root_address) (array_obj_ref_342_word_address_0) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    $store [array_obj_ref_342_store_0] $to memory_space_2 (array_obj_ref_342_word_address_0 array_obj_ref_342_data_0) $guard ( ~ odd_idx_327 ) 
    $buffering  $in array_obj_ref_342_store_0 array_obj_ref_342_word_address_0 2
    $buffering  $in array_obj_ref_342_store_0 array_obj_ref_342_data_0 2
    $delay array_obj_ref_342_store_0 4
    &/ [array_obj_ref_342_gather_scatter] (temp_val_334) (array_obj_ref_342_data_0) $guard ( ~ odd_idx_327 ) 
    $flowthrough 
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 161
    // (I + 1 )
    +[ADD_u8_u8_348_inst] (I_317 konst_347_wire_constant) (nI_349)   $flowthrough 
    $delay ADD_u8_u8_348_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_315
  //  file .Aa/mvp.opt.aa, line 150
  phi_stmt_317 <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/phi_stmt_317_entry_sample_req branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/phi_stmt_317_loopback_sample_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/phi_stmt_317_phi_mux_ack)
  nI_349_321_buf <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/R_nI_321_Sample/req branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/R_nI_321_Update/req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/R_nI_321_Sample/ack branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/R_nI_321_Update/ack)
  // 			$volatile odd_idx := (I [] 0 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 156
  // (I [] 0 )
  // I
  // 			$volatile I_idx := ( $slice I 7 1 )  $buffering 1
  //  file .Aa/mvp.opt.aa, line 157
  // I
  // 			temp_val := in_data $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 158
  // in_data
  RPIPE_in_data_333_inst <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/RPIPE_in_data_333_Sample/rr branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/RPIPE_in_data_333_Update/cr) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/RPIPE_in_data_333_Sample/ra branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/RPIPE_in_data_333_Update/ca)
  // 			$guard (odd_idx) x_1[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 159
  // temp_val
  // I_idx
  array_obj_ref_337_index_0_resize <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_index_resize_0/index_resize_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_index_resize_0/index_resize_ack)
  array_obj_ref_337_index_0_rename <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_index_scale_0/scale_rename_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_index_scale_0/scale_rename_ack)
  array_obj_ref_337_index_offset <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_final_index_sum_regn/req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_final_index_sum_regn/ack)
  array_obj_ref_337_root_address_inst <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_base_plus_offset/sum_rename_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_base_plus_offset/sum_rename_ack)
  array_obj_ref_337_addr_0 <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_word_addrgen/root_register_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_word_addrgen/root_register_ack)
  array_obj_ref_337_gather_scatter <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Sample/array_obj_ref_337_Split/split_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Sample/array_obj_ref_337_Split/split_ack)
  array_obj_ref_337_store_0 <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Sample/word_access_start/word_0/rr branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Update/word_access_complete/word_0/cr) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Sample/word_access_start/word_0/ra branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_337_Update/word_access_complete/word_0/ca)
  // 			$guard (~odd_idx) x_0[I_idx] := temp_val $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 160
  // temp_val
  // I_idx
  array_obj_ref_342_index_0_resize <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_index_resize_0/index_resize_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_index_resize_0/index_resize_ack)
  array_obj_ref_342_index_0_rename <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_index_scale_0/scale_rename_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_index_scale_0/scale_rename_ack)
  array_obj_ref_342_index_offset <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_final_index_sum_regn/req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_final_index_sum_regn/ack)
  array_obj_ref_342_root_address_inst <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_base_plus_offset/sum_rename_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_base_plus_offset/sum_rename_ack)
  array_obj_ref_342_addr_0 <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_word_addrgen/root_register_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_word_addrgen/root_register_ack)
  array_obj_ref_342_gather_scatter <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Sample/array_obj_ref_342_Split/split_req) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Sample/array_obj_ref_342_Split/split_ack)
  array_obj_ref_342_store_0 <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Sample/word_access_start/word_0/rr branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Update/word_access_complete/word_0/cr) (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Sample/word_access_start/word_0/ra branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/array_obj_ref_342_Update/word_access_complete/word_0/ca)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 161
  // (I + 1 )
  // I
  // (nI < 32 )
  // nI
  do_while_stmt_315_branch <=> (branch_block_stmt_314/do_while_stmt_315/do_while_stmt_315_loop_body/condition_evaluated) (branch_block_stmt_314/do_while_stmt_315/loop_exit/ack branch_block_stmt_314/do_while_stmt_315/loop_taken/ack)
}
$module [sendVector] 
{
  // pipe-declarations for block %sendVector
  //  file .Aa/mvp.opt.aa, line 165
  // pipe-declarations for block %sendVector%loop
  //  file .Aa/mvp.opt.aa, line 170
  // memory-space 4 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_357] // Branch Block  file .Aa/mvp.opt.aa, line 170
    {
      $P [branch_block_stmt_357__entry__]
      branch_block_stmt_357__entry__ <-| ($entry)
      $P [branch_block_stmt_357__exit__]
      branch_block_stmt_357__exit__ |-> ($exit)
      $P [do_while_stmt_358__entry__] 
      $P [do_while_stmt_358__exit__] 
      // do-while-statement  
      //  file .Aa/mvp.opt.aa, line 172
      <o> [do_while_stmt_358]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_358__entry__] 
        $P[do_while_stmt_358__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_358_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_360
          // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_360_sample_start_] 
          $T[phi_stmt_360_sample_completed_] 
          $T[phi_stmt_360_update_start_] 
          $T[phi_stmt_360_update_completed_] 
          $T[phi_stmt_360_sample_start__ps] 
          phi_stmt_360_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_360_sample_completed__ps] 
          phi_stmt_360_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_360_update_start__ps] 
          phi_stmt_360_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_360_update_completed__ps] 
          phi_stmt_360_update_completed_ <-& (phi_stmt_360_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_360_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_360_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_360_update_start_)
          $T[phi_stmt_360_loopback_trigger] 
          phi_stmt_360_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_360_loopback_sample_req] 
          $T[phi_stmt_360_loopback_sample_req_ps] 
          phi_stmt_360_loopback_sample_req <-& (phi_stmt_360_loopback_sample_req_ps)
          phi_stmt_360_loopback_sample_req &-> ($null)
          $T[phi_stmt_360_entry_trigger] 
          phi_stmt_360_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_360_entry_sample_req] 
          $T[phi_stmt_360_entry_sample_req_ps] 
          phi_stmt_360_entry_sample_req <-& (phi_stmt_360_entry_sample_req_ps)
          phi_stmt_360_entry_sample_req &-> ($null)
          phi_stmt_360_update_start_ o<-& (phi_stmt_360_update_completed_ 0)
          phi_stmt_360_sample_start_ o<-& (phi_stmt_360_sample_completed_ 1)
          $T[phi_stmt_360_merged_reqs] 
          $T[phi_stmt_360_phi_mux_ack] 
          $T[phi_stmt_360_phi_mux_ack_ps] 
          phi_stmt_360_phi_mux_ack_ps <-& (phi_stmt_360_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_360_update_completed_)
          $T[type_cast_363_sample_start__ps] 
          $T[type_cast_363_sample_completed__ps] 
          $T[type_cast_363_update_start__ps] 
          $T[type_cast_363_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_363_sample_start_] 
          $T[type_cast_363_sample_completed_] 
          type_cast_363_sample_completed_ <-& (type_cast_363_sample_start_)
          $T[type_cast_363_update_start_] 
          $T [type_cast_363_update_completed_] $delay 
          type_cast_363_update_completed_ <-& (type_cast_363_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_363_sample_start_ <-& (type_cast_363_sample_start__ps)
          type_cast_363_update_start_ <-& (type_cast_363_update_start__ps)
          // Phi complete dependency.
          type_cast_363_sample_completed__ps <-& (type_cast_363_sample_completed_)
          type_cast_363_update_completed__ps <-& (type_cast_363_update_completed_)
          $T[R_nI_364_sample_start__ps] 
          $T[R_nI_364_sample_completed__ps] 
          $T[R_nI_364_update_start__ps] 
          $T[R_nI_364_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_364_sample_start_] 
          $T[R_nI_364_sample_completed_] 
          $T[R_nI_364_update_start_] 
          $T[R_nI_364_update_completed_] 
          ;;[R_nI_364_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_364_sample_start_ &-> (R_nI_364_Sample)
          R_nI_364_sample_completed_ <-& (R_nI_364_Sample)
          ;;[R_nI_364_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_364_update_start_ &-> (R_nI_364_Update)
          R_nI_364_update_completed_ <-& (R_nI_364_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_364_sample_start_ <-& (R_nI_364_sample_start__ps)
          R_nI_364_update_start_ <-& (R_nI_364_update_start__ps)
          // Phi complete dependency.
          R_nI_364_sample_completed__ps <-& (R_nI_364_sample_completed_)
          R_nI_364_update_completed__ps <-& (R_nI_364_update_completed_)
          $phisequencer [ phi_stmt_360_phi_seq] : 
          phi_stmt_360_entry_trigger type_cast_363_sample_start__ps type_cast_363_sample_completed__ps type_cast_363_update_start__ps type_cast_363_update_completed__ps phi_stmt_360_loopback_trigger R_nI_364_sample_start__ps R_nI_364_sample_completed__ps R_nI_364_update_start__ps R_nI_364_update_completed__ps :
          phi_stmt_360_sample_start__ps phi_stmt_360_sample_completed__ps phi_stmt_360_update_start__ps phi_stmt_360_update_completed__ps :
          phi_stmt_360_entry_sample_req_ps phi_stmt_360_loopback_sample_req_ps : 
          phi_stmt_360_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_360
          // start:  			out_data := y[I] $buffering 1// bits of buffering = 32. 
          //  file .Aa/mvp.opt.aa, line 178
          // Source expression
          // y[I]
          $T[array_obj_ref_368_base_address_calculated] 
          $T[array_obj_ref_368_sample_start_] 
          $T[array_obj_ref_368_sample_completed_] 
          $T[array_obj_ref_368_update_start_] 
          $T[array_obj_ref_368_update_completed_] 
          $T[array_obj_ref_368_word_address_calculated] 
          $T[array_obj_ref_368_root_address_calculated] 
          $T[array_obj_ref_368_offset_calculated] 
          $T[array_obj_ref_368_index_resized_0] 
          $T[array_obj_ref_368_index_scaled_0] 
          $T[array_obj_ref_368_index_computed_0] 
          // I
          // start: Forward dependencies from I to transition array_obj_ref_368_index_computed_0
          array_obj_ref_368_index_computed_0 <-& (phi_stmt_360_update_completed_)
          // done: Forward dependencies from I to transition array_obj_ref_368_index_computed_0
          ;;[array_obj_ref_368_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_368_index_computed_0 &-> (array_obj_ref_368_index_resize_0)
          array_obj_ref_368_index_resized_0 <-& (array_obj_ref_368_index_resize_0)
          ;;[array_obj_ref_368_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_368_index_resized_0 &-> (array_obj_ref_368_index_scale_0)
          array_obj_ref_368_index_scaled_0 <-& (array_obj_ref_368_index_scale_0)
          ;;[array_obj_ref_368_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_368_index_scaled_0 &-> (array_obj_ref_368_final_index_sum_regn)
          array_obj_ref_368_offset_calculated <-& (array_obj_ref_368_final_index_sum_regn)
          ;;[array_obj_ref_368_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_368_offset_calculated &-> (array_obj_ref_368_base_plus_offset)
          array_obj_ref_368_root_address_calculated <-& (array_obj_ref_368_base_plus_offset)
          ;;[array_obj_ref_368_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_368_root_address_calculated &-> (array_obj_ref_368_word_addrgen)
          array_obj_ref_368_word_address_calculated <-& (array_obj_ref_368_word_addrgen)
          ;;[array_obj_ref_368_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_368_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_368_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_368_sample_start_ <-& (array_obj_ref_368_word_address_calculated)
          // reenable-joins
          phi_stmt_360_update_start_ o<-& (array_obj_ref_368_sample_completed_ 0)
          array_obj_ref_368_sample_start_ &-> (array_obj_ref_368_Sample)
          array_obj_ref_368_sample_completed_ <-& (array_obj_ref_368_Sample)
          array_obj_ref_368_sample_completed_ &-> ($null)
          array_obj_ref_368_update_start_ &-> (array_obj_ref_368_Update)
          array_obj_ref_368_update_completed_ <-& (array_obj_ref_368_Update)
          // self-release: 
          array_obj_ref_368_sample_start_ o<-& (array_obj_ref_368_sample_completed_ 1)
          $null &-> (array_obj_ref_368_update_start_)
          array_obj_ref_368_update_start_ o<-& (array_obj_ref_368_update_completed_ 0)
          // Target expression
          // (as target) out_data
          $T[WPIPE_out_data_366_sample_start_] 
          $T[WPIPE_out_data_366_sample_completed_] 
          $T[WPIPE_out_data_366_update_start_] 
          $T[WPIPE_out_data_366_update_completed_] 
          ;;[WPIPE_out_data_366_Sample] 
          {
            // pipe write sample-start out_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_366_Update] 
          {
            // pipe write update (complete) out_data
            $T [req] $T [ack] 
          }
          WPIPE_out_data_366_sample_start_ &-> (WPIPE_out_data_366_Sample)
          WPIPE_out_data_366_sample_completed_ <-& (WPIPE_out_data_366_Sample)
          WPIPE_out_data_366_update_start_ <-& (WPIPE_out_data_366_sample_completed_)
          WPIPE_out_data_366_update_start_ &-> (WPIPE_out_data_366_Update)
          WPIPE_out_data_366_update_completed_ <-& (WPIPE_out_data_366_Update)
          WPIPE_out_data_366_sample_start_ o<-& (WPIPE_out_data_366_update_completed_ 0)
          // start: Forward dependencies from y[I] to transition WPIPE_out_data_366_sample_start_
          WPIPE_out_data_366_sample_start_ <-& (array_obj_ref_368_update_completed_)
          // done: Forward dependencies from y[I] to transition WPIPE_out_data_366_sample_start_
          // RAW reenables for y[I]
          array_obj_ref_368_update_start_ o<-& (WPIPE_out_data_366_sample_completed_ 0)
          // end:  			out_data := y[I] $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file .Aa/mvp.opt.aa, line 179
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // (nI < 32 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_360_update_completed_)
          // done: Forward dependencies from (nI < 32 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_4
          //  array_obj_ref_368 load
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe out_data
          // read-dependencies for pipe out_data
          // write-dependencies for pipe out_data
          // signal write dependencies for out_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_358__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_358_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_358__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_358_loop_body : condition_evaluated
        $bind do_while_stmt_358__entry__  => do_while_stmt_358_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_358_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_358__exit__)
      }
      do_while_stmt_358__entry__ |-> (do_while_stmt_358)
      do_while_stmt_358__exit__ <-| (do_while_stmt_358)
      do_while_stmt_358__entry__ <-| (branch_block_stmt_357__entry__)
      do_while_stmt_358__exit__ |-> (branch_block_stmt_357__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sendVector%loop%
    //  file .Aa/mvp.opt.aa, line 174
    // constant-object-declarations for block %sendVector%loop
    //  file .Aa/mvp.opt.aa, line 170
    // constant-object-declarations for block %sendVector
    //  file .Aa/mvp.opt.aa, line 165
    // constant-declarations for block %sendVector%loop
    //  file .Aa/mvp.opt.aa, line 170
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 172
    // 32 
    $constant $W[konst_377_wire_constant] : $int<8> := _b00100000// 32
    // constant-declarations for block %sendVector%loop%
    //  file .Aa/mvp.opt.aa, line 174
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 175
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_363_wire_constant] : $int<8> := _b00000000// 0
    // y[I]
    $constant $W[array_obj_ref_368_resized_base_address] : $int<5> := _b00000// 0
    $constant $W[array_obj_ref_368_offset_scale_factor_0] : $int<5> := _b00001// 1
    $constant $W[array_obj_ref_368_word_offset_0] : $int<5> := _b00000// 0
    // 1 
    $constant $W[konst_372_wire_constant] : $int<8> := _b00000001// 1
    // block %sendVector%loop
    //  file .Aa/mvp.opt.aa, line 170
    // do-while statement  
    //  file .Aa/mvp.opt.aa, line 172
    // (nI < 32 )
    $intermediate $W[ULT_u8_u1_378_wire] : $int<1>
    // merge-statement  
    //  file .Aa/mvp.opt.aa, line 174
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 175
    $W[nI_374_364_buffered] : $int<8>
    // I
    $W[I_360] : $int<8>
    // 			out_data := y[I] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 178
    // y[I]
    $intermediate $W[R_I_367_resized] : $int<5>
    $intermediate $W[R_I_367_scaled] : $int<5>
    $intermediate $W[array_obj_ref_368_final_offset] : $int<5>
    $intermediate $W[array_obj_ref_368_root_address] : $int<5>
    $W[array_obj_ref_368_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_368_data_0] : $int<32>
    $W[array_obj_ref_368_wire] : $int<32>
    // out_data
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 179
    // nI
    $W[nI_374] : $int<8>
    // datapath-instances for block %sendVector%loop
    //  file .Aa/mvp.opt.aa, line 170
    // datapath-instances for do-while  
    //  file .Aa/mvp.opt.aa, line 172
    // (nI < 32 )
    <[ULT_u8_u1_378_inst] (nI_374 konst_377_wire_constant) (ULT_u8_u1_378_wire)   $flowthrough 
    $delay ULT_u8_u1_378_inst 0
    ==0? [do_while_stmt_358_branch] (ULT_u8_u1_378_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/mvp.opt.aa, line 174
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/mvp.opt.aa, line 175
    # := [nI_374_364_buf] (nI_374) (nI_374_364_buffered)     $fullrate
    $buffering $out nI_374_364_buf nI_374_364_buffered  1
    # $phi [phi_stmt_360] (type_cast_363_wire_constant nI_374_364_buffered) ( I_360 ) $fullrate
    // $buffering  $out phi_stmt_360 I_360 2
    // 			out_data := y[I] $buffering 1// bits of buffering = 32. 
    //  file .Aa/mvp.opt.aa, line 178
    // y[I]
    &/ [array_obj_ref_368_index_0_resize] (I_360) (R_I_367_resized) 
    $flowthrough 
    &/ [array_obj_ref_368_index_0_rename] (R_I_367_resized) (R_I_367_scaled) 
    $flowthrough 
    &/ [array_obj_ref_368_index_offset] (R_I_367_scaled) (array_obj_ref_368_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_368_root_address_inst] (array_obj_ref_368_final_offset) (array_obj_ref_368_root_address) 
    $flowthrough 
    &/ [array_obj_ref_368_addr_0] (array_obj_ref_368_root_address) (array_obj_ref_368_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_368_load_0] $from memory_space_4 (array_obj_ref_368_word_address_0) (array_obj_ref_368_data_0) 
    $buffering  $in array_obj_ref_368_load_0 array_obj_ref_368_word_address_0 2
    $buffering  $out array_obj_ref_368_load_0 array_obj_ref_368_data_0 2
    $delay array_obj_ref_368_load_0 4
    &/ [array_obj_ref_368_gather_scatter] (array_obj_ref_368_data_0) (array_obj_ref_368_wire) 
    $flowthrough 
    // out_data
    $ioport $out [WPIPE_out_data_366_inst]  (array_obj_ref_368_wire) (out_data)  $fullrate 
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/mvp.opt.aa, line 179
    // (I + 1 )
    +[ADD_u8_u8_373_inst] (I_360 konst_372_wire_constant) (nI_374)   $flowthrough 
    $delay ADD_u8_u8_373_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_358
  //  file .Aa/mvp.opt.aa, line 172
  phi_stmt_360 <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/phi_stmt_360_entry_sample_req branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/phi_stmt_360_loopback_sample_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/phi_stmt_360_phi_mux_ack)
  nI_374_364_buf <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/R_nI_364_Sample/req branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/R_nI_364_Update/req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/R_nI_364_Sample/ack branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/R_nI_364_Update/ack)
  // 			out_data := y[I] $buffering 1// bits of buffering = 32. 
  //  file .Aa/mvp.opt.aa, line 178
  // y[I]
  // I
  array_obj_ref_368_index_0_resize <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_index_resize_0/index_resize_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_index_resize_0/index_resize_ack)
  array_obj_ref_368_index_0_rename <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_index_scale_0/scale_rename_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_index_scale_0/scale_rename_ack)
  array_obj_ref_368_index_offset <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_final_index_sum_regn/req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_final_index_sum_regn/ack)
  array_obj_ref_368_root_address_inst <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_base_plus_offset/sum_rename_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_base_plus_offset/sum_rename_ack)
  array_obj_ref_368_addr_0 <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_word_addrgen/root_register_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_word_addrgen/root_register_ack)
  array_obj_ref_368_gather_scatter <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Update/array_obj_ref_368_Merge/merge_req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Update/array_obj_ref_368_Merge/merge_ack)
  array_obj_ref_368_load_0 <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Sample/word_access_start/word_0/rr branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Update/word_access_complete/word_0/cr) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Sample/word_access_start/word_0/ra branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/array_obj_ref_368_Update/word_access_complete/word_0/ca)
  // out_data
  WPIPE_out_data_366_inst <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/WPIPE_out_data_366_Sample/req branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/WPIPE_out_data_366_Update/req) (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/WPIPE_out_data_366_Sample/ack branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/WPIPE_out_data_366_Update/ack)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file .Aa/mvp.opt.aa, line 179
  // (I + 1 )
  // I
  // (nI < 32 )
  // nI
  do_while_stmt_358_branch <=> (branch_block_stmt_357/do_while_stmt_358/do_while_stmt_358_loop_body/condition_evaluated) (branch_block_stmt_357/do_while_stmt_358/loop_exit/ack branch_block_stmt_357/do_while_stmt_358/loop_taken/ack)
}
$module [mvp_daemon] 
{
  // pipe-declarations for block %mvp_daemon
  //  file .Aa/mvp.opt.aa, line 183
  // pipe-declarations for block %mvp_daemon%loop
  //  file .Aa/mvp.opt.aa, line 189
  // pipe-declarations for block %mvp_daemon%loop%
  //  file .Aa/mvp.opt.aa, line 191
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_382] 
    {
      // start: 	$call readMatrix () () 
      //  file .Aa/mvp.opt.aa, line 188
      $T[call_stmt_382_sample_start_] 
      $T[call_stmt_382_sample_completed_] 
      $T[call_stmt_382_update_start_] 
      $T[call_stmt_382_update_completed_] 
      ;;[call_stmt_382_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_382_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_382_sample_start_ &-> (call_stmt_382_Sample)
      call_stmt_382_sample_completed_ <-& (call_stmt_382_Sample)
      call_stmt_382_sample_completed_ &-> ($null)
      call_stmt_382_update_start_ &-> (call_stmt_382_Update)
      call_stmt_382_update_completed_ <-& (call_stmt_382_Update)
      // end: 	$call readMatrix () () 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  call_stmt_382 store
      // memory-space  memory_space_0
      //  call_stmt_382 store
      // pipe read/write dependencies for pipe in_data
      // read-dependencies for pipe in_data
      // write-dependencies for pipe in_data
      // signal write dependencies for in_data
    }
    <>[branch_block_stmt_383] // Branch Block  file .Aa/mvp.opt.aa, line 189
    {
      $P [branch_block_stmt_383__entry__]
      branch_block_stmt_383__entry__ <-| ($entry)
      $P [branch_block_stmt_383__exit__]
      branch_block_stmt_383__exit__ |-> ($exit)
      $P [merge_stmt_384__entry__] 
      $P [merge_stmt_384__exit__] 
      $P [call_stmt_385_to_call_stmt_387__entry__] 
      $P [call_stmt_385_to_call_stmt_387__exit__] 
      $P [loopback]
      ::[call_stmt_385_to_call_stmt_387] 
      {
        // start: 		$call readVector () () 
        //  file .Aa/mvp.opt.aa, line 193
        $T[call_stmt_385_sample_start_] 
        $T[call_stmt_385_sample_completed_] 
        $T[call_stmt_385_update_start_] 
        $T[call_stmt_385_update_completed_] 
        ;;[call_stmt_385_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_385_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_385_sample_start_ &-> (call_stmt_385_Sample)
        call_stmt_385_sample_completed_ <-& (call_stmt_385_Sample)
        call_stmt_385_sample_completed_ &-> ($null)
        call_stmt_385_update_start_ &-> (call_stmt_385_Update)
        call_stmt_385_update_completed_ <-& (call_stmt_385_Update)
        // end: 		$call readVector () () 
        // start: 		$call multiplyMatrixVector () () 
        //  file .Aa/mvp.opt.aa, line 194
        $T[call_stmt_386_sample_start_] 
        $T[call_stmt_386_sample_completed_] 
        $T[call_stmt_386_update_start_] 
        $T[call_stmt_386_update_completed_] 
        ;;[call_stmt_386_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_386_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_386_sample_start_ &-> (call_stmt_386_Sample)
        call_stmt_386_sample_completed_ <-& (call_stmt_386_Sample)
        call_stmt_386_sample_completed_ &-> ($null)
        call_stmt_386_update_start_ &-> (call_stmt_386_Update)
        call_stmt_386_update_completed_ <-& (call_stmt_386_Update)
        // end: 		$call multiplyMatrixVector () () 
        // start: 		$call sendVector () () 
        //  file .Aa/mvp.opt.aa, line 195
        $T[call_stmt_387_sample_start_] 
        $T[call_stmt_387_sample_completed_] 
        $T[call_stmt_387_update_start_] 
        $T[call_stmt_387_update_completed_] 
        ;;[call_stmt_387_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_387_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_387_sample_start_ &-> (call_stmt_387_Sample)
        call_stmt_387_sample_completed_ <-& (call_stmt_387_Sample)
        call_stmt_387_sample_completed_ &-> ($null)
        call_stmt_387_update_start_ &-> (call_stmt_387_Update)
        call_stmt_387_update_completed_ <-& (call_stmt_387_Update)
        // end: 		$call sendVector () () 
        // load-store dependencies..
        // memory-space  memory_space_4
        //  call_stmt_386 store
        //  call_stmt_387 load
        $T [call_stmt_386_call_stmt_387_delay] $delay
        // call_stmt_386(store) -> call_stmt_387(load)
        call_stmt_387_sample_start_ <-& (call_stmt_386_call_stmt_387_delay)
        call_stmt_386_call_stmt_387_delay <-& (call_stmt_386_update_completed_)
        // memory-space  memory_space_3
        //  call_stmt_385 store
        //  call_stmt_386 load
        $T [call_stmt_385_call_stmt_386_delay] $delay
        // call_stmt_385(store) -> call_stmt_386(load)
        call_stmt_386_sample_start_ <-& (call_stmt_385_call_stmt_386_delay)
        call_stmt_385_call_stmt_386_delay <-& (call_stmt_385_update_completed_)
        // memory-space  memory_space_2
        //  call_stmt_385 store
        //  call_stmt_386 load
        $T [call_stmt_385_call_stmt_386_delay] $delay
        // call_stmt_385(store) -> call_stmt_386(load)
        call_stmt_386_sample_start_ <-& (call_stmt_385_call_stmt_386_delay)
        call_stmt_385_call_stmt_386_delay <-& (call_stmt_385_update_completed_)
        // memory-space  memory_space_1
        //  call_stmt_386 load
        // memory-space  memory_space_0
        //  call_stmt_386 load
        // pipe read/write dependencies for pipe in_data
        // read-dependencies for pipe in_data
        // write-dependencies for pipe in_data
        // signal write dependencies for in_data
        // pipe read/write dependencies for pipe out_data
        // read-dependencies for pipe out_data
        // write-dependencies for pipe out_data
        // signal write dependencies for out_data
      }
      call_stmt_385_to_call_stmt_387__entry__ |-> (call_stmt_385_to_call_stmt_387)
      call_stmt_385_to_call_stmt_387__exit__ <-| (call_stmt_385_to_call_stmt_387)
      // control-path for merge  
      //  file .Aa/mvp.opt.aa, line 191
      ;;[merge_stmt_384_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_384__entry__ |-> (merge_stmt_384_dead_link)
      merge_stmt_384__exit__ <-| (merge_stmt_384_dead_link)
      //---------------------   merge statement  file .Aa/mvp.opt.aa, line 191  --------------------------
      ||[merge_stmt_384__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_384__entry__ |-> (merge_stmt_384__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_384_PhiReqMerge] 
      merge_stmt_384_PhiReqMerge <-| ( merge_stmt_384__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_384_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_384_PhiReqMerge |-> (merge_stmt_384_PhiAck)
      merge_stmt_384__exit__  <-| (merge_stmt_384_PhiAck)
      //---------------------  end of merge statement  file .Aa/mvp.opt.aa, line 191  --------------------------
      merge_stmt_384__entry__ <-| (branch_block_stmt_383__entry__)
      call_stmt_385_to_call_stmt_387__entry__ <-| (merge_stmt_384__exit__)
      loopback <-| (call_stmt_385_to_call_stmt_387__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 191
    // constant-object-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 189
    // constant-object-declarations for block %mvp_daemon
    //  file .Aa/mvp.opt.aa, line 183
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 188
    // constant-declarations for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 189
    // constant-declarations for block %mvp_daemon%loop%
    //  file .Aa/mvp.opt.aa, line 191
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 193
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 194
    // 		$call sendVector () () 
    //  file .Aa/mvp.opt.aa, line 195
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 188
    // block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 189
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 193
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 194
    // 		$call sendVector () () 
    //  file .Aa/mvp.opt.aa, line 195
    // 	$call readMatrix () () 
    //  file .Aa/mvp.opt.aa, line 188
    $call [call_stmt_382_call] $module readMatrix() ()  
    $delay call_stmt_382_call 4
    // datapath-instances for block %mvp_daemon%loop
    //  file .Aa/mvp.opt.aa, line 189
    // 		$call readVector () () 
    //  file .Aa/mvp.opt.aa, line 193
    $call [call_stmt_385_call] $module readVector() ()  
    $delay call_stmt_385_call 4
    // 		$call multiplyMatrixVector () () 
    //  file .Aa/mvp.opt.aa, line 194
    $call [call_stmt_386_call] $module multiplyMatrixVector() ()  
    $delay call_stmt_386_call 4
    // 		$call sendVector () () 
    //  file .Aa/mvp.opt.aa, line 195
    $call [call_stmt_387_call] $module sendVector() ()  
    $delay call_stmt_387_call 4
  }
  // end data-path
  // 	$call readMatrix () () 
  //  file .Aa/mvp.opt.aa, line 188
  call_stmt_382_call <=> (call_stmt_382/call_stmt_382_Sample/crr call_stmt_382/call_stmt_382_Update/ccr) (call_stmt_382/call_stmt_382_Sample/cra call_stmt_382/call_stmt_382_Update/cca)
  // CP-DP links for merge  
  //  file .Aa/mvp.opt.aa, line 191
  // 		$call readVector () () 
  //  file .Aa/mvp.opt.aa, line 193
  call_stmt_385_call <=> (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_385_Sample/crr branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_385_Update/ccr) (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_385_Sample/cra branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_385_Update/cca)
  // 		$call multiplyMatrixVector () () 
  //  file .Aa/mvp.opt.aa, line 194
  call_stmt_386_call <=> (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_386_Sample/crr branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_386_Update/ccr) (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_386_Sample/cra branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_386_Update/cca)
  // 		$call sendVector () () 
  //  file .Aa/mvp.opt.aa, line 195
  call_stmt_387_call <=> (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_387_Sample/crr branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_387_Update/ccr) (branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_387_Sample/cra branch_block_stmt_383/call_stmt_385_to_call_stmt_387/call_stmt_387_Update/cca)
}

	.file	"aHiR_ieee_proposed.vhdl"
	.section	.rodata
	.align 32
	.type	_UI00000000, @object
	.size	_UI00000000, 76
_UI00000000:
	.byte	47
	.byte	104
	.byte	111
	.byte	109
	.byte	101
	.byte	47
	.byte	112
	.byte	114
	.byte	97
	.byte	106
	.byte	119
	.byte	97
	.byte	108
	.byte	47
	.byte	80
	.byte	117
	.byte	98
	.byte	108
	.byte	105
	.byte	99
	.byte	47
	.byte	65
	.byte	99
	.byte	97
	.byte	100
	.byte	47
	.byte	83
	.byte	101
	.byte	109
	.byte	95
	.byte	55
	.byte	47
	.byte	69
	.byte	69
	.byte	95
	.byte	55
	.byte	56
	.byte	57
	.byte	47
	.byte	114
	.byte	101
	.byte	108
	.byte	101
	.byte	97
	.byte	115
	.byte	101
	.byte	47
	.byte	118
	.byte	104
	.byte	100
	.byte	108
	.byte	47
	.byte	97
	.byte	72
	.byte	105
	.byte	82
	.byte	95
	.byte	105
	.byte	101
	.byte	101
	.byte	101
	.byte	95
	.byte	112
	.byte	114
	.byte	111
	.byte	112
	.byte	111
	.byte	115
	.byte	101
	.byte	100
	.byte	46
	.byte	118
	.byte	104
	.byte	100
	.byte	108
	.byte	0
.globl ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__BTR
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__BTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__BTR, 8
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__BTR:
	.byte	0
	.byte	1
	.byte	0
	.zero	1
	.long	2
.globl ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__BTR
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__BTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__BTR, 8
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__BTR:
	.byte	0
	.byte	1
	.byte	0
	.zero	1
	.long	2
.globl ahir_ieee_proposed__math_utility_pkg__round_type__BTR
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__BTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__BTR, 8
ahir_ieee_proposed__math_utility_pkg__round_type__BTR:
	.byte	0
	.byte	3
	.byte	0
	.zero	1
	.long	4
.globl ahir_ieee_proposed__math_utility_pkg__ELABORATED
	.bss
	.type	ahir_ieee_proposed__math_utility_pkg__ELABORATED, @object
	.size	ahir_ieee_proposed__math_utility_pkg__ELABORATED, 1
ahir_ieee_proposed__math_utility_pkg__ELABORATED:
	.zero	1
	.section	.rodata
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_round__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_round__RTISTR, 12
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_round__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	0
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_truncate__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_truncate__RTISTR, 15
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_truncate__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	116
	.byte	114
	.byte	117
	.byte	110
	.byte	99
	.byte	97
	.byte	116
	.byte	101
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTINAMES, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTINAMES, 8
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTINAMES:
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_round__RTISTR
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__fixed_truncate__RTISTR
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTISTR, 23
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTI
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTI, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTI, 16
ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTISTR
	.long	2
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTINAMES
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_saturate__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_saturate__RTISTR, 15
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_saturate__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	115
	.byte	97
	.byte	116
	.byte	117
	.byte	114
	.byte	97
	.byte	116
	.byte	101
	.byte	0
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_wrap__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_wrap__RTISTR, 11
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_wrap__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	119
	.byte	114
	.byte	97
	.byte	112
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTINAMES, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTINAMES, 8
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTINAMES:
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_saturate__RTISTR
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__fixed_wrap__RTISTR
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTISTR, 26
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	111
	.byte	118
	.byte	101
	.byte	114
	.byte	102
	.byte	108
	.byte	111
	.byte	119
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTI
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTI, @object
	.size	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTI, 16
ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTISTR
	.long	2
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTINAMES
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__round_nearest__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__round_nearest__RTISTR, 14
ahir_ieee_proposed__math_utility_pkg__round_type__round_nearest__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	110
	.byte	101
	.byte	97
	.byte	114
	.byte	101
	.byte	115
	.byte	116
	.byte	0
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__round_inf__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__round_inf__RTISTR, 10
ahir_ieee_proposed__math_utility_pkg__round_type__round_inf__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__round_neginf__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__round_neginf__RTISTR, 13
ahir_ieee_proposed__math_utility_pkg__round_type__round_neginf__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	110
	.byte	101
	.byte	103
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__round_zero__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__round_zero__RTISTR, 11
ahir_ieee_proposed__math_utility_pkg__round_type__round_zero__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	122
	.byte	101
	.byte	114
	.byte	111
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__RTINAMES, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__RTINAMES, 16
ahir_ieee_proposed__math_utility_pkg__round_type__RTINAMES:
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__round_nearest__RTISTR
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__round_inf__RTISTR
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__round_neginf__RTISTR
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__round_zero__RTISTR
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__RTISTR, 11
ahir_ieee_proposed__math_utility_pkg__round_type__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__math_utility_pkg__round_type__RTI
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__round_type__RTI, @object
	.size	ahir_ieee_proposed__math_utility_pkg__round_type__RTI, 16
ahir_ieee_proposed__math_utility_pkg__round_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__RTISTR
	.long	4
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__RTINAMES
	.type	ahir_ieee_proposed__math_utility_pkg__RTISTR, @object
	.size	ahir_ieee_proposed__math_utility_pkg__RTISTR, 17
ahir_ieee_proposed__math_utility_pkg__RTISTR:
	.byte	109
	.byte	97
	.byte	116
	.byte	104
	.byte	95
	.byte	117
	.byte	116
	.byte	105
	.byte	108
	.byte	105
	.byte	116
	.byte	121
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__RTIARRAY, @object
	.size	ahir_ieee_proposed__math_utility_pkg__RTIARRAY, 16
ahir_ieee_proposed__math_utility_pkg__RTIARRAY:
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_round_style_type__RTI
	.long	ahir_ieee_proposed__math_utility_pkg__fixed_overflow_style_type__RTI
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__RTI
	.long	0
.globl ahir_ieee_proposed__math_utility_pkg__RTI
	.align 4
	.type	ahir_ieee_proposed__math_utility_pkg__RTI, @object
	.size	ahir_ieee_proposed__math_utility_pkg__RTI, 28
ahir_ieee_proposed__math_utility_pkg__RTI:
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__math_utility_pkg__RTISTR
	.long	0
	.long	ahir_ieee_proposed__RTI
	.long	0
	.long	3
	.long	ahir_ieee_proposed__math_utility_pkg__RTIARRAY
	.text
.globl ahir_ieee_proposed__math_utility_pkg__ELAB_SPEC
	.type	ahir_ieee_proposed__math_utility_pkg__ELAB_SPEC, @function
ahir_ieee_proposed__math_utility_pkg__ELAB_SPEC:
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__math_utility_pkg__ELAB_SPEC, .-ahir_ieee_proposed__math_utility_pkg__ELAB_SPEC
.globl ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__BTR
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__BTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__BTR, 8
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__BTR:
	.byte	0
	.byte	1
	.byte	0
	.zero	1
	.long	2
.globl ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__BTR
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__BTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__BTR, 8
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__BTR:
	.byte	0
	.byte	1
	.byte	0
	.zero	1
	.long	2
.globl ahir_ieee_proposed__fixed_float_types__round_type__BTR
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__round_type__BTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__BTR, 8
ahir_ieee_proposed__fixed_float_types__round_type__BTR:
	.byte	0
	.byte	3
	.byte	0
	.zero	1
	.long	4
.globl ahir_ieee_proposed__fixed_float_types__ELABORATED
	.bss
	.type	ahir_ieee_proposed__fixed_float_types__ELABORATED, @object
	.size	ahir_ieee_proposed__fixed_float_types__ELABORATED, 1
ahir_ieee_proposed__fixed_float_types__ELABORATED:
	.zero	1
	.section	.rodata
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_round__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_round__RTISTR, 12
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_round__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	0
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_truncate__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_truncate__RTISTR, 15
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_truncate__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	116
	.byte	114
	.byte	117
	.byte	110
	.byte	99
	.byte	97
	.byte	116
	.byte	101
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTINAMES, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTINAMES, 8
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTINAMES:
	.long	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_round__RTISTR
	.long	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__fixed_truncate__RTISTR
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTISTR, 23
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTI
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTI, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTI, 16
ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTISTR
	.long	2
	.long	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTINAMES
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_saturate__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_saturate__RTISTR, 15
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_saturate__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	115
	.byte	97
	.byte	116
	.byte	117
	.byte	114
	.byte	97
	.byte	116
	.byte	101
	.byte	0
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_wrap__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_wrap__RTISTR, 11
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_wrap__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	119
	.byte	114
	.byte	97
	.byte	112
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTINAMES, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTINAMES, 8
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTINAMES:
	.long	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_saturate__RTISTR
	.long	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__fixed_wrap__RTISTR
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTISTR, 26
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	111
	.byte	118
	.byte	101
	.byte	114
	.byte	102
	.byte	108
	.byte	111
	.byte	119
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTI
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTI, @object
	.size	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTI, 16
ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTISTR
	.long	2
	.long	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTINAMES
	.type	ahir_ieee_proposed__fixed_float_types__round_type__round_nearest__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__round_nearest__RTISTR, 14
ahir_ieee_proposed__fixed_float_types__round_type__round_nearest__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	110
	.byte	101
	.byte	97
	.byte	114
	.byte	101
	.byte	115
	.byte	116
	.byte	0
	.type	ahir_ieee_proposed__fixed_float_types__round_type__round_inf__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__round_inf__RTISTR, 10
ahir_ieee_proposed__fixed_float_types__round_type__round_inf__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__fixed_float_types__round_type__round_neginf__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__round_neginf__RTISTR, 13
ahir_ieee_proposed__fixed_float_types__round_type__round_neginf__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	110
	.byte	101
	.byte	103
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__fixed_float_types__round_type__round_zero__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__round_zero__RTISTR, 11
ahir_ieee_proposed__fixed_float_types__round_type__round_zero__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	122
	.byte	101
	.byte	114
	.byte	111
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__round_type__RTINAMES, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__RTINAMES, 16
ahir_ieee_proposed__fixed_float_types__round_type__RTINAMES:
	.long	ahir_ieee_proposed__fixed_float_types__round_type__round_nearest__RTISTR
	.long	ahir_ieee_proposed__fixed_float_types__round_type__round_inf__RTISTR
	.long	ahir_ieee_proposed__fixed_float_types__round_type__round_neginf__RTISTR
	.long	ahir_ieee_proposed__fixed_float_types__round_type__round_zero__RTISTR
	.type	ahir_ieee_proposed__fixed_float_types__round_type__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__RTISTR, 11
ahir_ieee_proposed__fixed_float_types__round_type__RTISTR:
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__fixed_float_types__round_type__RTI
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__round_type__RTI, @object
	.size	ahir_ieee_proposed__fixed_float_types__round_type__RTI, 16
ahir_ieee_proposed__fixed_float_types__round_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__fixed_float_types__round_type__RTISTR
	.long	4
	.long	ahir_ieee_proposed__fixed_float_types__round_type__RTINAMES
	.type	ahir_ieee_proposed__fixed_float_types__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_float_types__RTISTR, 18
ahir_ieee_proposed__fixed_float_types__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	115
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__RTIARRAY, @object
	.size	ahir_ieee_proposed__fixed_float_types__RTIARRAY, 16
ahir_ieee_proposed__fixed_float_types__RTIARRAY:
	.long	ahir_ieee_proposed__fixed_float_types__fixed_round_style_type__RTI
	.long	ahir_ieee_proposed__fixed_float_types__fixed_overflow_style_type__RTI
	.long	ahir_ieee_proposed__fixed_float_types__round_type__RTI
	.long	0
.globl ahir_ieee_proposed__fixed_float_types__RTI
	.align 4
	.type	ahir_ieee_proposed__fixed_float_types__RTI, @object
	.size	ahir_ieee_proposed__fixed_float_types__RTI, 28
ahir_ieee_proposed__fixed_float_types__RTI:
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__fixed_float_types__RTISTR
	.long	0
	.long	ahir_ieee_proposed__RTI
	.long	0
	.long	3
	.long	ahir_ieee_proposed__fixed_float_types__RTIARRAY
	.text
.globl ahir_ieee_proposed__fixed_float_types__ELAB_SPEC
	.type	ahir_ieee_proposed__fixed_float_types__ELAB_SPEC, @function
ahir_ieee_proposed__fixed_float_types__ELAB_SPEC:
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__fixed_float_types__ELAB_SPEC, .-ahir_ieee_proposed__fixed_float_types__ELAB_SPEC
.globl ahir_ieee_proposed__fixed_pkg__ELABORATED
	.bss
	.type	ahir_ieee_proposed__fixed_pkg__ELABORATED, @object
	.size	ahir_ieee_proposed__fixed_pkg__ELABORATED, 1
ahir_ieee_proposed__fixed_pkg__ELABORATED:
	.zero	1
	.section	.rodata
	.type	ahir_ieee_proposed__fixed_pkg__RTISTR, @object
	.size	ahir_ieee_proposed__fixed_pkg__RTISTR, 10
ahir_ieee_proposed__fixed_pkg__RTISTR:
	.byte	102
	.byte	105
	.byte	120
	.byte	101
	.byte	100
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__fixed_pkg__RTIARRAY, @object
	.size	ahir_ieee_proposed__fixed_pkg__RTIARRAY, 4
ahir_ieee_proposed__fixed_pkg__RTIARRAY:
	.zero	4
.globl ahir_ieee_proposed__fixed_pkg__RTI
	.align 4
	.type	ahir_ieee_proposed__fixed_pkg__RTI, @object
	.size	ahir_ieee_proposed__fixed_pkg__RTI, 28
ahir_ieee_proposed__fixed_pkg__RTI:
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__fixed_pkg__RTISTR
	.long	0
	.long	ahir_ieee_proposed__RTI
	.long	0
	.long	0
	.long	ahir_ieee_proposed__fixed_pkg__RTIARRAY
	.text
.globl ahir_ieee_proposed__fixed_pkg__ELAB_SPEC
	.type	ahir_ieee_proposed__fixed_pkg__ELAB_SPEC, @function
ahir_ieee_proposed__fixed_pkg__ELAB_SPEC:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movzbl	std__textio__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L6
	call	std__textio__ELAB_BODY
.L6:
	movzbl	ieee__std_logic_1164__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L7
	call	ieee__std_logic_1164__ELAB_BODY
.L7:
	movzbl	ieee__numeric_std__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L8
	call	ieee__numeric_std__ELAB_BODY
.L8:
	movzbl	ahir_ieee_proposed__math_utility_pkg__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L10
	call	ahir_ieee_proposed__math_utility_pkg__ELAB_BODY
.L10:
	leave
	ret
	.size	ahir_ieee_proposed__fixed_pkg__ELAB_SPEC, .-ahir_ieee_proposed__fixed_pkg__ELAB_SPEC
.globl ahir_ieee_proposed__float_pkg__float_exponent_width
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_exponent_width, @object
	.size	ahir_ieee_proposed__float_pkg__float_exponent_width, 4
ahir_ieee_proposed__float_pkg__float_exponent_width:
	.long	8
.globl ahir_ieee_proposed__float_pkg__float_fraction_width
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_fraction_width, @object
	.size	ahir_ieee_proposed__float_pkg__float_fraction_width, 4
ahir_ieee_proposed__float_pkg__float_fraction_width:
	.long	23
.globl ahir_ieee_proposed__float_pkg__float_round_style
	.type	ahir_ieee_proposed__float_pkg__float_round_style, @object
	.size	ahir_ieee_proposed__float_pkg__float_round_style, 1
ahir_ieee_proposed__float_pkg__float_round_style:
	.zero	1
.globl ahir_ieee_proposed__float_pkg__float_int_conversion_round_style
	.type	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style, @object
	.size	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style, 1
ahir_ieee_proposed__float_pkg__float_int_conversion_round_style:
	.byte	3
.globl ahir_ieee_proposed__float_pkg__float_denormalize
	.type	ahir_ieee_proposed__float_pkg__float_denormalize, @object
	.size	ahir_ieee_proposed__float_pkg__float_denormalize, 1
ahir_ieee_proposed__float_pkg__float_denormalize:
	.byte	1
.globl ahir_ieee_proposed__float_pkg__float_check_error
	.type	ahir_ieee_proposed__float_pkg__float_check_error, @object
	.size	ahir_ieee_proposed__float_pkg__float_check_error, 1
ahir_ieee_proposed__float_pkg__float_check_error:
	.byte	1
.globl ahir_ieee_proposed__float_pkg__float_guard_bits
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_guard_bits, @object
	.size	ahir_ieee_proposed__float_pkg__float_guard_bits, 4
ahir_ieee_proposed__float_pkg__float_guard_bits:
	.long	3
.globl ahir_ieee_proposed__float_pkg__no_warning
	.type	ahir_ieee_proposed__float_pkg__no_warning, @object
	.size	ahir_ieee_proposed__float_pkg__no_warning, 1
ahir_ieee_proposed__float_pkg__no_warning:
	.zero	1
.globl ahir_ieee_proposed__float_pkg__unresolved_float__BR1
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float__BR1, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float__BR1, 16
ahir_ieee_proposed__float_pkg__unresolved_float__BR1:
	.long	-2147483648
	.long	-2147483648
	.byte	0
	.zero	3
	.long	1
.globl ahir_ieee_proposed__float_pkg__unresolved_float32__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float32__STB, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float32__STB, 16
ahir_ieee_proposed__float_pkg__unresolved_float32__STB:
	.long	8
	.long	-23
	.byte	1
	.zero	3
	.long	32
.globl ahir_ieee_proposed__float_pkg__float32__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float32__STB, @object
	.size	ahir_ieee_proposed__float_pkg__float32__STB, 16
ahir_ieee_proposed__float_pkg__float32__STB:
	.long	8
	.long	-23
	.byte	1
	.zero	3
	.long	32
.globl ahir_ieee_proposed__float_pkg__unresolved_float64__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float64__STB, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float64__STB, 16
ahir_ieee_proposed__float_pkg__unresolved_float64__STB:
	.long	11
	.long	-52
	.byte	1
	.zero	3
	.long	64
.globl ahir_ieee_proposed__float_pkg__float64__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float64__STB, @object
	.size	ahir_ieee_proposed__float_pkg__float64__STB, 16
ahir_ieee_proposed__float_pkg__float64__STB:
	.long	11
	.long	-52
	.byte	1
	.zero	3
	.long	64
.globl ahir_ieee_proposed__float_pkg__unresolved_float128__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float128__STB, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float128__STB, 16
ahir_ieee_proposed__float_pkg__unresolved_float128__STB:
	.long	15
	.long	-112
	.byte	1
	.zero	3
	.long	128
.globl ahir_ieee_proposed__float_pkg__float128__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float128__STB, @object
	.size	ahir_ieee_proposed__float_pkg__float128__STB, 16
ahir_ieee_proposed__float_pkg__float128__STB:
	.long	15
	.long	-112
	.byte	1
	.zero	3
	.long	128
.globl ahir_ieee_proposed__float_pkg__valid_fpstate__BTR
	.align 4
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__BTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__BTR, 8
ahir_ieee_proposed__float_pkg__valid_fpstate__BTR:
	.byte	0
	.byte	10
	.byte	0
	.zero	1
	.long	11
.globl ahir_ieee_proposed__float_pkg__fphdlsynth_or_real
	.type	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real, @object
	.size	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real, 1
ahir_ieee_proposed__float_pkg__fphdlsynth_or_real:
	.byte	1
	.text
.globl ahir_ieee_proposed__float_pkg__unresolved_float_EQ
	.type	ahir_ieee_proposed__float_pkg__unresolved_float_EQ, @function
ahir_ieee_proposed__float_pkg__unresolved_float_EQ:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$20, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L12
	movb	$0, -17(%ebp)
	jmp	.L13
.L12:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	$0, -8(%ebp)
.L16:
	movl	-8(%ebp), %eax
	cmpl	-4(%ebp), %eax
	jb	.L14
	movb	$1, -17(%ebp)
	jmp	.L13
.L14:
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movzbl	(%edx,%eax), %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	%al, %cl
	sete	%al
	xorl	$1, %eax
	testb	%al, %al
	je	.L15
	movb	$0, -17(%ebp)
	jmp	.L13
.L15:
	addl	$1, -8(%ebp)
	jmp	.L16
.L13:
	movzbl	-17(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__unresolved_float_EQ, .-ahir_ieee_proposed__float_pkg__unresolved_float_EQ
.globl ahir_ieee_proposed__float_pkg__unresolved_float_CMP
	.type	ahir_ieee_proposed__float_pkg__unresolved_float_CMP, @function
ahir_ieee_proposed__float_pkg__unresolved_float_CMP:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$36, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jb	.L19
	movl	-16(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L20
.L19:
	movl	-20(%ebp), %eax
	movl	%eax, -12(%ebp)
.L20:
	movl	$0, -8(%ebp)
.L27:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	jb	.L21
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	je	.L22
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jbe	.L23
	movb	$2, -33(%ebp)
	jmp	.L24
.L23:
	movb	$0, -33(%ebp)
	jmp	.L24
.L22:
	movb	$1, -33(%ebp)
	jmp	.L24
.L21:
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -2(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -1(%ebp)
	movzbl	-2(%ebp), %eax
	cmpb	-1(%ebp), %al
	je	.L25
	movzbl	-2(%ebp), %eax
	cmpb	-1(%ebp), %al
	jbe	.L26
	movb	$2, -33(%ebp)
	jmp	.L24
.L26:
	movb	$0, -33(%ebp)
	jmp	.L24
.L25:
	addl	$1, -8(%ebp)
	jmp	.L27
.L24:
	movzbl	-33(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__unresolved_float_CMP, .-ahir_ieee_proposed__float_pkg__unresolved_float_CMP
.globl ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT
	.type	ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT, @function
ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$72, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	jne	.L30
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	jmp	.L34
.L30:
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, -12(%ebp)
	movl	8(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-12(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-8(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -24(%ebp)
	jne	.L32
	movl	-8(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-8(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L33
.L32:
	movl	-8(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-24(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -4(%ebp)
	movl	-8(%ebp), %edx
	movl	-4(%ebp), %eax
	movl	%eax, 4(%edx)
.L33:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	addl	-20(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L34:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT, .-ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT
.globl ahir_ieee_proposed__float_pkg__ELABORATED
	.bss
	.type	ahir_ieee_proposed__float_pkg__ELABORATED, @object
	.size	ahir_ieee_proposed__float_pkg__ELABORATED, 1
ahir_ieee_proposed__float_pkg__ELABORATED:
	.zero	1
	.section	.rodata
	.type	ahir_ieee_proposed__float_pkg__float_exponent_width__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_exponent_width__RTISTR, 21
ahir_ieee_proposed__float_pkg__float_exponent_width__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	101
	.byte	120
	.byte	112
	.byte	111
	.byte	110
	.byte	101
	.byte	110
	.byte	116
	.byte	95
	.byte	119
	.byte	105
	.byte	100
	.byte	116
	.byte	104
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_exponent_width__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_exponent_width__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_exponent_width__RTI, 16
ahir_ieee_proposed__float_pkg__float_exponent_width__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_exponent_width__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_exponent_width
	.long	std__standard__natural__RTI
	.type	ahir_ieee_proposed__float_pkg__float_fraction_width__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_fraction_width__RTISTR, 21
ahir_ieee_proposed__float_pkg__float_fraction_width__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	102
	.byte	114
	.byte	97
	.byte	99
	.byte	116
	.byte	105
	.byte	111
	.byte	110
	.byte	95
	.byte	119
	.byte	105
	.byte	100
	.byte	116
	.byte	104
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_fraction_width__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_fraction_width__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_fraction_width__RTI, 16
ahir_ieee_proposed__float_pkg__float_fraction_width__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_fraction_width__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_fraction_width
	.long	std__standard__natural__RTI
	.type	ahir_ieee_proposed__float_pkg__float_round_style__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_round_style__RTISTR, 18
ahir_ieee_proposed__float_pkg__float_round_style__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_round_style__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_round_style__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_round_style__RTI, 16
ahir_ieee_proposed__float_pkg__float_round_style__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_round_style__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_round_style
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__RTI
	.align 32
	.type	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTISTR, 33
ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	105
	.byte	110
	.byte	116
	.byte	95
	.byte	99
	.byte	111
	.byte	110
	.byte	118
	.byte	101
	.byte	114
	.byte	115
	.byte	105
	.byte	111
	.byte	110
	.byte	95
	.byte	114
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	95
	.byte	115
	.byte	116
	.byte	121
	.byte	108
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTI, 16
ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style
	.long	ahir_ieee_proposed__math_utility_pkg__round_type__RTI
	.type	ahir_ieee_proposed__float_pkg__float_denormalize__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_denormalize__RTISTR, 18
ahir_ieee_proposed__float_pkg__float_denormalize__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	100
	.byte	101
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	105
	.byte	122
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_denormalize__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_denormalize__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_denormalize__RTI, 16
ahir_ieee_proposed__float_pkg__float_denormalize__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_denormalize__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_denormalize
	.long	std__standard__boolean__RTI
	.type	ahir_ieee_proposed__float_pkg__float_check_error__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_check_error__RTISTR, 18
ahir_ieee_proposed__float_pkg__float_check_error__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	99
	.byte	104
	.byte	101
	.byte	99
	.byte	107
	.byte	95
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_check_error__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_check_error__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_check_error__RTI, 16
ahir_ieee_proposed__float_pkg__float_check_error__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_check_error__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_check_error
	.long	std__standard__boolean__RTI
	.type	ahir_ieee_proposed__float_pkg__float_guard_bits__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float_guard_bits__RTISTR, 17
ahir_ieee_proposed__float_pkg__float_guard_bits__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	103
	.byte	117
	.byte	97
	.byte	114
	.byte	100
	.byte	95
	.byte	98
	.byte	105
	.byte	116
	.byte	115
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float_guard_bits__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_guard_bits__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float_guard_bits__RTI, 16
ahir_ieee_proposed__float_pkg__float_guard_bits__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float_guard_bits__RTISTR
	.long	ahir_ieee_proposed__float_pkg__float_guard_bits
	.long	std__standard__natural__RTI
	.type	ahir_ieee_proposed__float_pkg__no_warning__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__no_warning__RTISTR, 11
ahir_ieee_proposed__float_pkg__no_warning__RTISTR:
	.byte	110
	.byte	111
	.byte	95
	.byte	119
	.byte	97
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	0
.globl ahir_ieee_proposed__float_pkg__no_warning__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__no_warning__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__no_warning__RTI, 16
ahir_ieee_proposed__float_pkg__no_warning__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__no_warning__RTISTR
	.long	ahir_ieee_proposed__float_pkg__no_warning
	.long	std__standard__boolean__RTI
	.type	ahir_ieee_proposed__float_pkg__unresolved_float__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float__RTISTR, 17
ahir_ieee_proposed__float_pkg__unresolved_float__RTISTR:
	.byte	117
	.byte	110
	.byte	114
	.byte	101
	.byte	115
	.byte	111
	.byte	108
	.byte	118
	.byte	101
	.byte	100
	.byte	95
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	0
.globl ahir_ieee_proposed__float_pkg__unresolved_float__RTIINDEXES
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float__RTIINDEXES, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float__RTIINDEXES, 4
ahir_ieee_proposed__float_pkg__unresolved_float__RTIINDEXES:
	.long	std__standard__integer__RTI
.globl ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float__RTI, 20
ahir_ieee_proposed__float_pkg__unresolved_float__RTI:
	.byte	31
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTISTR
	.long	ieee__std_logic_1164__std_ulogic__RTI
	.long	1
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTIINDEXES
	.type	ahir_ieee_proposed__float_pkg__unresolved_float32__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float32__RTISTR, 19
ahir_ieee_proposed__float_pkg__unresolved_float32__RTISTR:
	.byte	117
	.byte	110
	.byte	114
	.byte	101
	.byte	115
	.byte	111
	.byte	108
	.byte	118
	.byte	101
	.byte	100
	.byte	95
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	51
	.byte	50
	.byte	0
.globl ahir_ieee_proposed__float_pkg__unresolved_float32__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float32__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float32__RTI, 24
ahir_ieee_proposed__float_pkg__unresolved_float32__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__unresolved_float32__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float32__STB
	.long	32
	.long	128
	.type	ahir_ieee_proposed__float_pkg__float32__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float32__RTISTR, 8
ahir_ieee_proposed__float_pkg__float32__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	51
	.byte	50
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float32__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float32__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float32__RTI, 24
ahir_ieee_proposed__float_pkg__float32__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float32__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__float32__STB
	.long	32
	.long	128
	.type	ahir_ieee_proposed__float_pkg__unresolved_float64__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float64__RTISTR, 19
ahir_ieee_proposed__float_pkg__unresolved_float64__RTISTR:
	.byte	117
	.byte	110
	.byte	114
	.byte	101
	.byte	115
	.byte	111
	.byte	108
	.byte	118
	.byte	101
	.byte	100
	.byte	95
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	54
	.byte	52
	.byte	0
.globl ahir_ieee_proposed__float_pkg__unresolved_float64__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float64__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float64__RTI, 24
ahir_ieee_proposed__float_pkg__unresolved_float64__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__unresolved_float64__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float64__STB
	.long	64
	.long	256
	.type	ahir_ieee_proposed__float_pkg__float64__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float64__RTISTR, 8
ahir_ieee_proposed__float_pkg__float64__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	54
	.byte	52
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float64__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float64__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float64__RTI, 24
ahir_ieee_proposed__float_pkg__float64__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float64__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__float64__STB
	.long	64
	.long	256
	.type	ahir_ieee_proposed__float_pkg__unresolved_float128__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float128__RTISTR, 20
ahir_ieee_proposed__float_pkg__unresolved_float128__RTISTR:
	.byte	117
	.byte	110
	.byte	114
	.byte	101
	.byte	115
	.byte	111
	.byte	108
	.byte	118
	.byte	101
	.byte	100
	.byte	95
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	49
	.byte	50
	.byte	56
	.byte	0
.globl ahir_ieee_proposed__float_pkg__unresolved_float128__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__unresolved_float128__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__unresolved_float128__RTI, 24
ahir_ieee_proposed__float_pkg__unresolved_float128__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__unresolved_float128__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float128__STB
	.long	128
	.long	512
	.type	ahir_ieee_proposed__float_pkg__float128__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__float128__RTISTR, 9
ahir_ieee_proposed__float_pkg__float128__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	49
	.byte	50
	.byte	56
	.byte	0
.globl ahir_ieee_proposed__float_pkg__float128__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float128__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__float128__RTI, 24
ahir_ieee_proposed__float_pkg__float128__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__float128__RTISTR
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__float128__STB
	.long	128
	.long	512
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__nan__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__nan__RTISTR, 4
ahir_ieee_proposed__float_pkg__valid_fpstate__nan__RTISTR:
	.byte	110
	.byte	97
	.byte	110
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__quiet_nan__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__quiet_nan__RTISTR, 10
ahir_ieee_proposed__float_pkg__valid_fpstate__quiet_nan__RTISTR:
	.byte	113
	.byte	117
	.byte	105
	.byte	101
	.byte	116
	.byte	95
	.byte	110
	.byte	97
	.byte	110
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_inf__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_inf__RTISTR, 8
ahir_ieee_proposed__float_pkg__valid_fpstate__neg_inf__RTISTR:
	.byte	110
	.byte	101
	.byte	103
	.byte	95
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_normal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_normal__RTISTR, 11
ahir_ieee_proposed__float_pkg__valid_fpstate__neg_normal__RTISTR:
	.byte	110
	.byte	101
	.byte	103
	.byte	95
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_denormal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_denormal__RTISTR, 13
ahir_ieee_proposed__float_pkg__valid_fpstate__neg_denormal__RTISTR:
	.byte	110
	.byte	101
	.byte	103
	.byte	95
	.byte	100
	.byte	101
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_zero__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_zero__RTISTR, 9
ahir_ieee_proposed__float_pkg__valid_fpstate__neg_zero__RTISTR:
	.byte	110
	.byte	101
	.byte	103
	.byte	95
	.byte	122
	.byte	101
	.byte	114
	.byte	111
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_zero__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_zero__RTISTR, 9
ahir_ieee_proposed__float_pkg__valid_fpstate__pos_zero__RTISTR:
	.byte	112
	.byte	111
	.byte	115
	.byte	95
	.byte	122
	.byte	101
	.byte	114
	.byte	111
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_denormal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_denormal__RTISTR, 13
ahir_ieee_proposed__float_pkg__valid_fpstate__pos_denormal__RTISTR:
	.byte	112
	.byte	111
	.byte	115
	.byte	95
	.byte	100
	.byte	101
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_normal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_normal__RTISTR, 11
ahir_ieee_proposed__float_pkg__valid_fpstate__pos_normal__RTISTR:
	.byte	112
	.byte	111
	.byte	115
	.byte	95
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_inf__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_inf__RTISTR, 8
ahir_ieee_proposed__float_pkg__valid_fpstate__pos_inf__RTISTR:
	.byte	112
	.byte	111
	.byte	115
	.byte	95
	.byte	105
	.byte	110
	.byte	102
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__isx__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__isx__RTISTR, 4
ahir_ieee_proposed__float_pkg__valid_fpstate__isx__RTISTR:
	.byte	105
	.byte	115
	.byte	120
	.byte	0
	.align 32
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__RTINAMES, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__RTINAMES, 44
ahir_ieee_proposed__float_pkg__valid_fpstate__RTINAMES:
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__nan__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__quiet_nan__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_inf__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_normal__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_denormal__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__neg_zero__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_zero__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_denormal__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_normal__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__pos_inf__RTISTR
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__isx__RTISTR
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__RTISTR, 14
ahir_ieee_proposed__float_pkg__valid_fpstate__RTISTR:
	.byte	118
	.byte	97
	.byte	108
	.byte	105
	.byte	100
	.byte	95
	.byte	102
	.byte	112
	.byte	115
	.byte	116
	.byte	97
	.byte	116
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__float_pkg__valid_fpstate__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__valid_fpstate__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__valid_fpstate__RTI, 16
ahir_ieee_proposed__float_pkg__valid_fpstate__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__RTISTR
	.long	11
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__RTINAMES
	.type	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTISTR, 19
ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTISTR:
	.byte	102
	.byte	112
	.byte	104
	.byte	100
	.byte	108
	.byte	115
	.byte	121
	.byte	110
	.byte	116
	.byte	104
	.byte	95
	.byte	111
	.byte	114
	.byte	95
	.byte	114
	.byte	101
	.byte	97
	.byte	108
	.byte	0
.globl ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTI, 16
ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTISTR
	.long	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real
	.long	std__standard__boolean__RTI
	.type	ahir_ieee_proposed__float_pkg__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__RTISTR, 10
ahir_ieee_proposed__float_pkg__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	0
	.align 32
	.type	ahir_ieee_proposed__float_pkg__RTIARRAY, @object
	.size	ahir_ieee_proposed__float_pkg__RTIARRAY, 80
ahir_ieee_proposed__float_pkg__RTIARRAY:
	.long	ahir_ieee_proposed__float_pkg__float_exponent_width__RTI
	.long	ahir_ieee_proposed__float_pkg__float_fraction_width__RTI
	.long	ahir_ieee_proposed__float_pkg__float_round_style__RTI
	.long	ahir_ieee_proposed__float_pkg__float_int_conversion_round_style__RTI
	.long	ahir_ieee_proposed__float_pkg__float_denormalize__RTI
	.long	ahir_ieee_proposed__float_pkg__float_check_error__RTI
	.long	ahir_ieee_proposed__float_pkg__float_guard_bits__RTI
	.long	ahir_ieee_proposed__float_pkg__no_warning__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float32__RTI
	.long	ahir_ieee_proposed__float_pkg__float32__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float64__RTI
	.long	ahir_ieee_proposed__float_pkg__float64__RTI
	.long	ahir_ieee_proposed__float_pkg__unresolved_float128__RTI
	.long	ahir_ieee_proposed__float_pkg__float128__RTI
	.long	ahir_ieee_proposed__float_pkg__valid_fpstate__RTI
	.long	ahir_ieee_proposed__float_pkg__fphdlsynth_or_real__RTI
	.long	0
.globl ahir_ieee_proposed__float_pkg__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__RTI, 28
ahir_ieee_proposed__float_pkg__RTI:
	.byte	2
	.byte	1
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__RTISTR
	.long	0
	.long	ahir_ieee_proposed__RTI
	.long	0
	.long	19
	.long	ahir_ieee_proposed__float_pkg__RTIARRAY
	.text
.globl ahir_ieee_proposed__float_pkg__ELAB_SPEC
	.type	ahir_ieee_proposed__float_pkg__ELAB_SPEC, @function
ahir_ieee_proposed__float_pkg__ELAB_SPEC:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movzbl	std__textio__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L36
	call	std__textio__ELAB_BODY
.L36:
	movzbl	ieee__std_logic_1164__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L37
	call	ieee__std_logic_1164__ELAB_BODY
.L37:
	movzbl	ieee__numeric_std__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L38
	call	ieee__numeric_std__ELAB_BODY
.L38:
	movzbl	ahir_ieee_proposed__math_utility_pkg__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L40
	call	ahir_ieee_proposed__math_utility_pkg__ELAB_BODY
.L40:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__ELAB_SPEC, .-ahir_ieee_proposed__float_pkg__ELAB_SPEC
.globl ahir_ieee_proposed__float_pkg__boundary_type__BTR
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__float_pkg__boundary_type__BTR, @object
	.size	ahir_ieee_proposed__float_pkg__boundary_type__BTR, 8
ahir_ieee_proposed__float_pkg__boundary_type__BTR:
	.byte	0
	.byte	3
	.byte	0
	.zero	1
	.long	4
.globl ahir_ieee_proposed__float_pkg__nafp__OT__STB
	.align 4
	.type	ahir_ieee_proposed__float_pkg__nafp__OT__STB, @object
	.size	ahir_ieee_proposed__float_pkg__nafp__OT__STB, 16
ahir_ieee_proposed__float_pkg__nafp__OT__STB:
	.long	0
	.long	0
	.byte	1
	.zero	3
	.long	1
.globl ahir_ieee_proposed__float_pkg__nafp
	.bss
	.type	ahir_ieee_proposed__float_pkg__nafp, @object
	.size	ahir_ieee_proposed__float_pkg__nafp, 1
ahir_ieee_proposed__float_pkg__nafp:
	.zero	1
.globl ahir_ieee_proposed__float_pkg__nslv__OT__STB
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__float_pkg__nslv__OT__STB, @object
	.size	ahir_ieee_proposed__float_pkg__nslv__OT__STB, 16
ahir_ieee_proposed__float_pkg__nslv__OT__STB:
	.long	0
	.long	0
	.byte	1
	.zero	3
	.long	1
.globl ahir_ieee_proposed__float_pkg__nslv
	.bss
	.type	ahir_ieee_proposed__float_pkg__nslv, @object
	.size	ahir_ieee_proposed__float_pkg__nslv, 1
ahir_ieee_proposed__float_pkg__nslv:
	.zero	1
	.section	.rodata
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__normal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__normal__RTISTR, 7
ahir_ieee_proposed__float_pkg__BODY__boundary_type__normal__RTISTR:
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__infinity__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__infinity__RTISTR, 9
ahir_ieee_proposed__float_pkg__BODY__boundary_type__infinity__RTISTR:
	.byte	105
	.byte	110
	.byte	102
	.byte	105
	.byte	110
	.byte	105
	.byte	116
	.byte	121
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__zero__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__zero__RTISTR, 5
ahir_ieee_proposed__float_pkg__BODY__boundary_type__zero__RTISTR:
	.byte	122
	.byte	101
	.byte	114
	.byte	111
	.byte	0
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__denormal__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__denormal__RTISTR, 9
ahir_ieee_proposed__float_pkg__BODY__boundary_type__denormal__RTISTR:
	.byte	100
	.byte	101
	.byte	110
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTINAMES, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTINAMES, 16
ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTINAMES:
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__normal__RTISTR
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__infinity__RTISTR
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__zero__RTISTR
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__denormal__RTISTR
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTISTR, 14
ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTISTR:
	.byte	98
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	97
	.byte	114
	.byte	121
	.byte	95
	.byte	116
	.byte	121
	.byte	112
	.byte	101
	.byte	0
.globl ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTI, 16
ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTI:
	.byte	23
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTISTR
	.long	4
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTINAMES
.globl ahir_ieee_proposed__float_pkg__BODY__nafp__OT__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__nafp__OT__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nafp__OT__RTI, 24
ahir_ieee_proposed__float_pkg__BODY__nafp__OT__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	0
	.long	ahir_ieee_proposed__float_pkg__unresolved_float__RTI
	.long	ahir_ieee_proposed__float_pkg__nafp__OT__STB
	.long	1
	.long	0
	.type	ahir_ieee_proposed__float_pkg__BODY__nafp__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nafp__RTISTR, 5
ahir_ieee_proposed__float_pkg__BODY__nafp__RTISTR:
	.byte	110
	.byte	97
	.byte	102
	.byte	112
	.byte	0
.globl ahir_ieee_proposed__float_pkg__BODY__nafp__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__nafp__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nafp__RTI, 16
ahir_ieee_proposed__float_pkg__BODY__nafp__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__BODY__nafp__RTISTR
	.long	ahir_ieee_proposed__float_pkg__nafp
	.long	ahir_ieee_proposed__float_pkg__BODY__nafp__OT__RTI
.globl ahir_ieee_proposed__float_pkg__BODY__nslv__OT__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__nslv__OT__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nslv__OT__RTI, 24
ahir_ieee_proposed__float_pkg__BODY__nslv__OT__RTI:
	.byte	35
	.byte	0
	.byte	0
	.byte	0
	.long	0
	.long	ieee__std_logic_1164__std_ulogic_vector__RTI
	.long	ahir_ieee_proposed__float_pkg__nslv__OT__STB
	.long	1
	.long	0
	.type	ahir_ieee_proposed__float_pkg__BODY__nslv__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nslv__RTISTR, 5
ahir_ieee_proposed__float_pkg__BODY__nslv__RTISTR:
	.byte	110
	.byte	115
	.byte	108
	.byte	118
	.byte	0
.globl ahir_ieee_proposed__float_pkg__BODY__nslv__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__nslv__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__nslv__RTI, 16
ahir_ieee_proposed__float_pkg__BODY__nslv__RTI:
	.byte	11
	.byte	0
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__BODY__nslv__RTISTR
	.long	ahir_ieee_proposed__float_pkg__nslv
	.long	ahir_ieee_proposed__float_pkg__BODY__nslv__OT__RTI
	.type	ahir_ieee_proposed__float_pkg__BODY__RTISTR, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__RTISTR, 10
ahir_ieee_proposed__float_pkg__BODY__RTISTR:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	0
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__RTIARRAY, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__RTIARRAY, 16
ahir_ieee_proposed__float_pkg__BODY__RTIARRAY:
	.long	ahir_ieee_proposed__float_pkg__BODY__boundary_type__RTI
	.long	ahir_ieee_proposed__float_pkg__BODY__nafp__RTI
	.long	ahir_ieee_proposed__float_pkg__BODY__nslv__RTI
	.long	0
.globl ahir_ieee_proposed__float_pkg__BODY__RTI
	.align 4
	.type	ahir_ieee_proposed__float_pkg__BODY__RTI, @object
	.size	ahir_ieee_proposed__float_pkg__BODY__RTI, 28
ahir_ieee_proposed__float_pkg__BODY__RTI:
	.byte	3
	.byte	1
	.byte	0
	.byte	0
	.long	ahir_ieee_proposed__float_pkg__BODY__RTISTR
	.long	0
	.long	ahir_ieee_proposed__float_pkg__RTI
	.long	0
	.long	3
	.long	ahir_ieee_proposed__float_pkg__BODY__RTIARRAY
	.text
.globl ahir_ieee_proposed__float_pkg__maximumO6
	.type	ahir_ieee_proposed__float_pkg__maximumO6, @function
ahir_ieee_proposed__float_pkg__maximumO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	.L42
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
	jmp	.L43
.L42:
	movl	12(%ebp), %eax
	movl	%eax, -4(%ebp)
.L43:
	movl	-4(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__maximumO6, .-ahir_ieee_proposed__float_pkg__maximumO6
.globl ahir_ieee_proposed__float_pkg__minimumO6
	.type	ahir_ieee_proposed__float_pkg__minimumO6, @function
ahir_ieee_proposed__float_pkg__minimumO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$4, %esp
	movl	8(%ebp), %eax
	cmpl	12(%ebp), %eax
	jle	.L46
	movl	12(%ebp), %eax
	movl	%eax, -4(%ebp)
	jmp	.L47
.L46:
	movl	8(%ebp), %eax
	movl	%eax, -4(%ebp)
.L47:
	movl	-4(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__minimumO6, .-ahir_ieee_proposed__float_pkg__minimumO6
.globl ahir_ieee_proposed__float_pkg__or_reduceO3
	.type	ahir_ieee_proposed__float_pkg__or_reduceO3, @function
ahir_ieee_proposed__float_pkg__or_reduceO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movb	$0, -150(%ebp)
	movb	$0, -149(%ebp)
	movl	$-2147483648, -148(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, (%eax)
	movl	-124(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-124(%ebp), %eax
	movb	$1, 8(%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-156(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	$0, -116(%ebp)
.L51:
	movl	-116(%ebp), %eax
	cmpl	-120(%ebp), %eax
	je	.L50
	movl	-116(%ebp), %edx
	movl	-140(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -116(%ebp)
	jmp	.L51
.L50:
	movb	$0, -133(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L52
	movb	$2, -133(%ebp)
	jmp	.L53
.L52:
	call	__ghdl_stack2_mark
	movl	%eax, -112(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-208(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_ux01O2
	leal	-208(%ebp), %eax
	movl	%eax, -108(%ebp)
.L57:
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L54
	movl	-108(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-140(%ebp), %ecx
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-156(%ebp), %eax
	cmpl	$1, %eax
	je	.L55
	jmp	.L66
.L54:
	movl	$_UI00000000, %eax
	movl	$9998, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L57
.L55:
	leal	-168(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -133(%ebp)
	jmp	.L53
.L66:
	movl	-156(%ebp), %eax
	cmpl	$2, %eax
	jne	.L58
	leal	-168(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -88(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-88(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movb	%al, -133(%ebp)
	jmp	.L53
.L58:
	movl	-156(%ebp), %eax
	leal	1(%eax), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, %edx
	movl	-164(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -148(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-168(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%edx, (%eax)
	movl	-56(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-56(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-56(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	jns	.L59
	movl	$0, -52(%ebp)
	jmp	.L60
.L59:
	movl	-48(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -52(%ebp)
.L60:
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-32(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L61
	movl	$_UI00000000, %eax
	movl	$10005, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L61:
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-32(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -216(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	movb	%al, -150(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-148(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, (%eax)
	movl	-164(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L62
	movl	$0, -24(%ebp)
	jmp	.L63
.L62:
	movl	-20(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L63:
	movl	-28(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -16(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-4(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L64
	movl	$_UI00000000, %eax
	movl	$10006, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L64:
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-4(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -224(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -220(%ebp)
	leal	-224(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	movb	%al, -149(%ebp)
	movzbl	-149(%ebp), %eax
	movb	%al, 4(%esp)
	movzbl	-150(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movb	%al, -133(%ebp)
.L53:
	movzbl	-133(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO3, .-ahir_ieee_proposed__float_pkg__or_reduceO3
.globl ahir_ieee_proposed__float_pkg__or_reduceO2
	.type	ahir_ieee_proposed__float_pkg__or_reduceO2, @function
ahir_ieee_proposed__float_pkg__or_reduceO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO2, .-ahir_ieee_proposed__float_pkg__or_reduceO2
.globl ahir_ieee_proposed__float_pkg__or_reduceO2_RESOLV
	.type	ahir_ieee_proposed__float_pkg__or_reduceO2_RESOLV, @function
ahir_ieee_proposed__float_pkg__or_reduceO2_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L70
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$0, 4(%eax)
	jmp	.L71
.L70:
	movl	-16(%ebp), %eax
	movl	$0, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -12(%ebp)
	cmpl	$0, -12(%ebp)
	jns	.L72
	movl	$0, (%esp)
	call	__ghdl_bound_check_failed_l0
.L72:
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L71:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L74:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L73
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L74
.L73:
	movl	$0, -24(%ebp)
.L77:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L75
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L76
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L76:
	addl	$1, -24(%ebp)
	jmp	.L77
.L75:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO2_RESOLV, .-ahir_ieee_proposed__float_pkg__or_reduceO2_RESOLV
.globl ahir_ieee_proposed__float_pkg__or_reduceO4
	.type	ahir_ieee_proposed__float_pkg__or_reduceO4, @function
ahir_ieee_proposed__float_pkg__or_reduceO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO4, .-ahir_ieee_proposed__float_pkg__or_reduceO4
.globl ahir_ieee_proposed__float_pkg__or_reduceO5
	.type	ahir_ieee_proposed__float_pkg__or_reduceO5, @function
ahir_ieee_proposed__float_pkg__or_reduceO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO5, .-ahir_ieee_proposed__float_pkg__or_reduceO5
.globl ahir_ieee_proposed__float_pkg__and_reduceO1
	.type	ahir_ieee_proposed__float_pkg__and_reduceO1, @function
ahir_ieee_proposed__float_pkg__and_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movb	$0, -150(%ebp)
	movb	$0, -149(%ebp)
	movl	$-2147483648, -148(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, (%eax)
	movl	-124(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-124(%ebp), %eax
	movb	$1, 8(%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-156(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	$0, -116(%ebp)
.L85:
	movl	-116(%ebp), %eax
	cmpl	-120(%ebp), %eax
	je	.L84
	movl	-116(%ebp), %edx
	movl	-140(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -116(%ebp)
	jmp	.L85
.L84:
	movb	$0, -133(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L86
	movb	$3, -133(%ebp)
	jmp	.L87
.L86:
	call	__ghdl_stack2_mark
	movl	%eax, -112(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-208(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_ux01O2
	leal	-208(%ebp), %eax
	movl	%eax, -108(%ebp)
.L91:
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L88
	movl	-108(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-140(%ebp), %ecx
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-156(%ebp), %eax
	cmpl	$1, %eax
	je	.L89
	jmp	.L100
.L88:
	movl	$_UI00000000, %eax
	movl	$10043, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L91
.L89:
	leal	-168(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -133(%ebp)
	jmp	.L87
.L100:
	movl	-156(%ebp), %eax
	cmpl	$2, %eax
	jne	.L92
	leal	-168(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -88(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-88(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -133(%ebp)
	jmp	.L87
.L92:
	movl	-156(%ebp), %eax
	leal	1(%eax), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, %edx
	movl	-164(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -148(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-168(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%edx, (%eax)
	movl	-56(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-56(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-56(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	jns	.L93
	movl	$0, -52(%ebp)
	jmp	.L94
.L93:
	movl	-48(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -52(%ebp)
.L94:
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-32(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L95
	movl	$_UI00000000, %eax
	movl	$10050, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L95:
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-32(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -216(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	movb	%al, -150(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-148(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, (%eax)
	movl	-164(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L96
	movl	$0, -24(%ebp)
	jmp	.L97
.L96:
	movl	-20(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L97:
	movl	-28(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -16(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-4(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L98
	movl	$_UI00000000, %eax
	movl	$10051, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L98:
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-4(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -224(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -220(%ebp)
	leal	-224(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	movb	%al, -149(%ebp)
	movzbl	-149(%ebp), %eax
	movb	%al, 4(%esp)
	movzbl	-150(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -133(%ebp)
.L87:
	movzbl	-133(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__and_reduceO1, .-ahir_ieee_proposed__float_pkg__and_reduceO1
.globl ahir_ieee_proposed__float_pkg__and_reduceO2
	.type	ahir_ieee_proposed__float_pkg__and_reduceO2, @function
ahir_ieee_proposed__float_pkg__and_reduceO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__and_reduceO2, .-ahir_ieee_proposed__float_pkg__and_reduceO2
.globl ahir_ieee_proposed__float_pkg__and_reduceO3
	.type	ahir_ieee_proposed__float_pkg__and_reduceO3, @function
ahir_ieee_proposed__float_pkg__and_reduceO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__and_reduceO3, .-ahir_ieee_proposed__float_pkg__and_reduceO3
.globl ahir_ieee_proposed__float_pkg__xor_reduceO1
	.type	ahir_ieee_proposed__float_pkg__xor_reduceO1, @function
ahir_ieee_proposed__float_pkg__xor_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movb	$0, -150(%ebp)
	movb	$0, -149(%ebp)
	movl	$-2147483648, -148(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, (%eax)
	movl	-124(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-124(%ebp), %eax
	movb	$1, 8(%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-124(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-156(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %ecx
	movl	%ecx, -140(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	$0, -116(%ebp)
.L107:
	movl	-116(%ebp), %eax
	cmpl	-120(%ebp), %eax
	je	.L106
	movl	-116(%ebp), %edx
	movl	-140(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -116(%ebp)
	jmp	.L107
.L106:
	movb	$2, -133(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jle	.L108
	call	__ghdl_stack2_mark
	movl	%eax, -112(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-208(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_ux01O2
	leal	-208(%ebp), %eax
	movl	%eax, -108(%ebp)
.L112:
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L109
	movl	-108(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-140(%ebp), %ecx
	movl	-144(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-156(%ebp), %eax
	cmpl	$1, %eax
	je	.L110
	jmp	.L121
.L109:
	movl	$_UI00000000, %eax
	movl	$10077, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L112
.L110:
	leal	-168(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -133(%ebp)
	jmp	.L108
.L121:
	movl	-156(%ebp), %eax
	cmpl	$2, %eax
	jne	.L113
	leal	-168(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -88(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-88(%ebp), %edx
	movl	-140(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xorO1
	movb	%al, -133(%ebp)
	jmp	.L108
.L113:
	movl	-156(%ebp), %eax
	leal	1(%eax), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, %edx
	movl	-164(%ebp), %eax
	leal	(%edx,%eax), %eax
	movl	%eax, -148(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-168(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%edx, (%eax)
	movl	-56(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-56(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-56(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	jns	.L114
	movl	$0, -52(%ebp)
	jmp	.L115
.L114:
	movl	-48(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -52(%ebp)
.L115:
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-32(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L116
	movl	$_UI00000000, %eax
	movl	$10084, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L116:
	movl	-172(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-32(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -216(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xor_reduceO1
	movb	%al, -150(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-148(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, (%eax)
	movl	-164(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	cmpl	$0, -20(%ebp)
	jns	.L117
	movl	$0, -24(%ebp)
	jmp	.L118
.L117:
	movl	-20(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
.L118:
	movl	-28(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -16(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-4(%ebp), %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L119
	movl	$_UI00000000, %eax
	movl	$10085, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L119:
	movl	-188(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-4(%ebp), %edx
	movl	-140(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -224(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -220(%ebp)
	leal	-224(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xor_reduceO1
	movb	%al, -149(%ebp)
	movzbl	-149(%ebp), %eax
	movb	%al, 4(%esp)
	movzbl	-150(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xorO1
	movb	%al, -133(%ebp)
.L108:
	movzbl	-133(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xor_reduceO1, .-ahir_ieee_proposed__float_pkg__xor_reduceO1
.globl ahir_ieee_proposed__float_pkg__nand_reduceO1
	.type	ahir_ieee_proposed__float_pkg__nand_reduceO1, @function
ahir_ieee_proposed__float_pkg__nand_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nand_reduceO1, .-ahir_ieee_proposed__float_pkg__nand_reduceO1
.globl ahir_ieee_proposed__float_pkg__nor_reduceO1
	.type	ahir_ieee_proposed__float_pkg__nor_reduceO1, @function
ahir_ieee_proposed__float_pkg__nor_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nor_reduceO1, .-ahir_ieee_proposed__float_pkg__nor_reduceO1
.globl ahir_ieee_proposed__float_pkg__xnor_reduceO1
	.type	ahir_ieee_proposed__float_pkg__xnor_reduceO1, @function
ahir_ieee_proposed__float_pkg__xnor_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xor_reduceO1
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xnor_reduceO1, .-ahir_ieee_proposed__float_pkg__xnor_reduceO1
.globl ahir_ieee_proposed__float_pkg__find_leftmostO2
	.type	ahir_ieee_proposed__float_pkg__find_leftmostO2, @function
ahir_ieee_proposed__float_pkg__find_leftmostO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L129
.L137:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-20(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L130
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	jmp	.L131
.L130:
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
.L131:
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -16(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L132
	movl	$_UI00000000, %eax
	movl	$10111, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L132:
	movl	-16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	12(%ebp), %al
	jne	.L133
	movl	-32(%ebp), %eax
	movl	%eax, -36(%ebp)
	jmp	.L134
.L133:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -32(%ebp)
	je	.L129
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L135
	addl	$1, -32(%ebp)
	jmp	.L137
.L135:
	subl	$1, -32(%ebp)
	jmp	.L137
.L129:
	movl	$-1, -36(%ebp)
.L134:
	movl	-36(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__find_leftmostO2, .-ahir_ieee_proposed__float_pkg__find_leftmostO2
.globl ahir_ieee_proposed__float_pkg__qeqO6
	.type	ahir_ieee_proposed__float_pkg__qeqO6, @function
ahir_ieee_proposed__float_pkg__qeqO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$0, -3(%ebp)
	movb	$0, -2(%ebp)
	movzbl	8(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movb	%al, -3(%ebp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movb	%al, -2(%ebp)
	cmpb	$1, -3(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L140
	cmpb	$1, -2(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L140:
	cmpb	$0, -1(%ebp)
	je	.L141
	movb	$1, -17(%ebp)
	jmp	.L142
.L141:
	movzbl	-3(%ebp), %eax
	cmpb	-2(%ebp), %al
	jne	.L143
	movb	$3, -17(%ebp)
	jmp	.L142
.L143:
	movb	$2, -17(%ebp)
.L142:
	movzbl	-17(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qeqO6, .-ahir_ieee_proposed__float_pkg__qeqO6
.globl ahir_ieee_proposed__float_pkg__qnoteqO6
	.type	ahir_ieee_proposed__float_pkg__qnoteqO6, @function
ahir_ieee_proposed__float_pkg__qnoteqO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$8, %esp
	movzbl	12(%ebp), %eax
	movb	%al, 4(%esp)
	movzbl	8(%ebp), %eax
	movb	%al, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO6
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qnoteqO6, .-ahir_ieee_proposed__float_pkg__qnoteqO6
	.section	.rodata
	.align 4
	.type	_UI00000001.4229, @object
	.size	_UI00000001.4229, 12
_UI00000001.4229:
	.long	_UI00000000
	.long	10214
	.long	7
	.align 32
	.type	_UI00000002.4231, @object
	.size	_UI00000002.4231, 47
_UI00000002.4231:
	.byte	83
	.byte	84
	.byte	68
	.byte	95
	.byte	76
	.byte	79
	.byte	71
	.byte	73
	.byte	67
	.byte	95
	.byte	49
	.byte	49
	.byte	54
	.byte	52
	.byte	46
	.byte	34
	.byte	63
	.byte	61
	.byte	34
	.byte	58
	.byte	32
	.byte	110
	.byte	117
	.byte	108
	.byte	108
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	88
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qeqO7__U1__STB.4232, @object
	.size	ahir_ieee_proposed__float_pkg__qeqO7__U1__STB.4232, 16
ahir_ieee_proposed__float_pkg__qeqO7__U1__STB.4232:
	.long	1
	.long	47
	.byte	0
	.zero	3
	.long	47
	.align 4
	.type	_UI00000003.4234, @object
	.size	_UI00000003.4234, 12
_UI00000003.4234:
	.long	_UI00000000
	.long	10219
	.long	7
	.align 32
	.type	_UI00000004.4236, @object
	.size	_UI00000004.4236, 54
_UI00000004.4236:
	.byte	83
	.byte	84
	.byte	68
	.byte	95
	.byte	76
	.byte	79
	.byte	71
	.byte	73
	.byte	67
	.byte	95
	.byte	49
	.byte	49
	.byte	54
	.byte	52
	.byte	46
	.byte	34
	.byte	63
	.byte	61
	.byte	34
	.byte	58
	.byte	32
	.byte	76
	.byte	39
	.byte	76
	.byte	69
	.byte	78
	.byte	71
	.byte	84
	.byte	72
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	76
	.byte	69
	.byte	78
	.byte	71
	.byte	84
	.byte	72
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	88
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qeqO7__U3__STB.4237, @object
	.size	ahir_ieee_proposed__float_pkg__qeqO7__U3__STB.4237, 16
ahir_ieee_proposed__float_pkg__qeqO7__U3__STB.4237:
	.long	1
	.long	54
	.byte	0
	.zero	3
	.long	54
	.text
.globl ahir_ieee_proposed__float_pkg__qeqO7
	.type	ahir_ieee_proposed__float_pkg__qeqO7, @function
ahir_ieee_proposed__float_pkg__qeqO7:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-108(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	$1, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$0, 8(%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-72(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-96(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	movl	-96(%ebp), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L148
	movl	$_UI00000000, %eax
	movl	$10209, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L148:
	leal	-124(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	$1, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-68(%ebp), %eax
	movb	$0, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-112(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-112(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L149
	movl	$_UI00000000, %eax
	movl	$10210, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L149:
	movb	$0, -74(%ebp)
	movb	$0, -73(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -61(%ebp)
	cmpb	$0, -61(%ebp)
	jne	.L150
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -61(%ebp)
.L150:
	cmpb	$0, -61(%ebp)
	je	.L151
	movl	$_UI00000002.4231, %eax
	movl	%eax, -132(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qeqO7__U1__STB.4232, -128(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000001.4229, 8(%esp)
	movb	$1, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -145(%ebp)
	jmp	.L152
.L151:
	movl	-96(%ebp), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %eax
	cmpl	%eax, %edx
	je	.L153
	movl	$_UI00000004.4236, %eax
	movl	%eax, -140(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qeqO7__U3__STB.4237, -136(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000003.4234, 8(%esp)
	movb	$1, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -145(%ebp)
	jmp	.L152
.L153:
	movb	$3, -74(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L154
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L155
.L154:
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L155:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L156
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L157
.L156:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
.L157:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	cmpl	-52(%ebp), %eax
	jg	.L158
.L165:
	leal	-108(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L159
	movl	$_UI00000000, %eax
	movl	$10225, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L159:
	movl	-24(%ebp), %eax
	movl	%eax, -36(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -12(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L160
	movl	$_UI00000000, %eax
	movl	$10225, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L160:
	movl	-12(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %edx
	movl	-80(%ebp), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-36(%ebp), %edx
	movl	-88(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO6
	movb	%al, -73(%ebp)
	cmpb	$0, -73(%ebp)
	jne	.L161
	movb	$0, -145(%ebp)
	jmp	.L152
.L161:
	cmpb	$1, -73(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L162
	cmpb	$1, -74(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L162:
	cmpb	$0, -1(%ebp)
	je	.L163
	movb	$1, -74(%ebp)
	jmp	.L164
.L163:
	movzbl	-73(%ebp), %eax
	movb	%al, 4(%esp)
	movzbl	-74(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -74(%ebp)
.L164:
	movl	-60(%ebp), %eax
	cmpl	-52(%ebp), %eax
	je	.L158
	addl	$1, -60(%ebp)
	jmp	.L165
.L158:
	movzbl	-74(%ebp), %eax
	movb	%al, -145(%ebp)
.L152:
	movzbl	-145(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qeqO7, .-ahir_ieee_proposed__float_pkg__qeqO7
.globl ahir_ieee_proposed__float_pkg__is_xO1
	.type	ahir_ieee_proposed__float_pkg__is_xO1, @function
ahir_ieee_proposed__float_pkg__is_xO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__is_xO2
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__is_xO1, .-ahir_ieee_proposed__float_pkg__is_xO1
.globl ahir_ieee_proposed__float_pkg__is_xO2
	.type	ahir_ieee_proposed__float_pkg__is_xO2, @function
ahir_ieee_proposed__float_pkg__is_xO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	leal	-24(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__is_xO2
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__is_xO2, .-ahir_ieee_proposed__float_pkg__is_xO2
	.section	.rodata
	.align 4
	.type	_UI00000005.4386, @object
	.size	_UI00000005.4386, 12
_UI00000005.4386:
	.long	_UI00000000
	.long	10254
	.long	7
	.align 32
	.type	_UI00000006.4388, @object
	.size	_UI00000006.4388, 55
_UI00000006.4388:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	32
	.byte	85
	.byte	110
	.byte	98
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	101
	.byte	100
	.byte	32
	.byte	110
	.byte	117
	.byte	109
	.byte	98
	.byte	101
	.byte	114
	.byte	32
	.byte	112
	.byte	97
	.byte	115
	.byte	115
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	119
	.byte	97
	.byte	115
	.byte	32
	.byte	97
	.byte	32
	.byte	108
	.byte	105
	.byte	116
	.byte	101
	.byte	114
	.byte	97
	.byte	108
	.byte	32
	.byte	117
	.byte	115
	.byte	101
	.byte	100
	.byte	63
	.align 4
	.type	ahir_ieee_proposed__float_pkg__mine__U1__STB.4389, @object
	.size	ahir_ieee_proposed__float_pkg__mine__U1__STB.4389, 16
ahir_ieee_proposed__float_pkg__mine__U1__STB.4389:
	.long	1
	.long	55
	.byte	0
	.zero	3
	.long	55
	.text
.globl ahir_ieee_proposed__float_pkg__mine
	.type	ahir_ieee_proposed__float_pkg__mine, @function
ahir_ieee_proposed__float_pkg__mine:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	cmpl	$-2147483648, 8(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L172
	cmpl	$-2147483648, 12(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L172:
	cmpb	$0, -1(%ebp)
	je	.L173
	movl	$_UI00000006.4388, %eax
	movl	%eax, -12(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__mine__U1__STB.4389, -8(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000005.4386, 8(%esp)
	movb	$2, 4(%esp)
	leal	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movl	$0, -20(%ebp)
	jmp	.L174
.L173:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__minimumO6
	movl	%eax, -20(%ebp)
.L174:
	movl	-20(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__mine, .-ahir_ieee_proposed__float_pkg__mine
.globl ahir_ieee_proposed__float_pkg__gen_expon_base
	.type	ahir_ieee_proposed__float_pkg__gen_expon_base, @function
ahir_ieee_proposed__float_pkg__gen_expon_base:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	12(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	-52(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L177
	movl	$0, -48(%ebp)
	jmp	.L178
.L177:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L178:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L180:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L179
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L180
.L179:
	movl	%esp, %eax
	movl	%eax, -100(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %ecx
	movl	%ecx, -32(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$0, -24(%ebp)
.L182:
	movl	-24(%ebp), %eax
	cmpl	-28(%ebp), %eax
	je	.L181
	movl	-24(%ebp), %edx
	movl	-32(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -24(%ebp)
	jmp	.L182
.L181:
	movl	-32(%ebp), %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-100(%ebp), %esp
	leal	-76(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	12(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -12(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L183
	movl	$_UI00000000, %eax
	movl	$10269, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L183:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$2, (%eax,%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__gen_expon_base, .-ahir_ieee_proposed__float_pkg__gen_expon_base
.globl ahir_ieee_proposed__float_pkg__log2O1
	.type	ahir_ieee_proposed__float_pkg__log2O1, @function
ahir_ieee_proposed__float_pkg__log2O1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movl	$0, -20(%ebp)
	movl	$0, -16(%ebp)
	movl	8(%ebp), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, -12(%ebp)
	cmpl	$0, -12(%ebp)
	jns	.L186
	movl	$1, (%esp)
	call	__ghdl_bound_check_failed_l0
.L186:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
.L190:
	cmpl	$0, -20(%ebp)
	setg	%al
	xorl	$1, %eax
	testb	%al, %al
	jne	.L187
	movl	-20(%ebp), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, -8(%ebp)
	cmpl	$0, -8(%ebp)
	jns	.L188
	movl	$2, (%esp)
	call	__ghdl_bound_check_failed_l0
.L188:
	movl	-8(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -4(%ebp)
	cmpl	$0, -4(%ebp)
	jns	.L189
	movl	$3, (%esp)
	call	__ghdl_bound_check_failed_l0
.L189:
	movl	-4(%ebp), %eax
	movl	%eax, -16(%ebp)
	jmp	.L190
.L187:
	movl	-16(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__log2O1, .-ahir_ieee_proposed__float_pkg__log2O1
.globl ahir_ieee_proposed__float_pkg__log2O2
	.type	ahir_ieee_proposed__float_pkg__log2O2, @function
ahir_ieee_proposed__float_pkg__log2O2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movl	8(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -20(%ebp)
	fldl	.LC0
	fstpl	-16(%ebp)
	movl	$0, -8(%ebp)
	fldl	-24(%ebp)
	fld1
	fucompp
	fnstsw	%ax
	sahf
	sete	%al
	setnp	%dl
	andl	%edx, %eax
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L193
	fldl	-24(%ebp)
	fldz
	fucompp
	fnstsw	%ax
	sahf
	sete	%al
	setnp	%dl
	andl	%edx, %eax
	movb	%al, -1(%ebp)
.L193:
	cmpb	$0, -1(%ebp)
	je	.L194
	movl	$0, -28(%ebp)
	jmp	.L195
.L194:
	fldl	-24(%ebp)
	fstpl	-16(%ebp)
	fldl	-24(%ebp)
	fld1
	fxch	%st(1)
	fucompp
	fnstsw	%ax
	sahf
	jbe	.L196
.L199:
	fldl	-16(%ebp)
	fldl	.LC3
	fxch	%st(1)
	fucompp
	fnstsw	%ax
	sahf
	setae	%al
	xorl	$1, %eax
	testb	%al, %al
	jne	.L198
	fldl	-16(%ebp)
	fldl	.LC3
	fdivrp	%st, %st(1)
	fstpl	-16(%ebp)
	addl	$1, -8(%ebp)
	jmp	.L199
.L198:
	movl	-8(%ebp), %eax
	movl	%eax, -28(%ebp)
	jmp	.L195
.L196:
	fldl	-16(%ebp)
	fld1
	fucompp
	fnstsw	%ax
	testb	$69, %ah
	sete	%al
	xorl	$1, %eax
	testb	%al, %al
	jne	.L200
	fldl	-16(%ebp)
	fadd	%st(0), %st
	fstpl	-16(%ebp)
	subl	$1, -8(%ebp)
	jmp	.L196
.L200:
	movl	-8(%ebp), %eax
	movl	%eax, -28(%ebp)
.L195:
	movl	-28(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__log2O2, .-ahir_ieee_proposed__float_pkg__log2O2
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528, @object
	.size	ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528, 16
ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528:
	.long	12
	.long	0
	.byte	1
	.zero	3
	.long	13
	.align 4
	.type	ahir_ieee_proposed__float_pkg__test_boundary__exp_ext_min__OT__STB.4531, @object
	.size	ahir_ieee_proposed__float_pkg__test_boundary__exp_ext_min__OT__STB.4531, 16
ahir_ieee_proposed__float_pkg__test_boundary__exp_ext_min__OT__STB.4531:
	.long	12
	.long	0
	.byte	1
	.zero	3
	.long	13
	.text
.globl ahir_ieee_proposed__float_pkg__test_boundary
	.type	ahir_ieee_proposed__float_pkg__test_boundary, @function
ahir_ieee_proposed__float_pkg__test_boundary:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$232, %esp
	movl	12(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -196(%ebp)
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	movl	8(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	leal	-64(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	24(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-36(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-36(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -28(%ebp)
	cmpl	$0, -28(%ebp)
	jns	.L203
	movl	$0, -32(%ebp)
	jmp	.L204
.L203:
	movl	-28(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -32(%ebp)
.L204:
	movl	-36(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %ecx
	movl	%ecx, -44(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-100(%ebp), %eax
	movl	%eax, -20(%ebp)
.L207:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L205
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	$13, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	$1, 8(%esp)
	leal	-116(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-108(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-108(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L206
.L205:
	movl	$_UI00000000, %eax
	movl	$10320, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L207
.L206:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$13, %eax
	jne	.L208
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	$13, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-77(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	leal	-77(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528, -144(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-140(%ebp), %eax
	movl	%eax, -4(%ebp)
	jmp	.L209
.L208:
	movl	$_UI00000000, %eax
	movl	$10322, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L206
.L209:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$13, %eax
	jne	.L210
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	$13, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-90(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	$-2147483648, -40(%ebp)
	fldl	-200(%ebp)
	fstpl	(%esp)
	call	ahir_ieee_proposed__float_pkg__log2O2
	movl	%eax, -40(%ebp)
	fldl	-200(%ebp)
	fldz
	fxch	%st(1)
	fucompp
	fnstsw	%ax
	sahf
	jp	.L226
	je	.L211
.L226:
	jmp	.L225
.L210:
	movl	$_UI00000000, %eax
	movl	$10324, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L209
.L211:
	movl	8(%ebp), %eax
	movb	$2, (%eax)
	jmp	.L213
.L225:
	cmpl	$11, 24(%ebp)
	jle	.L214
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	jmp	.L213
.L214:
	leal	-77(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528, -152(%ebp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	cmpl	%eax, -40(%ebp)
	jge	.L215
	cmpb	$0, 28(%ebp)
	je	.L216
	leal	-90(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__test_boundary__exp_ext_min__OT__STB.4531, -160(%ebp)
	leal	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	cmpl	%eax, -40(%ebp)
	jge	.L217
	movl	8(%ebp), %eax
	movb	$2, (%eax)
	jmp	.L213
.L217:
	movl	8(%ebp), %eax
	movb	$3, (%eax)
	jmp	.L213
.L216:
	leal	-77(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__test_boundary__exp_min__OT__STB.4528, -168(%ebp)
	leal	-172(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	subl	$1, %eax
	cmpl	%eax, -40(%ebp)
	jge	.L220
	movl	8(%ebp), %eax
	movb	$2, (%eax)
	jmp	.L213
.L220:
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	jmp	.L213
.L215:
	cmpl	$11, 24(%ebp)
	jge	.L221
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -180(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-180(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	addl	$1, %eax
	cmpl	%eax, -40(%ebp)
	jle	.L222
	movl	8(%ebp), %eax
	movb	$1, (%eax)
	jmp	.L213
.L222:
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	jmp	.L213
.L221:
	movl	8(%ebp), %eax
	movb	$0, (%eax)
.L213:
	movl	8(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%edx)
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__test_boundary, .-ahir_ieee_proposed__float_pkg__test_boundary
.globl ahir_ieee_proposed__float_pkg__check_round
	.type	ahir_ieee_proposed__float_pkg__check_round, @function
ahir_ieee_proposed__float_pkg__check_round:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	movb	$0, -94(%ebp)
	movb	$0, -93(%ebp)
	movb	$0, -94(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jle	.L228
	movzbl	20(%ebp), %eax
	movb	%al, -105(%ebp)
	leal	-105(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	$ieee__numeric_std__unsigned__BR1, -100(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -92(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__unsigned_CONCAT
	leal	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movb	%al, -93(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	24(%ebp), %eax
	movb	%al, -145(%ebp)
	cmpb	$1, -145(%ebp)
	je	.L230
	cmpb	$1, -145(%ebp)
	jb	.L229
	cmpb	$2, -145(%ebp)
	je	.L231
	jmp	.L228
.L229:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L232
	movl	-72(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
	jmp	.L233
.L232:
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
.L233:
	movl	-80(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	movl	-84(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L234
	movl	-60(%ebp), %eax
	movl	-64(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -68(%ebp)
	jmp	.L235
.L234:
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -68(%ebp)
.L235:
	movl	-68(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-68(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -76(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L236
	movl	$_UI00000000, %eax
	movl	$10381, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L236:
	movl	-76(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$3, %al
	jne	.L228
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$1, %eax
	jle	.L238
	leal	-132(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L239
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L240
.L239:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L240:
	movl	-44(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L241
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L242
.L241:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L242:
	movl	-48(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-48(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	jns	.L243
	movl	$0, -28(%ebp)
	jmp	.L244
.L243:
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -28(%ebp)
.L244:
	movl	-48(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-120(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	leal	-132(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-20(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L245
	movl	$_UI00000000, %eax
	movl	$10383, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L245:
	movl	-20(%ebp), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-8(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L246
	movl	$_UI00000000, %eax
	movl	$10383, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L246:
	movl	-120(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	addl	-8(%ebp), %eax
	movl	%eax, -140(%ebp)
	leal	-132(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	cmpb	$3, %al
	sete	%al
	movb	%al, -53(%ebp)
	cmpb	$0, -53(%ebp)
	jne	.L247
	cmpb	$3, 20(%ebp)
	sete	%al
	movb	%al, -53(%ebp)
.L247:
	movzbl	-53(%ebp), %eax
	movb	%al, -54(%ebp)
	cmpb	$0, -54(%ebp)
	jne	.L248
	cmpb	$3, 8(%ebp)
	sete	%al
	movb	%al, -54(%ebp)
.L248:
	cmpb	$0, -54(%ebp)
	je	.L228
	movb	$1, -94(%ebp)
	jmp	.L228
.L238:
	cmpb	$3, 8(%ebp)
	sete	%al
	movb	%al, -3(%ebp)
	cmpb	$0, -3(%ebp)
	jne	.L250
	cmpb	$3, 20(%ebp)
	sete	%al
	movb	%al, -3(%ebp)
.L250:
	movzbl	-3(%ebp), %eax
	movb	%al, -94(%ebp)
	jmp	.L228
.L230:
	cmpb	$3, -93(%ebp)
	sete	%al
	movb	%al, -2(%ebp)
	cmpb	$1, -2(%ebp)
	jne	.L251
	cmpb	$2, 12(%ebp)
	sete	%al
	movb	%al, -2(%ebp)
.L251:
	cmpb	$0, -2(%ebp)
	je	.L228
	movb	$1, -94(%ebp)
	jmp	.L228
.L231:
	cmpb	$3, -93(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$1, -1(%ebp)
	jne	.L253
	cmpb	$3, 12(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L253:
	cmpb	$0, -1(%ebp)
	je	.L228
	movb	$1, -94(%ebp)
.L228:
	movzbl	-94(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__check_round, .-ahir_ieee_proposed__float_pkg__check_round
.globl ahir_ieee_proposed__float_pkg__fp_round
	.type	ahir_ieee_proposed__float_pkg__fp_round, @function
ahir_ieee_proposed__float_pkg__fp_round:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO2
	cmpb	$3, %al
	jne	.L256
	call	__ghdl_stack2_mark
	movl	%eax, -36(%ebp)
	movl	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-44(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L257
	movl	$4, (%esp)
	call	__ghdl_bound_check_failed_l0
.L257:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L258
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L259
.L258:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L259:
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	leal	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_unsigned
	leal	-52(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L260
	movl	$5, (%esp)
	call	__ghdl_bound_check_failed_l0
.L260:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L264
.L256:
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L262
	movl	$6, (%esp)
	call	__ghdl_bound_check_failed_l0
.L262:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	20(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO3
	leal	-60(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L263
	movl	$7, (%esp)
	call	__ghdl_bound_check_failed_l0
.L263:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
.L264:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__fp_round, .-ahir_ieee_proposed__float_pkg__fp_round
	.section	.rodata
	.align 4
	.type	_UI00000007.4995, @object
	.size	_UI00000007.4995, 12
_UI00000007.4995:
	.long	_UI00000000
	.long	10458
	.long	9
	.align 32
	.type	_UI00000008.4997, @object
	.size	_UI00000008.4997, 70
_UI00000008.4997:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	66
	.byte	82
	.byte	69
	.byte	65
	.byte	75
	.byte	95
	.byte	78
	.byte	85
	.byte	77
	.byte	66
	.byte	69
	.byte	82
	.byte	58
	.byte	32
	.byte	77
	.byte	101
	.byte	116
	.byte	97
	.byte	32
	.byte	115
	.byte	116
	.byte	97
	.byte	116
	.byte	101
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	32
	.byte	105
	.byte	110
	.byte	32
	.byte	102
	.byte	112
	.byte	95
	.byte	98
	.byte	114
	.byte	101
	.byte	97
	.byte	107
	.byte	95
	.byte	110
	.byte	117
	.byte	109
	.byte	98
	.byte	101
	.byte	114
	.byte	32
	.byte	112
	.byte	114
	.byte	111
	.byte	99
	.byte	101
	.byte	115
	.byte	115
	.align 4
	.type	ahir_ieee_proposed__float_pkg__break_numberO2__U8__STB.4998, @object
	.size	ahir_ieee_proposed__float_pkg__break_numberO2__U8__STB.4998, 16
ahir_ieee_proposed__float_pkg__break_numberO2__U8__STB.4998:
	.long	1
	.long	70
	.byte	0
	.zero	3
	.long	70
	.text
.globl ahir_ieee_proposed__float_pkg__break_numberO2
	.type	ahir_ieee_proposed__float_pkg__break_numberO2, @function
ahir_ieee_proposed__float_pkg__break_numberO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$692, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L266
	movl	-392(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -396(%ebp)
	jmp	.L267
.L266:
	movl	-392(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -396(%ebp)
.L267:
	movl	-396(%ebp), %eax
	negl	%eax
	movl	%eax, -428(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -384(%ebp)
	movl	-384(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L268
	movl	-384(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -388(%ebp)
	jmp	.L269
.L268:
	movl	-384(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -388(%ebp)
.L269:
	movl	-388(%ebp), %eax
	movl	%eax, -424(%ebp)
	leal	-444(%ebp), %eax
	movl	%eax, -380(%ebp)
	movl	-424(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-380(%ebp), %eax
	movl	%edx, (%eax)
	movl	-380(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-380(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-380(%ebp), %eax
	movl	(%eax), %edx
	movl	-380(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -372(%ebp)
	cmpl	$0, -372(%ebp)
	jns	.L270
	movl	$0, -376(%ebp)
	jmp	.L271
.L270:
	movl	-372(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -376(%ebp)
.L271:
	movl	-380(%ebp), %edx
	movl	-376(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-432(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-420(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -676(%ebp)
	movl	-676(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -676(%ebp)
	movl	-676(%ebp), %edx
	movl	%edx, -416(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -368(%ebp)
	movl	-424(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-500(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-500(%ebp), %eax
	movl	%eax, -364(%ebp)
.L274:
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-432(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L272
	movl	-364(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-416(%ebp), %ecx
	movl	-420(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-368(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-460(%ebp), %eax
	movl	%eax, -360(%ebp)
	movl	24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %eax
	movl	(%eax), %edx
	movl	-360(%ebp), %eax
	movl	%edx, (%eax)
	movl	-356(%ebp), %eax
	movl	4(%eax), %edx
	movl	-360(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-356(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-360(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-356(%ebp), %eax
	movl	12(%eax), %edx
	movl	-360(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-448(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	-412(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %ecx
	movl	%ecx, -672(%ebp)
	movl	-672(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -672(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -408(%ebp)
	movl	-448(%ebp), %eax
	movl	%eax, -352(%ebp)
	movl	$0, -348(%ebp)
	jmp	.L273
.L272:
	movl	$_UI00000000, %eax
	movl	$10436, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L274
.L273:
	movl	-348(%ebp), %eax
	cmpl	-352(%ebp), %eax
	je	.L275
	movl	-348(%ebp), %edx
	movl	-408(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -348(%ebp)
	jmp	.L273
.L275:
	leal	-476(%ebp), %eax
	movl	%eax, -344(%ebp)
	movl	-428(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-344(%ebp), %eax
	movl	%edx, (%eax)
	movl	-344(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-344(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-344(%ebp), %eax
	movl	(%eax), %edx
	movl	-344(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -336(%ebp)
	cmpl	$0, -336(%ebp)
	jns	.L276
	movl	$0, -340(%ebp)
	jmp	.L277
.L276:
	movl	-336(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -340(%ebp)
.L277:
	movl	-344(%ebp), %edx
	movl	-340(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-464(%ebp), %eax
	movl	%eax, -404(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -332(%ebp)
	leal	-476(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-332(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-328(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L278
	movl	$_UI00000000, %eax
	movl	$10439, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L278:
	movl	-332(%ebp), %eax
	movl	(%eax), %edx
	movl	-328(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -324(%ebp)
	movl	-324(%ebp), %eax
	movl	%eax, -320(%ebp)
	movl	-324(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-328(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-320(%ebp), %edx
	movl	-332(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L279
	movl	$_UI00000000, %eax
	movl	$10439, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L279:
	call	__ghdl_stack2_mark
	movl	%eax, -316(%ebp)
	leal	-524(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-288(%ebp), %eax
	movl	$-1, (%eax)
	movl	-428(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-288(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-288(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-288(%ebp), %eax
	movl	(%eax), %edx
	movl	-288(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -280(%ebp)
	cmpl	$0, -280(%ebp)
	jns	.L280
	movl	$0, -284(%ebp)
	jmp	.L281
.L280:
	movl	-280(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -284(%ebp)
.L281:
	movl	-288(%ebp), %edx
	movl	-284(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-512(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -308(%ebp)
	leal	-524(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-308(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-304(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L282
	movl	$_UI00000000, %eax
	movl	$10440, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L282:
	movl	-308(%ebp), %eax
	movl	(%eax), %edx
	movl	-304(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -300(%ebp)
	movl	-300(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	-300(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-304(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-296(%ebp), %edx
	movl	-308(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L283
	movl	$_UI00000000, %eax
	movl	$10440, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L283:
	movl	-512(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	addl	-296(%ebp), %eax
	movl	%eax, -532(%ebp)
	leal	-524(%ebp), %eax
	movl	%eax, -528(%ebp)
	leal	-532(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-508(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-540(%ebp), %eax
	movl	%eax, -276(%ebp)
	leal	-508(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -540(%ebp)
	leal	-556(%ebp), %eax
	movl	%eax, -536(%ebp)
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -268(%ebp)
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movl	(%eax), %edx
	movl	-268(%ebp), %eax
	movl	%edx, (%eax)
	movl	-264(%ebp), %eax
	movl	4(%eax), %edx
	movl	-268(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-264(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-268(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-264(%ebp), %eax
	movl	12(%eax), %edx
	movl	-268(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-540(%ebp), %eax
	movl	%eax, -292(%ebp)
.L289:
	movl	-292(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-464(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L284
	movl	-292(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	20(%ebp), %eax
	movl	(%eax), %eax
	addl	-320(%ebp), %eax
	movl	%eax, %edx
	movl	-404(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-316(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpb	$9, 12(%ebp)
	ja	.L285
	movsbl	12(%ebp),%ecx
	movl	$1, %eax
	movl	%eax, %edx
	sall	%cl, %edx
	movl	%edx, -680(%ebp)
	movl	-680(%ebp), %eax
	andl	$144, %eax
	testl	%eax, %eax
	jne	.L287
	movl	-680(%ebp), %eax
	andl	$780, %eax
	testl	%eax, %eax
	jne	.L286
	movl	-680(%ebp), %eax
	andl	$96, %eax
	testl	%eax, %eax
	jne	.L288
	jmp	.L285
.L284:
	movl	$_UI00000000, %eax
	movl	$10440, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L289
.L288:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -256(%ebp)
	movl	-428(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-256(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -240(%ebp)
	movl	-256(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L290
	movl	-240(%ebp), %eax
	movl	-244(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -248(%ebp)
	jmp	.L291
.L290:
	movl	-244(%ebp), %eax
	movl	-240(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -248(%ebp)
.L291:
	movl	-248(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-248(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-256(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -252(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L292
	movl	$_UI00000000, %eax
	movl	$10443, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L292:
	movl	-252(%ebp), %eax
	movl	%eax, -260(%ebp)
	movl	20(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	movb	$2, (%edx,%eax)
	call	__ghdl_stack2_mark
	movl	%eax, -236(%ebp)
	movl	-432(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-416(%ebp), %eax
	movl	%eax, -572(%ebp)
	leal	-444(%ebp), %eax
	movl	%eax, -568(%ebp)
	leal	-572(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-564(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	leal	-564(%ebp), %eax
	movl	%eax, -232(%ebp)
.L295:
	movl	-232(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-448(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L293
	movl	-232(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-408(%ebp), %ecx
	movl	-412(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-236(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L294
.L293:
	movl	$_UI00000000, %eax
	movl	$10444, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L295
.L287:
	cmpb	$0, 16(%ebp)
	je	.L296
	call	__ghdl_stack2_mark
	movl	%eax, -228(%ebp)
	movl	-432(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-416(%ebp), %eax
	movl	%eax, -588(%ebp)
	leal	-444(%ebp), %eax
	movl	%eax, -584(%ebp)
	leal	-588(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-580(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	leal	-580(%ebp), %eax
	movl	%eax, -224(%ebp)
.L300:
	movl	-224(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-448(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L297
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-408(%ebp), %ecx
	movl	-412(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-228(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -216(%ebp)
	movl	-428(%ebp), %eax
	movl	%eax, -204(%ebp)
	movl	-216(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -200(%ebp)
	movl	-216(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L298
	jmp	.L333
.L297:
	movl	$_UI00000000, %eax
	movl	$10447, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L300
.L298:
	movl	-200(%ebp), %eax
	movl	-204(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -208(%ebp)
	jmp	.L301
.L333:
	movl	-204(%ebp), %eax
	movl	-200(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -208(%ebp)
.L301:
	movl	-208(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	-208(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-216(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -212(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L302
	movl	$_UI00000000, %eax
	movl	$10448, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L302:
	movl	-212(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	20(%ebp), %eax
	movl	(%eax), %edx
	movl	-220(%ebp), %eax
	movb	$2, (%edx,%eax)
	jmp	.L294
.L296:
	call	__ghdl_stack2_mark
	movl	%eax, -196(%ebp)
	movl	-432(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-416(%ebp), %eax
	movl	%eax, -612(%ebp)
	leal	-444(%ebp), %eax
	movl	%eax, -608(%ebp)
	leal	-612(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-604(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	$1, 8(%esp)
	leal	-604(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-596(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-596(%ebp), %eax
	movl	%eax, -192(%ebp)
.L307:
	movl	-192(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-448(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L304
	movl	-192(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-408(%ebp), %ecx
	movl	-412(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-196(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -184(%ebp)
	movl	-428(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-184(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -168(%ebp)
	movl	-184(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L305
	jmp	.L334
.L304:
	movl	$_UI00000000, %eax
	movl	$10450, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L307
.L305:
	movl	-168(%ebp), %eax
	movl	-172(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -176(%ebp)
	jmp	.L308
.L334:
	movl	-172(%ebp), %eax
	movl	-168(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -176(%ebp)
.L308:
	movl	-176(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-176(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -180(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L309
	movl	$_UI00000000, %eax
	movl	$10451, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L309:
	movl	-180(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	20(%ebp), %eax
	movl	(%eax), %edx
	movl	-188(%ebp), %eax
	movb	$3, (%edx,%eax)
	jmp	.L294
.L286:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -160(%ebp)
	movl	-428(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-160(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-160(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L310
	movl	-144(%ebp), %eax
	movl	-148(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -152(%ebp)
	jmp	.L311
.L310:
	movl	-148(%ebp), %eax
	movl	-144(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -152(%ebp)
.L311:
	movl	-152(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	-152(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -156(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L312
	movl	$_UI00000000, %eax
	movl	$10454, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L312:
	movl	-156(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	20(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movb	$3, (%edx,%eax)
	leal	-492(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	-424(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%edx, (%eax)
	movl	-140(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-140(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-140(%ebp), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -132(%ebp)
	cmpl	$0, -132(%ebp)
	jns	.L313
	movl	$0, -136(%ebp)
	jmp	.L314
.L313:
	movl	-132(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -136(%ebp)
.L314:
	movl	-140(%ebp), %edx
	movl	-136(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-480(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -128(%ebp)
	leal	-492(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	-128(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-124(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L315
	movl	$_UI00000000, %eax
	movl	$10455, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L315:
	movl	-128(%ebp), %eax
	movl	(%eax), %edx
	movl	-124(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-120(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-124(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-116(%ebp), %edx
	movl	-128(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L316
	movl	$_UI00000000, %eax
	movl	$10455, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L316:
	leal	-620(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	addl	-116(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -620(%ebp)
	leal	-636(%ebp), %eax
	movl	%eax, -616(%ebp)
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	leal	-492(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, (%eax)
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-100(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-96(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-620(%ebp), %eax
	movl	%eax, -112(%ebp)
.L320:
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-448(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L317
	movl	-112(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-408(%ebp), %ecx
	movl	-412(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-460(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-424(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -76(%ebp)
	movl	-88(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	movl	-88(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L318
	jmp	.L335
.L317:
	movl	$_UI00000000, %eax
	movl	$10455, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L320
.L318:
	movl	-72(%ebp), %eax
	movl	-76(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -80(%ebp)
	jmp	.L321
.L335:
	movl	-76(%ebp), %eax
	movl	-72(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -80(%ebp)
.L321:
	movl	-80(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-80(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -84(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L322
	movl	$_UI00000000, %eax
	movl	$10456, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L322:
	movl	-84(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-460(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-424(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L323
	movl	-48(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
	jmp	.L324
.L323:
	movl	-52(%ebp), %eax
	movl	-48(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
.L324:
	movl	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -60(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L325
	movl	$_UI00000000, %eax
	movl	$10456, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L325:
	movl	-60(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-92(%ebp), %ebx
	movl	-68(%ebp), %edx
	movl	-408(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-408(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	jmp	.L294
.L285:
	movl	$_UI00000008.4997, %eax
	movl	%eax, -644(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__break_numberO2__U8__STB.4998, -640(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000007.4995, 8(%esp)
	movb	$1, 4(%esp)
	leal	-644(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -664(%ebp)
	movl	-412(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %edx
	movl	%edx, -44(%ebp)
	movl	-448(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L327:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L326
	movl	-36(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L327
.L326:
	movl	-44(%ebp), %edx
	movl	-408(%ebp), %ecx
	movl	-412(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-664(%ebp), %esp
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-428(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L328
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L329
.L328:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L329:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L330
	movl	$_UI00000000, %eax
	movl	$10465, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L330:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movb	$3, (%edx,%eax)
.L294:
	movl	-448(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -652(%ebp)
	leal	-460(%ebp), %eax
	movl	%eax, -648(%ebp)
	leal	-652(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L331
	movl	$8, (%esp)
	call	__ghdl_bound_check_failed_l0
.L331:
	movl	24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	24(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__break_numberO2, .-ahir_ieee_proposed__float_pkg__break_numberO2
	.section	.rodata
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_to_unsigned__remainder__OT__STB.5337, @object
	.size	ahir_ieee_proposed__float_pkg__float_to_unsigned__remainder__OT__STB.5337, 16
ahir_ieee_proposed__float_pkg__float_to_unsigned__remainder__OT__STB.5337:
	.long	2
	.long	0
	.byte	1
	.zero	3
	.long	3
	.type	_UI00000009.5502, @object
	.size	_UI00000009.5502, 3
_UI00000009.5502:
	.byte	2
	.byte	2
	.byte	2
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_to_unsigned__U10__STB.5503, @object
	.size	ahir_ieee_proposed__float_pkg__float_to_unsigned__U10__STB.5503, 16
ahir_ieee_proposed__float_pkg__float_to_unsigned__U10__STB.5503:
	.long	0
	.long	2
	.byte	0
	.zero	3
	.long	3
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_to_unsigned__U13__STB.5543, @object
	.size	ahir_ieee_proposed__float_pkg__float_to_unsigned__U13__STB.5543, 16
ahir_ieee_proposed__float_pkg__float_to_unsigned__U13__STB.5543:
	.long	2
	.long	0
	.byte	1
	.zero	3
	.long	3
	.align 4
	.type	ahir_ieee_proposed__float_pkg__float_to_unsigned__U14__STB.5558, @object
	.size	ahir_ieee_proposed__float_pkg__float_to_unsigned__U14__STB.5558, 16
ahir_ieee_proposed__float_pkg__float_to_unsigned__U14__STB.5558:
	.long	1
	.long	0
	.byte	1
	.zero	3
	.long	2
	.text
.globl ahir_ieee_proposed__float_pkg__float_to_unsigned
	.type	ahir_ieee_proposed__float_pkg__float_to_unsigned, @function
ahir_ieee_proposed__float_pkg__float_to_unsigned:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1060, %esp
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -608(%ebp)
	movl	-608(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L337
	movl	-608(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -616(%ebp)
	jmp	.L338
.L337:
	movl	-608(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -616(%ebp)
.L338:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -604(%ebp)
	movl	-604(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L339
	movl	-604(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -612(%ebp)
	jmp	.L340
.L339:
	movl	-604(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -612(%ebp)
.L340:
	movl	-612(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-616(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -668(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -596(%ebp)
	movl	-596(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L341
	movl	-596(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -600(%ebp)
	jmp	.L342
.L341:
	movl	-596(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -600(%ebp)
.L342:
	movl	-600(%ebp), %eax
	movl	%eax, -664(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -592(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -588(%ebp)
	movl	-588(%ebp), %eax
	movl	(%eax), %edx
	movl	-592(%ebp), %eax
	movl	%edx, (%eax)
	movl	-588(%ebp), %eax
	movl	4(%eax), %edx
	movl	-592(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-588(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-592(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-588(%ebp), %eax
	movl	12(%eax), %edx
	movl	-592(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-672(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-660(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1040(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1040(%ebp)
	movl	-1040(%ebp), %ecx
	movl	%ecx, -656(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -584(%ebp)
	movl	$0, -580(%ebp)
.L344:
	movl	-580(%ebp), %eax
	cmpl	-584(%ebp), %eax
	je	.L343
	movl	-580(%ebp), %edx
	movl	-656(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -580(%ebp)
	jmp	.L344
.L343:
	movb	$0, -649(%ebp)
	movl	$-2147483648, -648(%ebp)
	leal	-700(%ebp), %eax
	movl	%eax, -576(%ebp)
	movl	-664(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-576(%ebp), %eax
	movl	%edx, (%eax)
	movl	-576(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-576(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-576(%ebp), %eax
	movl	(%eax), %edx
	movl	-576(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -568(%ebp)
	cmpl	$0, -568(%ebp)
	jns	.L345
	movl	$0, -572(%ebp)
	jmp	.L346
.L345:
	movl	-568(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -572(%ebp)
.L346:
	movl	-576(%ebp), %edx
	movl	-572(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-688(%ebp), %eax
	movl	%eax, -644(%ebp)
	movl	-644(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -1036(%ebp)
	movl	-1036(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1036(%ebp)
	movl	-1036(%ebp), %ecx
	movl	%ecx, -640(%ebp)
	movl	-688(%ebp), %eax
	movl	%eax, -564(%ebp)
	movl	$0, -560(%ebp)
.L348:
	movl	-560(%ebp), %eax
	cmpl	-564(%ebp), %eax
	je	.L347
	movl	-560(%ebp), %edx
	movl	-640(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -560(%ebp)
	jmp	.L348
.L347:
	leal	-716(%ebp), %eax
	movl	%eax, -556(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -548(%ebp)
	movl	-548(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L349
	movl	-548(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -552(%ebp)
	jmp	.L350
.L349:
	movl	-548(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -552(%ebp)
.L350:
	movl	-552(%ebp), %eax
	leal	3(%eax), %edx
	movl	-556(%ebp), %eax
	movl	%edx, (%eax)
	movl	-556(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-556(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-556(%ebp), %eax
	movl	(%eax), %edx
	movl	-556(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -540(%ebp)
	cmpl	$0, -540(%ebp)
	jns	.L351
	movl	$0, -544(%ebp)
	jmp	.L352
.L351:
	movl	-540(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -544(%ebp)
.L352:
	movl	-556(%ebp), %edx
	movl	-544(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-704(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -1032(%ebp)
	movl	-1032(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1032(%ebp)
	movl	-1032(%ebp), %ecx
	movl	%ecx, -632(%ebp)
	movl	-704(%ebp), %eax
	movl	%eax, -536(%ebp)
	movl	$0, -532(%ebp)
.L354:
	movl	-532(%ebp), %eax
	cmpl	-536(%ebp), %eax
	je	.L353
	movl	-532(%ebp), %edx
	movl	-632(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -532(%ebp)
	jmp	.L354
.L353:
	movl	$-2147483648, -628(%ebp)
	movl	$0, -528(%ebp)
.L356:
	cmpl	$3, -528(%ebp)
	je	.L355
	movl	-528(%ebp), %eax
	movb	$0, -719(%ebp,%eax)
	addl	$1, -528(%ebp)
	jmp	.L356
.L355:
	movb	$0, -621(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -520(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -508(%ebp)
	movl	-508(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L357
	movl	-508(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -516(%ebp)
	jmp	.L358
.L357:
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -516(%ebp)
.L358:
	movl	-516(%ebp), %eax
	movl	%eax, -500(%ebp)
	movl	-520(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -496(%ebp)
	movl	-520(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L359
	movl	-496(%ebp), %eax
	movl	-500(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -504(%ebp)
	jmp	.L360
.L359:
	movl	-500(%ebp), %eax
	movl	-496(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -504(%ebp)
.L360:
	movl	-504(%ebp), %eax
	movl	%eax, -512(%ebp)
	movl	-504(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-520(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -512(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L361
	movl	$_UI00000000, %eax
	movl	$10491, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L361:
	movl	-512(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-524(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movb	%al, -649(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -492(%ebp)
	leal	-760(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-664(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-464(%ebp), %eax
	movl	%edx, (%eax)
	movl	-464(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-464(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-464(%ebp), %eax
	movl	(%eax), %edx
	movl	-464(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -456(%ebp)
	cmpl	$0, -456(%ebp)
	jns	.L362
	movl	$0, -460(%ebp)
	jmp	.L363
.L362:
	movl	-456(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -460(%ebp)
.L363:
	movl	-464(%ebp), %edx
	movl	-460(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-748(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -484(%ebp)
	leal	-760(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-484(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-480(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L364
	movl	$_UI00000000, %eax
	movl	$10493, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L364:
	movl	-484(%ebp), %eax
	movl	(%eax), %edx
	movl	-480(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	-476(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-480(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-472(%ebp), %edx
	movl	-484(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L365
	movl	$_UI00000000, %eax
	movl	$10493, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L365:
	leal	-768(%ebp), %eax
	movl	%eax, -452(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-472(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	-448(%ebp), %eax
	movl	%eax, -768(%ebp)
	leal	-784(%ebp), %eax
	movl	%eax, -764(%ebp)
	movl	-452(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -444(%ebp)
	leal	-760(%ebp), %eax
	movl	%eax, -440(%ebp)
	movl	-440(%ebp), %eax
	movl	(%eax), %edx
	movl	-444(%ebp), %eax
	movl	%edx, (%eax)
	movl	-440(%ebp), %eax
	movl	4(%eax), %edx
	movl	-444(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-440(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-444(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-440(%ebp), %eax
	movl	12(%eax), %edx
	movl	-444(%ebp), %eax
	movl	%edx, 12(%eax)
	movb	$1, 8(%esp)
	leal	-768(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-744(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_01O2
	leal	-744(%ebp), %eax
	movl	%eax, -468(%ebp)
.L369:
	movl	-468(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-688(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L366
	movl	-468(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-640(%ebp), %ecx
	movl	-644(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-492(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-700(%ebp), %eax
	movl	%eax, -432(%ebp)
	movl	-432(%ebp), %eax
	movl	(%eax), %edx
	movl	-664(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -424(%ebp)
	movl	-424(%ebp), %eax
	movl	%eax, -428(%ebp)
	movl	-424(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-432(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -428(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L367
	jmp	.L368
.L366:
	movl	$_UI00000000, %eax
	movl	$10493, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L369
.L367:
	movl	$_UI00000000, %eax
	movl	$10494, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L368:
	movl	-428(%ebp), %eax
	movl	%eax, -436(%ebp)
	leal	-700(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	-416(%ebp), %eax
	movl	(%eax), %edx
	movl	-664(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -408(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	-408(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-416(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -412(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L370
	movl	$_UI00000000, %eax
	movl	$10494, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L370:
	movl	-412(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-436(%ebp), %ebx
	movl	-420(%ebp), %edx
	movl	-640(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-640(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-688(%ebp), %eax
	movl	%eax, -644(%ebp)
	movl	-640(%ebp), %eax
	movl	%eax, -792(%ebp)
	leal	-700(%ebp), %eax
	movl	%eax, -788(%ebp)
	leal	-792(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, -648(%ebp)
	movl	%esp, %eax
	movl	%eax, -1020(%ebp)
	movl	-660(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1028(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1028(%ebp)
	movl	-1028(%ebp), %ecx
	movl	%ecx, -404(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	$0, -396(%ebp)
.L372:
	movl	-396(%ebp), %eax
	cmpl	-400(%ebp), %eax
	je	.L371
	movl	-396(%ebp), %edx
	movl	-404(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -396(%ebp)
	jmp	.L372
.L371:
	movl	-404(%ebp), %edx
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1020(%ebp), %esp
	leal	-684(%ebp), %eax
	movl	%eax, -388(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -376(%ebp)
	movl	-376(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L373
	movl	-376(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -384(%ebp)
	jmp	.L374
.L373:
	movl	-376(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -384(%ebp)
.L374:
	movl	-384(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	-388(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -364(%ebp)
	movl	-388(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L375
	movl	-364(%ebp), %eax
	movl	-368(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -372(%ebp)
	jmp	.L376
.L375:
	movl	-368(%ebp), %eax
	movl	-364(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -372(%ebp)
.L376:
	movl	-372(%ebp), %eax
	movl	%eax, -380(%ebp)
	movl	-380(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %edx
	movl	-656(%ebp), %eax
	movb	$3, (%eax,%edx)
	leal	-684(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L377
	movl	-356(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -360(%ebp)
	jmp	.L378
.L377:
	movl	-356(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -360(%ebp)
.L378:
	movl	-360(%ebp), %eax
	subl	$1, %eax
	subl	-648(%ebp), %eax
	movl	%eax, -628(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	-340(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L379
	movl	-340(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -352(%ebp)
	jmp	.L380
.L379:
	movl	-340(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -352(%ebp)
.L380:
	movl	-668(%ebp), %eax
	cmpl	-352(%ebp), %eax
	jle	.L381
	leal	-808(%ebp), %eax
	movl	%eax, -336(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-328(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L382
	movl	-328(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -332(%ebp)
	jmp	.L383
.L382:
	movl	-328(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -332(%ebp)
.L383:
	movl	-332(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-336(%ebp), %eax
	movl	%edx, (%eax)
	movl	-336(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-336(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-336(%ebp), %eax
	movl	(%eax), %edx
	movl	-336(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -320(%ebp)
	cmpl	$0, -320(%ebp)
	jns	.L384
	movl	$0, -324(%ebp)
	jmp	.L385
.L384:
	movl	-320(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -324(%ebp)
.L385:
	movl	-336(%ebp), %edx
	movl	-324(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-796(%ebp), %eax
	movl	%eax, -348(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -316(%ebp)
	leal	-808(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	-316(%ebp), %eax
	movl	(%eax), %edx
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -308(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-308(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-312(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-304(%ebp), %edx
	movl	-316(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L386
	movl	$_UI00000000, %eax
	movl	$10501, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L386:
	call	__ghdl_stack2_mark
	movl	%eax, -300(%ebp)
	leal	-848(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	-272(%ebp), %eax
	movl	$-1, (%eax)
	leal	-684(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L387
	movl	-264(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -268(%ebp)
	jmp	.L388
.L387:
	movl	-264(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -268(%ebp)
.L388:
	movl	-268(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-272(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-272(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-272(%ebp), %eax
	movl	(%eax), %edx
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -256(%ebp)
	cmpl	$0, -256(%ebp)
	jns	.L389
	movl	$0, -260(%ebp)
	jmp	.L390
.L389:
	movl	-256(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -260(%ebp)
.L390:
	movl	-272(%ebp), %edx
	movl	-260(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-836(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -292(%ebp)
	leal	-848(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-292(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-288(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L391
	movl	$_UI00000000, %eax
	movl	$10501, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L391:
	movl	-292(%ebp), %eax
	movl	(%eax), %edx
	movl	-288(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -284(%ebp)
	movl	-284(%ebp), %eax
	movl	%eax, -280(%ebp)
	movl	-284(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-280(%ebp), %edx
	movl	-292(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L392
	movl	$_UI00000000, %eax
	movl	$10501, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L392:
	movl	-836(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-280(%ebp), %eax
	movl	%eax, -856(%ebp)
	leal	-848(%ebp), %eax
	movl	%eax, -852(%ebp)
	leal	-856(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-832(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-864(%ebp), %eax
	movl	%eax, -252(%ebp)
	leal	-832(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -864(%ebp)
	leal	-880(%ebp), %eax
	movl	%eax, -860(%ebp)
	movl	-252(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -244(%ebp)
	movl	-248(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -240(%ebp)
	movl	-240(%ebp), %eax
	movl	(%eax), %edx
	movl	-244(%ebp), %eax
	movl	%edx, (%eax)
	movl	-240(%ebp), %eax
	movl	4(%eax), %edx
	movl	-244(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-240(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-244(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-240(%ebp), %eax
	movl	12(%eax), %edx
	movl	-244(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-864(%ebp), %eax
	movl	%eax, -276(%ebp)
.L395:
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-796(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L393
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-304(%ebp), %edx
	movl	-656(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-348(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-300(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L394
.L393:
	movl	$_UI00000000, %eax
	movl	$10501, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L395
.L381:
	leal	-824(%ebp), %eax
	movl	%eax, -236(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L396
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -232(%ebp)
	jmp	.L397
.L396:
	movl	-224(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -232(%ebp)
.L397:
	movl	-232(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-236(%ebp), %eax
	movl	%edx, (%eax)
	leal	-684(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L398
	movl	-220(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -228(%ebp)
	jmp	.L399
.L398:
	movl	-220(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -228(%ebp)
.L399:
	movl	-668(%ebp), %edx
	movl	-228(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-236(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-236(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-236(%ebp), %eax
	movl	(%eax), %edx
	movl	-236(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -212(%ebp)
	cmpl	$0, -212(%ebp)
	jns	.L400
	movl	$0, -216(%ebp)
	jmp	.L401
.L400:
	movl	-212(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -216(%ebp)
.L401:
	movl	-236(%ebp), %edx
	movl	-216(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-812(%ebp), %eax
	movl	%eax, -344(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -208(%ebp)
	leal	-824(%ebp), %eax
	movl	%eax, -204(%ebp)
	movl	-208(%ebp), %eax
	movl	(%eax), %edx
	movl	-204(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	movl	%eax, -196(%ebp)
	movl	-200(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-204(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-196(%ebp), %edx
	movl	-208(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L402
	movl	$_UI00000000, %eax
	movl	$10504, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L402:
	call	__ghdl_stack2_mark
	movl	%eax, -192(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-164(%ebp), %eax
	movl	$-1, (%eax)
	movl	-668(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-164(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-164(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-164(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -156(%ebp)
	cmpl	$0, -156(%ebp)
	jns	.L403
	movl	$0, -160(%ebp)
	jmp	.L404
.L403:
	movl	-156(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -160(%ebp)
.L404:
	movl	-164(%ebp), %edx
	movl	-160(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-892(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -184(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-184(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-180(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L405
	movl	$_UI00000000, %eax
	movl	$10505, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L405:
	movl	-184(%ebp), %eax
	movl	(%eax), %edx
	movl	-180(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-176(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-180(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-172(%ebp), %edx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L406
	movl	$_UI00000000, %eax
	movl	$10505, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L406:
	movl	-892(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-172(%ebp), %eax
	movl	%eax, -912(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -908(%ebp)
	leal	-912(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-888(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-920(%ebp), %eax
	movl	%eax, -152(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -920(%ebp)
	leal	-936(%ebp), %eax
	movl	%eax, -916(%ebp)
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-148(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	movl	(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, (%eax)
	movl	-140(%ebp), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-140(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-144(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-140(%ebp), %eax
	movl	12(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-920(%ebp), %eax
	movl	%eax, -168(%ebp)
.L408:
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-812(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L407
	movl	-168(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-196(%ebp), %edx
	movl	-656(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-344(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-192(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L394
.L407:
	movl	$_UI00000000, %eax
	movl	$10505, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L408
.L394:
	movl	-672(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -944(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	$_UI00000009.5502, %eax
	movl	%eax, -952(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float_to_unsigned__U10__STB.5503, -948(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -136(%ebp)
	leal	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-944(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-960(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__unsigned_CONCAT
	leal	-960(%ebp), %eax
	movl	%eax, -132(%ebp)
.L412:
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-704(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L409
	movl	-132(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-632(%ebp), %ecx
	movl	-636(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpl	$0, -628(%ebp)
	js	.L410
	jmp	.L440
.L409:
	movl	$_UI00000000, %eax
	movl	$10507, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L412
.L410:
	movl	%esp, %eax
	movl	%eax, -1016(%ebp)
	movl	-660(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -1024(%ebp)
	movl	-1024(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1024(%ebp)
	movl	-1024(%ebp), %ecx
	movl	%ecx, -128(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	$0, -120(%ebp)
.L414:
	movl	-120(%ebp), %eax
	cmpl	-124(%ebp), %eax
	je	.L413
	movl	-120(%ebp), %edx
	movl	-128(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -120(%ebp)
	jmp	.L414
.L413:
	movl	-128(%ebp), %eax
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1016(%ebp), %esp
	jmp	.L415
.L440:
	call	__ghdl_stack2_mark
	movl	%eax, -116(%ebp)
	movl	-704(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-632(%ebp), %eax
	movl	%eax, -976(%ebp)
	leal	-716(%ebp), %eax
	movl	%eax, -972(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-976(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-968(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_rightO1
	leal	-968(%ebp), %eax
	movl	%eax, -112(%ebp)
.L419:
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-704(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L416
	movl	-112(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-632(%ebp), %ecx
	movl	-636(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-736(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-716(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L417
	jmp	.L441
.L416:
	movl	$_UI00000000, %eax
	movl	$10511, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L419
.L417:
	movl	-100(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L420
.L441:
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L420:
	movl	-108(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, (%edx)
	movl	-108(%ebp), %eax
	movl	$3, 4(%eax)
	movl	-108(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-108(%ebp), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -92(%ebp)
	cmpl	$0, -92(%ebp)
	jns	.L421
	movl	$0, -96(%ebp)
	jmp	.L422
.L421:
	movl	-92(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -96(%ebp)
.L422:
	movl	-108(%ebp), %edx
	movl	-96(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-724(%ebp), %eax
	movl	%eax, -620(%ebp)
	leal	-716(%ebp), %eax
	movl	%eax, -88(%ebp)
	leal	-736(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-88(%ebp), %eax
	movl	(%eax), %edx
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-80(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-84(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-76(%ebp), %edx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L423
	movl	$_UI00000000, %eax
	movl	$10512, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L423:
	movl	-76(%ebp), %eax
	movl	-632(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -72(%ebp)
.L427:
	movl	-724(%ebp), %edx
	movl	-672(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L424
	movl	-72(%ebp), %edx
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-716(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float_to_unsigned__U13__STB.5543, -64(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-56(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	jne	.L425
	jmp	.L426
.L424:
	movl	$_UI00000000, %eax
	movl	$10512, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L427
.L425:
	movl	$_UI00000000, %eax
	movl	$10513, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L426:
	movl	-56(%ebp), %edx
	movl	-632(%ebp), %eax
	addl	%edx, %eax
	movl	$3, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-719(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movzbl	28(%ebp), %eax
	movb	%al, -1041(%ebp)
	cmpb	$1, -1041(%ebp)
	je	.L430
	cmpb	$1, -1041(%ebp)
	jb	.L429
	cmpb	$2, -1041(%ebp)
	je	.L431
	jmp	.L442
.L429:
	movl	$0, -52(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	$0, -32(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L432
	movl	-28(%ebp), %eax
	movl	-32(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	jmp	.L433
.L432:
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
.L433:
	movl	-36(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -40(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L434
	movl	$_UI00000000, %eax
	movl	$10518, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L434:
	movl	-40(%ebp), %eax
	movl	%eax, -48(%ebp)
	leal	-719(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -984(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float_to_unsigned__U14__STB.5558, -980(%ebp)
	leal	-984(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movl	%eax, %ecx
	movl	-48(%ebp), %edx
	movl	-656(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	movzbl	-719(%ebp,%eax), %eax
	movb	%dl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -621(%ebp)
	jmp	.L435
.L430:
	movl	$0, -24(%ebp)
	movzbl	-649(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movzbl	-719(%ebp,%eax), %eax
	movb	%dl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -621(%ebp)
	jmp	.L435
.L431:
	movl	$0, -20(%ebp)
	movl	-20(%ebp), %eax
	movzbl	-719(%ebp,%eax), %edx
	movzbl	-649(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -621(%ebp)
	jmp	.L435
.L442:
	movb	$2, -621(%ebp)
.L435:
	cmpb	$3, -621(%ebp)
	jne	.L415
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -1000(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	$1, 8(%esp)
	leal	-1000(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-992(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO3
	leal	-992(%ebp), %eax
	movl	%eax, -12(%ebp)
.L437:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-672(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L436
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L415
.L436:
	movl	$_UI00000000, %eax
	movl	$10527, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L437
.L415:
	movl	-672(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -1008(%ebp)
	leal	-684(%ebp), %eax
	movl	%eax, -1004(%ebp)
	leal	-1008(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L438
	movl	$9, (%esp)
	call	__ghdl_bound_check_failed_l0
.L438:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	16(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %edx
	movzbl	-649(%ebp), %eax
	movb	%al, (%edx)
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__float_to_unsigned, .-ahir_ieee_proposed__float_pkg__float_to_unsigned
.globl ahir_ieee_proposed__float_pkg__smallfract
	.type	ahir_ieee_proposed__float_pkg__smallfract, @function
ahir_ieee_proposed__float_pkg__smallfract:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$72, %esp
	movb	$0, -57(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L444
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L445
.L444:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L445:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -48(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L446
	movl	$_UI00000000, %eax
	movl	$10543, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L446:
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -57(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L447
.L454:
	movl	-32(%ebp), %eax
	cmpl	12(%ebp), %eax
	jge	.L448
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-20(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L449
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	jmp	.L450
.L449:
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
.L450:
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -16(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L451
	movl	$_UI00000000, %eax
	movl	$10546, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L451:
	movl	-16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	-57(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__orO1
	movb	%al, -57(%ebp)
.L448:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -32(%ebp)
	je	.L447
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L452
	addl	$1, -32(%ebp)
	jmp	.L454
.L452:
	subl	$1, -32(%ebp)
	jmp	.L454
.L447:
	movzbl	-57(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__smallfract, .-ahir_ieee_proposed__float_pkg__smallfract
.globl ahir_ieee_proposed__float_pkg__to_sulv
	.type	ahir_ieee_proposed__float_pkg__to_sulv, @function
ahir_ieee_proposed__float_pkg__to_sulv:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L458:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L457
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L458
.L457:
	leal	-92(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	$1, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movb	$0, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-80(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-80(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L459
	movl	$_UI00000000, %eax
	movl	$10561, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L459:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L460
	movl	$ahir_ieee_proposed__float_pkg__nslv, %eax
	movl	%eax, -100(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nslv__OT__STB, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L464
.L460:
	leal	-108(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-108(%ebp), %eax
	movl	%eax, -24(%ebp)
.L463:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L462
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-132(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L464
.L462:
	movl	$_UI00000000, %eax
	movl	$10566, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L463
.L464:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_sulv, .-ahir_ieee_proposed__float_pkg__to_sulv
.globl ahir_ieee_proposed__float_pkg__to_slv
	.type	ahir_ieee_proposed__float_pkg__to_slv, @function
ahir_ieee_proposed__float_pkg__to_slv:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-40(%ebp), %eax
	movl	%eax, -16(%ebp)
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-40(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_slv, .-ahir_ieee_proposed__float_pkg__to_slv
.globl ahir_ieee_proposed__float_pkg__normalizeO1
	.type	ahir_ieee_proposed__float_pkg__normalizeO1, @function
ahir_ieee_proposed__float_pkg__normalizeO1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1348, %esp
	leal	-692(%ebp), %eax
	movl	%eax, -584(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -576(%ebp)
	movl	-576(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L468
	movl	-576(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -580(%ebp)
	jmp	.L469
.L468:
	movl	-576(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -580(%ebp)
.L469:
	movl	-584(%ebp), %edx
	movl	-580(%ebp), %eax
	movl	%eax, (%edx)
	movl	-584(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-584(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-584(%ebp), %eax
	movl	(%eax), %edx
	movl	-584(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -568(%ebp)
	cmpl	$0, -568(%ebp)
	jns	.L470
	movl	$0, -572(%ebp)
	jmp	.L471
.L470:
	movl	-568(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -572(%ebp)
.L471:
	movl	-584(%ebp), %edx
	movl	-572(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-680(%ebp), %eax
	movl	%eax, -676(%ebp)
	movl	-676(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1328(%ebp)
	movl	-1328(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1328(%ebp)
	movl	-1328(%ebp), %ecx
	movl	%ecx, -672(%ebp)
	movl	-680(%ebp), %eax
	movl	%eax, -564(%ebp)
	movl	$0, -560(%ebp)
.L473:
	movl	-560(%ebp), %eax
	cmpl	-564(%ebp), %eax
	je	.L472
	movl	-560(%ebp), %edx
	movl	-672(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -560(%ebp)
	jmp	.L473
.L472:
	leal	-708(%ebp), %eax
	movl	%eax, -556(%ebp)
	movl	32(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-556(%ebp), %eax
	movl	%edx, (%eax)
	movl	-556(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-556(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-556(%ebp), %eax
	movl	(%eax), %edx
	movl	-556(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -548(%ebp)
	cmpl	$0, -548(%ebp)
	jns	.L474
	movl	$0, -552(%ebp)
	jmp	.L475
.L474:
	movl	-548(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -552(%ebp)
.L475:
	movl	-556(%ebp), %edx
	movl	-552(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-696(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1324(%ebp)
	movl	-1324(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1324(%ebp)
	movl	-1324(%ebp), %ecx
	movl	%ecx, -664(%ebp)
	movl	-696(%ebp), %eax
	movl	%eax, -544(%ebp)
	movl	$0, -540(%ebp)
.L477:
	movl	-540(%ebp), %eax
	cmpl	-544(%ebp), %eax
	je	.L476
	movl	-540(%ebp), %edx
	movl	-664(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -540(%ebp)
	jmp	.L477
.L476:
	leal	-724(%ebp), %eax
	movl	%eax, -536(%ebp)
	movl	28(%ebp), %eax
	leal	1(%eax), %edx
	movl	-536(%ebp), %eax
	movl	%edx, (%eax)
	movl	-536(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-536(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-536(%ebp), %eax
	movl	(%eax), %edx
	movl	-536(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -528(%ebp)
	cmpl	$0, -528(%ebp)
	jns	.L478
	movl	$0, -532(%ebp)
	jmp	.L479
.L478:
	movl	-528(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -532(%ebp)
.L479:
	movl	-536(%ebp), %edx
	movl	-532(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-712(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-660(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1320(%ebp)
	movl	-1320(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1320(%ebp)
	movl	-1320(%ebp), %ecx
	movl	%ecx, -656(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	$0, -520(%ebp)
.L481:
	movl	-520(%ebp), %eax
	cmpl	-524(%ebp), %eax
	je	.L480
	movl	-520(%ebp), %edx
	movl	-656(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -520(%ebp)
	jmp	.L481
.L480:
	leal	-740(%ebp), %eax
	movl	%eax, -516(%ebp)
	movl	28(%ebp), %eax
	leal	1(%eax), %edx
	movl	-516(%ebp), %eax
	movl	%edx, (%eax)
	movl	-516(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-516(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-516(%ebp), %eax
	movl	(%eax), %edx
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -508(%ebp)
	cmpl	$0, -508(%ebp)
	jns	.L482
	movl	$0, -512(%ebp)
	jmp	.L483
.L482:
	movl	-508(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -512(%ebp)
.L483:
	movl	-516(%ebp), %edx
	movl	-512(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-728(%ebp), %eax
	movl	%eax, -652(%ebp)
	movl	-652(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1316(%ebp)
	movl	-1316(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1316(%ebp)
	movl	-1316(%ebp), %ecx
	movl	%ecx, -648(%ebp)
	movl	-728(%ebp), %eax
	movl	%eax, -504(%ebp)
	movl	$0, -500(%ebp)
.L485:
	movl	-500(%ebp), %eax
	cmpl	-504(%ebp), %eax
	je	.L484
	movl	-500(%ebp), %edx
	movl	-648(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -500(%ebp)
	jmp	.L485
.L484:
	leal	-756(%ebp), %eax
	movl	%eax, -496(%ebp)
	movl	28(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-496(%ebp), %eax
	movl	%edx, (%eax)
	movl	-496(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-496(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-496(%ebp), %eax
	movl	(%eax), %edx
	movl	-496(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -488(%ebp)
	cmpl	$0, -488(%ebp)
	jns	.L486
	movl	$0, -492(%ebp)
	jmp	.L487
.L486:
	movl	-488(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -492(%ebp)
.L487:
	movl	-496(%ebp), %edx
	movl	-492(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-744(%ebp), %eax
	movl	%eax, -644(%ebp)
	movl	-644(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1312(%ebp)
	movl	-1312(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1312(%ebp)
	movl	-1312(%ebp), %ecx
	movl	%ecx, -640(%ebp)
	movl	-744(%ebp), %eax
	movl	%eax, -484(%ebp)
	movl	$0, -480(%ebp)
.L489:
	movl	-480(%ebp), %eax
	cmpl	-484(%ebp), %eax
	je	.L488
	movl	-480(%ebp), %edx
	movl	-640(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -480(%ebp)
	jmp	.L489
.L488:
	leal	-772(%ebp), %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %edx
	movl	28(%ebp), %eax
	movl	%eax, (%edx)
	movl	32(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-476(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-476(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-476(%ebp), %eax
	movl	(%eax), %edx
	movl	-476(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -468(%ebp)
	cmpl	$0, -468(%ebp)
	jns	.L490
	movl	$0, -472(%ebp)
	jmp	.L491
.L490:
	movl	-468(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -472(%ebp)
.L491:
	movl	-476(%ebp), %edx
	movl	-472(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1308(%ebp)
	movl	-1308(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1308(%ebp)
	movl	-1308(%ebp), %ecx
	movl	%ecx, -632(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	$0, -460(%ebp)
.L493:
	movl	-460(%ebp), %eax
	cmpl	-464(%ebp), %eax
	je	.L492
	movl	-460(%ebp), %edx
	movl	-632(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -460(%ebp)
	jmp	.L493
.L492:
	movl	$-2147483648, -628(%ebp)
	movb	$0, -621(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -456(%ebp)
	movl	28(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-456(%ebp), %eax
	movl	%edx, (%eax)
	movl	-456(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-456(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-456(%ebp), %eax
	movl	(%eax), %edx
	movl	-456(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -448(%ebp)
	cmpl	$0, -448(%ebp)
	jns	.L494
	movl	$0, -452(%ebp)
	jmp	.L495
.L494:
	movl	-448(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -452(%ebp)
.L495:
	movl	-456(%ebp), %edx
	movl	-452(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-620(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1304(%ebp)
	movl	-1304(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1304(%ebp)
	movl	-1304(%ebp), %ecx
	movl	%ecx, -616(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -444(%ebp)
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-892(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-892(%ebp), %eax
	movl	%eax, -440(%ebp)
.L498:
	movl	-440(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-776(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L496
	movl	-440(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-616(%ebp), %ecx
	movl	-620(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-444(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$0, -611(%ebp)
	movb	$0, -610(%ebp)
	movb	$0, -609(%ebp)
	movb	$0, -610(%ebp)
	movb	$0, -609(%ebp)
	movb	$0, -611(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -436(%ebp)
	movb	$2, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-900(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_01O1
	movb	$3, 4(%esp)
	leal	-900(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__find_leftmostO2
	subl	32(%ebp), %eax
	subl	44(%ebp), %eax
	movl	%eax, -628(%ebp)
	movl	-436(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -432(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-916(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	movl	-628(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-916(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-908(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-908(%ebp), %eax
	movl	%eax, -428(%ebp)
	jmp	.L497
.L496:
	movl	$_UI00000000, %eax
	movl	$10598, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L498
.L497:
	movl	-428(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-712(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L499
	movl	-428(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-432(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	cmpb	$2, %al
	je	.L500
	jmp	.L573
.L499:
	movl	$_UI00000000, %eax
	movl	$10606, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L497
.L500:
	movb	$1, -610(%ebp)
	jmp	.L502
.L573:
	movl	-712(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -924(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -920(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -420(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -956(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -952(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-956(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-948(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-948(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-940(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	$1, 8(%esp)
	leal	-940(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-932(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-932(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-924(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLeO2
	movb	%al, -421(%ebp)
	movl	-420(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpb	$1, -421(%ebp)
	jne	.L503
	movzbl	40(%ebp), %eax
	movb	%al, -421(%ebp)
.L503:
	movzbl	-421(%ebp), %eax
	movb	%al, -422(%ebp)
	cmpb	$0, -422(%ebp)
	jne	.L504
	movl	-712(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -964(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -960(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -412(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -996(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -992(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-996(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-988(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-988(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-980(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	$1, 8(%esp)
	leal	-980(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-972(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-972(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-964(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO2
	movb	%al, -413(%ebp)
	movl	-412(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpb	$1, -413(%ebp)
	jne	.L505
	movzbl	40(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -413(%ebp)
.L505:
	movzbl	-413(%ebp), %eax
	movb	%al, -422(%ebp)
.L504:
	cmpb	$0, -422(%ebp)
	je	.L506
	movl	-712(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -1004(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -1000(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -404(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -1044(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1044(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1036(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-1036(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1028(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	32(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1028(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1020(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	movl	$1, 8(%esp)
	leal	-1020(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1012(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-1012(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1004(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGeO2
	movb	%al, -405(%ebp)
	movl	-404(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpb	$1, -405(%ebp)
	jne	.L507
	movzbl	40(%ebp), %eax
	movb	%al, -405(%ebp)
.L507:
	cmpb	$0, -405(%ebp)
	je	.L508
	call	__ghdl_stack2_mark
	movl	%eax, -400(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -1076(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -1072(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1076(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1068(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-1068(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1060(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	movl	$1, 8(%esp)
	leal	-1060(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1052(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-1052(%ebp), %eax
	movl	%eax, -396(%ebp)
.L511:
	movl	-396(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-712(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L509
	movl	-396(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-656(%ebp), %ecx
	movl	-660(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-400(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -392(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -1092(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -1088(%ebp)
	leal	-1092(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1084(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO2
	leal	-1084(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	negl	%eax
	movl	%eax, -628(%ebp)
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L502
.L509:
	movl	$_UI00000000, %eax
	movl	$10613, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L511
.L508:
	movb	$1, -610(%ebp)
	jmp	.L502
.L506:
	movl	-712(%ebp), %eax
	movl	%eax, -660(%ebp)
	movl	-656(%ebp), %eax
	movl	%eax, -1100(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -1096(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -388(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -1116(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -1112(%ebp)
	movl	$1, 8(%esp)
	leal	-1116(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1108(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-1108(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1100(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO2
	testb	%al, %al
	je	.L512
	movb	$1, -609(%ebp)
.L512:
	movl	-388(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
.L502:
	cmpb	$0, -610(%ebp)
	je	.L513
	call	__ghdl_stack2_mark
	movl	%eax, -384(%ebp)
	movl	32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1124(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__zerofpO1
	leal	-1124(%ebp), %eax
	movl	%eax, -380(%ebp)
.L516:
	movl	-380(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-760(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L514
	movl	-380(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-632(%ebp), %ecx
	movl	-636(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-384(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L515
.L514:
	movl	$_UI00000000, %eax
	movl	$10622, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L516
.L513:
	cmpb	$0, -609(%ebp)
	je	.L517
	call	__ghdl_stack2_mark
	movl	%eax, -376(%ebp)
	movl	32(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	28(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-1132(%ebp), %eax
	movl	%eax, -372(%ebp)
.L519:
	movl	-372(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-760(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L518
	movl	-372(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-632(%ebp), %ecx
	movl	-636(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-376(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L515
.L518:
	movl	$_UI00000000, %eax
	movl	$10625, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L519
.L517:
	call	__ghdl_stack2_mark
	movl	%eax, -368(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1140(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__srlO1
	leal	-1140(%ebp), %eax
	movl	%eax, -364(%ebp)
.L523:
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-680(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L520
	movl	-364(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-368(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpl	$0, -628(%ebp)
	jg	.L521
	jmp	.L574
.L520:
	movl	$_UI00000000, %eax
	movl	$10628, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L523
.L521:
	movl	-628(%ebp), %eax
	subl	$1, %eax
	movl	%eax, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__smallfract
	movb	%al, 4(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movb	%al, -621(%ebp)
	jmp	.L524
.L574:
	movzbl	24(%ebp), %eax
	movb	%al, -621(%ebp)
.L524:
	cmpl	$0, 44(%ebp)
	jle	.L525
	leal	-692(%ebp), %eax
	movl	%eax, -336(%ebp)
	movl	-336(%ebp), %eax
	movl	(%eax), %eax
	subl	44(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-328(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-328(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-336(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -332(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L526
	movl	$_UI00000000, %eax
	movl	$10637, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L526:
	movl	-332(%ebp), %eax
	movl	%eax, -360(%ebp)
	leal	-1156(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	44(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-324(%ebp), %eax
	movl	%edx, (%eax)
	movl	-324(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-324(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-324(%ebp), %eax
	movl	(%eax), %edx
	movl	-324(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -316(%ebp)
	cmpl	$0, -316(%ebp)
	jns	.L527
	movl	$0, -320(%ebp)
	jmp	.L528
.L527:
	movl	-316(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -320(%ebp)
.L528:
	movl	-324(%ebp), %edx
	movl	-320(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1144(%ebp), %eax
	movl	%eax, -356(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -352(%ebp)
	leal	-1156(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-352(%ebp), %eax
	movl	(%eax), %edx
	movl	-348(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -344(%ebp)
	movl	-344(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	-344(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-348(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-340(%ebp), %edx
	movl	-352(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L529
	movl	$_UI00000000, %eax
	movl	$10639, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L529:
	movl	-1144(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-340(%ebp), %edx
	movl	-672(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -1164(%ebp)
	leal	-1156(%ebp), %eax
	movl	%eax, -1160(%ebp)
	movl	-360(%ebp), %edx
	movl	-672(%ebp), %eax
	movzbl	(%eax,%edx), %edx
	movzbl	36(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	-621(%ebp), %eax
	movb	%al, 12(%esp)
	leal	-1164(%ebp), %eax
	movl	%eax, 8(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ahir_ieee_proposed__float_pkg__check_round
	movb	%al, -611(%ebp)
.L525:
	cmpb	$0, -611(%ebp)
	je	.L530
	leal	-804(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	32(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %edx
	addl	44(%ebp), %edx
	movl	-312(%ebp), %eax
	movl	%edx, (%eax)
	movl	-312(%ebp), %edx
	movl	44(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-312(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-312(%ebp), %eax
	movl	(%eax), %edx
	movl	-312(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -304(%ebp)
	cmpl	$0, -304(%ebp)
	jns	.L531
	movl	$0, -308(%ebp)
	jmp	.L532
.L531:
	movl	-304(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -308(%ebp)
.L532:
	movl	-312(%ebp), %edx
	movl	-308(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-792(%ebp), %eax
	movl	%eax, -608(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -300(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	-300(%ebp), %eax
	movl	(%eax), %edx
	movl	-296(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -292(%ebp)
	movl	-292(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-292(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-296(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-288(%ebp), %edx
	movl	-300(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L533
	movl	$_UI00000000, %eax
	movl	$10644, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L533:
	movl	-792(%ebp), %eax
	movl	%eax, -608(%ebp)
	movl	-288(%ebp), %edx
	movl	-672(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -1172(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -1168(%ebp)
	leal	-1188(%ebp), %eax
	movl	%eax, -264(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -260(%ebp)
	movl	-260(%ebp), %eax
	movl	(%eax), %edx
	movl	-264(%ebp), %eax
	movl	%edx, (%eax)
	movl	-260(%ebp), %eax
	movl	4(%eax), %edx
	movl	-264(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-260(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-264(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-260(%ebp), %eax
	movl	12(%eax), %edx
	movl	-264(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-1176(%ebp), %eax
	movl	%eax, -284(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -280(%ebp)
	leal	-1188(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-280(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-276(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L534
	movl	$_UI00000000, %eax
	movl	$10645, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L534:
	movl	-276(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L535
	movl	-276(%ebp), %eax
	movl	(%eax), %edx
	movl	-280(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
	jmp	.L536
.L535:
	movl	-280(%ebp), %eax
	movl	(%eax), %edx
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
.L536:
	movl	-272(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-272(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-276(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-268(%ebp), %edx
	movl	-280(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L537
	movl	$_UI00000000, %eax
	movl	$10645, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L537:
	movl	-1176(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-268(%ebp), %edx
	movl	-656(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -1196(%ebp)
	leal	-1188(%ebp), %eax
	movl	%eax, -1192(%ebp)
	movl	-696(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -1204(%ebp)
	leal	-708(%ebp), %eax
	movl	%eax, -1200(%ebp)
	movl	-728(%ebp), %eax
	movl	%eax, -652(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -1212(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -1208(%ebp)
	leal	-1212(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-1204(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1196(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1172(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__fp_round
	jmp	.L538
.L530:
	leal	-820(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	32(%ebp), %eax
	subl	$1, %eax
	movl	%eax, %edx
	addl	44(%ebp), %edx
	movl	-256(%ebp), %eax
	movl	%edx, (%eax)
	movl	-256(%ebp), %edx
	movl	44(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-256(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-256(%ebp), %eax
	movl	(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -248(%ebp)
	cmpl	$0, -248(%ebp)
	jns	.L539
	movl	$0, -252(%ebp)
	jmp	.L540
.L539:
	movl	-248(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -252(%ebp)
.L540:
	movl	-256(%ebp), %edx
	movl	-252(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-808(%ebp), %eax
	movl	%eax, -604(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -244(%ebp)
	leal	-820(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-244(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-236(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-240(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-232(%ebp), %edx
	movl	-244(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L541
	movl	$_UI00000000, %eax
	movl	$10649, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L541:
	movl	-232(%ebp), %eax
	movl	-672(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -228(%ebp)
.L545:
	movl	-808(%ebp), %edx
	movl	-696(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L542
	movl	-228(%ebp), %edx
	movl	-664(%ebp), %ecx
	movl	-668(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-836(%ebp), %eax
	movl	%eax, -224(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	(%eax), %edx
	movl	-224(%ebp), %eax
	movl	%edx, (%eax)
	movl	-220(%ebp), %eax
	movl	4(%eax), %edx
	movl	-224(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-220(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-224(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-220(%ebp), %eax
	movl	12(%eax), %edx
	movl	-224(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-824(%ebp), %eax
	movl	%eax, -600(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -216(%ebp)
	leal	-836(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	-216(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-212(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	jne	.L543
	jmp	.L544
.L542:
	movl	$_UI00000000, %eax
	movl	$10649, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L545
.L543:
	movl	$_UI00000000, %eax
	movl	$10650, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L544:
	movl	-212(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L546
	movl	-212(%ebp), %eax
	movl	(%eax), %edx
	movl	-216(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -208(%ebp)
	jmp	.L547
.L546:
	movl	-216(%ebp), %eax
	movl	(%eax), %edx
	movl	-212(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -208(%ebp)
.L547:
	movl	-208(%ebp), %eax
	movl	%eax, -204(%ebp)
	movl	-208(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-212(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-204(%ebp), %edx
	movl	-216(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L548
	movl	$_UI00000000, %eax
	movl	$10650, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L548:
	movl	-204(%ebp), %eax
	movl	-656(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -200(%ebp)
.L550:
	movl	-824(%ebp), %edx
	movl	-728(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L549
	movl	-200(%ebp), %eax
	movl	-648(%ebp), %ecx
	movl	-652(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	jmp	.L538
.L549:
	movl	$_UI00000000, %eax
	movl	$10650, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L550
.L538:
	leal	-852(%ebp), %eax
	movl	%eax, -196(%ebp)
	movl	28(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-196(%ebp), %eax
	movl	%edx, (%eax)
	movl	-196(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-196(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-196(%ebp), %eax
	movl	(%eax), %edx
	movl	-196(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -188(%ebp)
	cmpl	$0, -188(%ebp)
	jns	.L551
	movl	$0, -192(%ebp)
	jmp	.L552
.L551:
	movl	-188(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -192(%ebp)
.L552:
	movl	-196(%ebp), %edx
	movl	-192(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-840(%ebp), %eax
	movl	%eax, -596(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -184(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-184(%ebp), %eax
	movl	(%eax), %edx
	movl	-180(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-176(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-180(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-172(%ebp), %edx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L553
	movl	$_UI00000000, %eax
	movl	$10653, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L553:
	leal	-1220(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-172(%ebp), %edx
	movl	-648(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -160(%ebp)
	movl	-160(%ebp), %eax
	movl	%eax, -1220(%ebp)
	leal	-1236(%ebp), %eax
	movl	%eax, -1216(%ebp)
	movl	-164(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -156(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	movl	(%eax), %edx
	movl	-156(%ebp), %eax
	movl	%edx, (%eax)
	movl	-152(%ebp), %eax
	movl	4(%eax), %edx
	movl	-156(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-152(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-156(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-152(%ebp), %eax
	movl	12(%eax), %edx
	movl	-156(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1220(%ebp), %eax
	movl	%eax, -168(%ebp)
.L557:
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-744(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L554
	movl	-168(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-640(%ebp), %ecx
	movl	-644(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-756(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movl	(%eax), %edx
	movl	28(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	-136(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-144(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -140(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L555
	jmp	.L556
.L554:
	movl	$_UI00000000, %eax
	movl	$10653, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L557
.L555:
	movl	$_UI00000000, %eax
	movl	$10654, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L556:
	movl	-140(%ebp), %eax
	movl	%eax, -148(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %eax
	movl	(%eax), %edx
	movl	28(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	-120(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-128(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -124(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L558
	movl	$_UI00000000, %eax
	movl	$10654, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L558:
	movl	-124(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-148(%ebp), %ebx
	movl	-132(%ebp), %edx
	movl	-640(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-640(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	leal	-868(%ebp), %eax
	movl	%eax, -116(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %eax
	movl	(%eax), %edx
	movl	-116(%ebp), %eax
	movl	%edx, (%eax)
	movl	-112(%ebp), %eax
	movl	4(%eax), %edx
	movl	-116(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-112(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-116(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-112(%ebp), %eax
	movl	12(%eax), %edx
	movl	-116(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-856(%ebp), %eax
	movl	%eax, -592(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-868(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-108(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L559
	movl	$_UI00000000, %eax
	movl	$10655, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L559:
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L560
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -100(%ebp)
	jmp	.L561
.L560:
	movl	-108(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -100(%ebp)
.L561:
	movl	-100(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-100(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-96(%ebp), %edx
	movl	-108(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L562
	movl	$_UI00000000, %eax
	movl	$10655, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L562:
	leal	-1244(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-640(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -1244(%ebp)
	leal	-1260(%ebp), %eax
	movl	%eax, -1240(%ebp)
	movl	-88(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1244(%ebp), %eax
	movl	%eax, -92(%ebp)
.L566:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-856(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L563
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-96(%ebp), %edx
	movl	-632(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-592(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	leal	-884(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	$-1, (%eax)
	movl	32(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	js	.L564
	jmp	.L575
.L563:
	movl	$_UI00000000, %eax
	movl	$10655, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L566
.L564:
	movl	$0, -68(%ebp)
	jmp	.L567
.L575:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L567:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-872(%ebp), %eax
	movl	%eax, -588(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-884(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-52(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-48(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L568
	movl	$_UI00000000, %eax
	movl	$10656, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L568:
	leal	-1268(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -1268(%ebp)
	leal	-1284(%ebp), %eax
	movl	%eax, -1264(%ebp)
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	leal	-708(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-32(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1268(%ebp), %eax
	movl	%eax, -44(%ebp)
.L570:
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-872(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L569
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-48(%ebp), %edx
	movl	-632(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-588(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L515
.L569:
	movl	$_UI00000000, %eax
	movl	$10656, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L570
.L515:
	leal	-772(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	subl	28(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -16(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L571
	movl	$_UI00000000, %eax
	movl	$10658, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L571:
	movl	-16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %ecx
	movl	-632(%ebp), %edx
	movzbl	20(%ebp), %eax
	movb	%al, (%edx,%ecx)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-632(%ebp), %eax
	movl	%eax, -1292(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -1288(%ebp)
	leal	-1292(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__normalizeO1, .-ahir_ieee_proposed__float_pkg__normalizeO1
.globl ahir_ieee_proposed__float_pkg__normalizeO2
	.type	ahir_ieee_proposed__float_pkg__normalizeO2, @function
ahir_ieee_proposed__float_pkg__normalizeO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$72, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L577
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L578
.L577:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L578:
	movl	28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L579
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L580
.L579:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L580:
	movl	-16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	40(%ebp), %eax
	movl	%eax, 36(%esp)
	movzbl	36(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movl	%edx, 24(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 20(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__normalizeO2, .-ahir_ieee_proposed__float_pkg__normalizeO2
	.section	.rodata
	.align 4
	.type	_UI0000000a.7063, @object
	.size	_UI0000000a.7063, 12
_UI0000000a.7063:
	.long	_UI00000000
	.long	10697
	.long	7
	.align 32
	.type	_UI0000000b.7065, @object
	.size	_UI0000000b.7065, 66
_UI0000000b.7065:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	67
	.byte	76
	.byte	65
	.byte	83
	.byte	83
	.byte	70
	.byte	80
	.byte	58
	.byte	32
	.byte	70
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	112
	.byte	111
	.byte	105
	.byte	110
	.byte	116
	.byte	32
	.byte	110
	.byte	117
	.byte	109
	.byte	98
	.byte	101
	.byte	114
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	32
	.byte	119
	.byte	105
	.byte	116
	.byte	104
	.byte	32
	.byte	97
	.byte	32
	.byte	98
	.byte	97
	.byte	100
	.byte	32
	.byte	114
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.align 4
	.type	ahir_ieee_proposed__float_pkg__classfp__U1__STB.7066, @object
	.size	ahir_ieee_proposed__float_pkg__classfp__U1__STB.7066, 16
ahir_ieee_proposed__float_pkg__classfp__U1__STB.7066:
	.long	1
	.long	66
	.byte	0
	.zero	3
	.long	66
	.text
.globl ahir_ieee_proposed__float_pkg__classfp
	.type	ahir_ieee_proposed__float_pkg__classfp, @function
ahir_ieee_proposed__float_pkg__classfp:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$552, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -316(%ebp)
	movl	-316(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L583
	movl	-316(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -324(%ebp)
	jmp	.L584
.L583:
	movl	-316(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -324(%ebp)
.L584:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L585
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -320(%ebp)
	jmp	.L586
.L585:
	movl	-312(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -320(%ebp)
.L586:
	movl	-320(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-324(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -340(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L587
	movl	-304(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -308(%ebp)
	jmp	.L588
.L587:
	movl	-304(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -308(%ebp)
.L588:
	movl	-308(%ebp), %eax
	movl	%eax, -336(%ebp)
	leal	-356(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-300(%ebp), %edx
	movl	-336(%ebp), %eax
	movl	%eax, (%edx)
	movl	-340(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-300(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-300(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-300(%ebp), %eax
	movl	(%eax), %edx
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -292(%ebp)
	cmpl	$0, -292(%ebp)
	jns	.L589
	movl	$0, -296(%ebp)
	jmp	.L590
.L589:
	movl	-292(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -296(%ebp)
.L590:
	movl	-300(%ebp), %edx
	movl	-296(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-344(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-332(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -536(%ebp)
	movl	-536(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -536(%ebp)
	movl	-536(%ebp), %ecx
	movl	%ecx, -328(%ebp)
	movl	-344(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	$0, -284(%ebp)
.L592:
	movl	-284(%ebp), %eax
	cmpl	-288(%ebp), %eax
	je	.L591
	movl	-284(%ebp), %edx
	movl	-328(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -284(%ebp)
	jmp	.L592
.L591:
	movl	-344(%ebp), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -277(%ebp)
	cmpb	$0, -277(%ebp)
	jne	.L593
	cmpl	$2, -340(%ebp)
	setle	%al
	movb	%al, -277(%ebp)
.L593:
	movzbl	-277(%ebp), %eax
	movb	%al, -278(%ebp)
	cmpb	$0, -278(%ebp)
	jne	.L594
	cmpl	$2, -336(%ebp)
	setle	%al
	movb	%al, -278(%ebp)
.L594:
	movzbl	-278(%ebp), %eax
	movb	%al, -279(%ebp)
	cmpb	$0, -279(%ebp)
	jne	.L595
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %eax
	cmpl	%eax, %edx
	setl	%al
	movb	%al, -279(%ebp)
.L595:
	cmpb	$0, -279(%ebp)
	je	.L596
	movl	$_UI0000000b.7065, %eax
	movl	%eax, -364(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__classfp__U1__STB.7066, -360(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000000a.7063, 8(%esp)
	movb	$2, 4(%esp)
	leal	-364(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$10, -529(%ebp)
	jmp	.L597
.L596:
	call	__ghdl_stack2_mark
	movl	%eax, -276(%ebp)
	movb	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-372(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_01
	leal	-372(%ebp), %eax
	movl	%eax, -272(%ebp)
.L601:
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-344(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L598
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-328(%ebp), %ecx
	movl	-332(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-276(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-356(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -256(%ebp)
	movl	-256(%ebp), %eax
	movl	%eax, -260(%ebp)
	movl	-256(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-264(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -260(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L599
	jmp	.L600
.L598:
	movl	$_UI00000000, %eax
	movl	$10704, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L601
.L599:
	movl	$_UI00000000, %eax
	movl	$10705, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L600:
	movl	-260(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-268(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$1, %al
	jne	.L602
	movb	$10, -529(%ebp)
	jmp	.L597
.L602:
	movzbl	12(%ebp), %eax
	movb	%al, -249(%ebp)
	cmpb	$1, -249(%ebp)
	jne	.L603
	leal	-388(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-336(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-240(%ebp), %eax
	movl	%edx, (%eax)
	movl	-240(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-240(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-240(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -232(%ebp)
	cmpl	$0, -232(%ebp)
	jns	.L604
	movl	$0, -236(%ebp)
	jmp	.L605
.L604:
	movl	-232(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -236(%ebp)
.L605:
	movl	-240(%ebp), %edx
	movl	-236(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-376(%ebp), %eax
	movl	%eax, -248(%ebp)
	leal	-356(%ebp), %eax
	movl	%eax, -228(%ebp)
	leal	-388(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-228(%ebp), %eax
	movl	(%eax), %edx
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	-220(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-224(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-216(%ebp), %edx
	movl	-228(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L606
	movl	$_UI00000000, %eax
	movl	$10709, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L606:
	leal	-412(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	-216(%ebp), %edx
	movl	-328(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movl	%eax, -412(%ebp)
	leal	-428(%ebp), %eax
	movl	%eax, -408(%ebp)
	movl	-212(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
	leal	-388(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	movl	(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, (%eax)
	movl	-200(%ebp), %eax
	movl	4(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-200(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-204(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-200(%ebp), %eax
	movl	12(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-412(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	cmpb	$3, %al
	sete	%al
	movb	%al, -249(%ebp)
.L603:
	cmpb	$0, -249(%ebp)
	je	.L607
	call	__ghdl_stack2_mark
	movl	%eax, -196(%ebp)
	leal	-452(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %eax
	movl	$-1, (%eax)
	movl	-340(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-172(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-172(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-172(%ebp), %eax
	movl	(%eax), %edx
	movl	-172(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -164(%ebp)
	cmpl	$0, -164(%ebp)
	jns	.L608
	movl	$0, -168(%ebp)
	jmp	.L609
.L608:
	movl	-164(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -168(%ebp)
.L609:
	movl	-172(%ebp), %edx
	movl	-168(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-440(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-356(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-452(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-188(%ebp), %eax
	movl	(%eax), %edx
	movl	-184(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-180(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-176(%ebp), %edx
	movl	-188(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L610
	movl	$_UI00000000, %eax
	movl	$10711, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L610:
	movl	-440(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-176(%ebp), %edx
	movl	-328(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -460(%ebp)
	leal	-452(%ebp), %eax
	movl	%eax, -456(%ebp)
	leal	-460(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-436(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-436(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO5
	cmpb	$2, %al
	je	.L611
	leal	-356(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %eax
	movl	(%eax), %eax
	addl	$1, %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-148(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-156(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -152(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L612
	movl	$_UI00000000, %eax
	movl	$10713, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L612:
	movl	-152(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-160(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	jne	.L613
	movb	$0, -529(%ebp)
	jmp	.L597
.L613:
	movb	$1, -529(%ebp)
	jmp	.L597
.L611:
	leal	-356(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	subl	-336(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-132(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -136(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L614
	movl	$_UI00000000, %eax
	movl	$10719, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L614:
	movl	-136(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	jne	.L615
	movb	$9, -529(%ebp)
	jmp	.L597
.L615:
	movb	$2, -529(%ebp)
	jmp	.L597
.L607:
	leal	-404(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-336(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-128(%ebp), %eax
	movl	%edx, (%eax)
	movl	-128(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-128(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-128(%ebp), %eax
	movl	(%eax), %edx
	movl	-128(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
	cmpl	$0, -120(%ebp)
	jns	.L616
	movl	$0, -124(%ebp)
	jmp	.L617
.L616:
	movl	-120(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -124(%ebp)
.L617:
	movl	-128(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-392(%ebp), %eax
	movl	%eax, -244(%ebp)
	leal	-356(%ebp), %eax
	movl	%eax, -116(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-116(%ebp), %eax
	movl	(%eax), %edx
	movl	-112(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-108(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-112(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-104(%ebp), %edx
	movl	-116(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L618
	movl	$_UI00000000, %eax
	movl	$10725, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L618:
	leal	-468(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-104(%ebp), %edx
	movl	-328(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -468(%ebp)
	leal	-484(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-88(%ebp), %eax
	movl	4(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-88(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-92(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-88(%ebp), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-468(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO5
	cmpb	$2, %al
	jne	.L619
	call	__ghdl_stack2_mark
	movl	%eax, -84(%ebp)
	leal	-508(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	$-1, (%eax)
	movl	-340(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-60(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	cmpl	$0, -52(%ebp)
	jns	.L620
	movl	$0, -56(%ebp)
	jmp	.L621
.L620:
	movl	-52(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -56(%ebp)
.L621:
	movl	-60(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-496(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-356(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-508(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-68(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-64(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L622
	movl	$_UI00000000, %eax
	movl	$10727, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L622:
	movl	-496(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-64(%ebp), %edx
	movl	-328(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -516(%ebp)
	leal	-508(%ebp), %eax
	movl	%eax, -512(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-492(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-492(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO5
	cmpb	$2, %al
	jne	.L623
	leal	-356(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	subl	-336(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -40(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L624
	movl	$_UI00000000, %eax
	movl	$10729, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L624:
	movl	-40(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	jne	.L625
	movb	$6, -529(%ebp)
	jmp	.L597
.L625:
	movb	$5, -529(%ebp)
	jmp	.L597
.L623:
	leal	-356(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	subl	-336(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L626
	movl	$_UI00000000, %eax
	movl	$10735, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L626:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	jne	.L627
	movb	$7, -529(%ebp)
	jmp	.L597
.L627:
	movb	$4, -529(%ebp)
	jmp	.L597
.L619:
	leal	-356(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	subl	-336(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-4(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-12(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -8(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L628
	movl	$_UI00000000, %eax
	movl	$10742, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L628:
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-328(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	jne	.L629
	movb	$8, -529(%ebp)
	jmp	.L597
.L629:
	movb	$3, -529(%ebp)
.L597:
	movzbl	-529(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__classfp, .-ahir_ieee_proposed__float_pkg__classfp
.globl ahir_ieee_proposed__float_pkg__break_numberO1
	.type	ahir_ieee_proposed__float_pkg__break_numberO1, @function
ahir_ieee_proposed__float_pkg__break_numberO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	movl	8(%ebp), %eax
	movb	$0, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L632
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	jmp	.L633
.L632:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
.L633:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L634
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L635
.L634:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L635:
	movl	-44(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -56(%ebp)
	movb	$0, -49(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -49(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L636
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L637
.L636:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L637:
	movl	-24(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L638
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	jmp	.L639
.L638:
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
.L639:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L640
	movl	$_UI00000000, %eax
	movl	$10761, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L640:
	movl	-20(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movb	%dl, (%eax)
	movl	28(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	16(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-49(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__break_numberO1, .-ahir_ieee_proposed__float_pkg__break_numberO1
.globl ahir_ieee_proposed__float_pkg__abs
	.type	ahir_ieee_proposed__float_pkg__abs, @function
ahir_ieee_proposed__float_pkg__abs:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-88(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	4(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-64(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-60(%ebp), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-76(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -68(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -52(%ebp)
.L644:
	movl	-52(%ebp), %eax
	cmpl	-56(%ebp), %eax
	je	.L643
	movl	-52(%ebp), %edx
	movl	-68(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -52(%ebp)
	jmp	.L644
.L643:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jle	.L645
	call	__ghdl_stack2_mark
	movl	%eax, -48(%ebp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_01
	leal	-96(%ebp), %eax
	movl	%eax, -44(%ebp)
.L649:
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-76(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L646
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-68(%ebp), %ecx
	movl	-72(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-48(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-88(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L647
	jmp	.L656
.L646:
	movl	$_UI00000000, %eax
	movl	$10778, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L649
.L647:
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L650
.L656:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
.L650:
	movl	-32(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L651
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L652
.L651:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L652:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -28(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L653
	movl	$_UI00000000, %eax
	movl	$10779, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L653:
	movl	-28(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %edx
	movl	-68(%ebp), %eax
	movb	$2, (%eax,%edx)
	movl	-76(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -104(%ebp)
	leal	-88(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L655
.L645:
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -112(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L655:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__abs, .-ahir_ieee_proposed__float_pkg__abs
.globl ahir_ieee_proposed__float_pkg__OPMiO1
	.type	ahir_ieee_proposed__float_pkg__OPMiO1, @function
ahir_ieee_proposed__float_pkg__OPMiO1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$164, %esp
	leal	-124(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, (%eax)
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-100(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-96(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-112(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %ecx
	movl	%ecx, -104(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	$0, -88(%ebp)
.L659:
	movl	-88(%ebp), %eax
	cmpl	-92(%ebp), %eax
	je	.L658
	movl	-88(%ebp), %edx
	movl	-104(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -88(%ebp)
	jmp	.L659
.L658:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jle	.L660
	call	__ghdl_stack2_mark
	movl	%eax, -84(%ebp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_01
	leal	-132(%ebp), %eax
	movl	%eax, -80(%ebp)
.L664:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-112(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L661
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-104(%ebp), %ecx
	movl	-108(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-124(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L662
	jmp	.L676
.L661:
	movl	$_UI00000000, %eax
	movl	$10793, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L664
.L662:
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	jmp	.L665
.L676:
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
.L665:
	movl	-68(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-72(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-72(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L666
	movl	-48(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
	jmp	.L667
.L666:
	movl	-52(%ebp), %eax
	movl	-48(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
.L667:
	movl	-56(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-56(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -64(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L668
	movl	$_UI00000000, %eax
	movl	$10794, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L668:
	movl	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L669
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L670
.L669:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
.L670:
	movl	-36(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L671
	movl	-16(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
	jmp	.L672
.L671:
	movl	-20(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
.L672:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-24(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -32(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L673
	movl	$_UI00000000, %eax
	movl	$10794, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L673:
	movl	-32(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-76(%ebp), %ebx
	movl	-44(%ebp), %edx
	movl	-104(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-112(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -140(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L675
.L660:
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -144(%ebp)
	leal	-148(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L675:
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPMiO1, .-ahir_ieee_proposed__float_pkg__OPMiO1
.globl ahir_ieee_proposed__float_pkg__add
	.type	ahir_ieee_proposed__float_pkg__add, @function
ahir_ieee_proposed__float_pkg__add:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1956, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -940(%ebp)
	movl	-940(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L678
	movl	-940(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -948(%ebp)
	jmp	.L679
.L678:
	movl	-940(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -948(%ebp)
.L679:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -936(%ebp)
	movl	-936(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L680
	movl	-936(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -944(%ebp)
	jmp	.L681
.L680:
	movl	-936(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -944(%ebp)
.L681:
	movl	-944(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-948(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -1064(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -924(%ebp)
	movl	-924(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L682
	movl	-924(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -932(%ebp)
	jmp	.L683
.L682:
	movl	-924(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -932(%ebp)
.L683:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -920(%ebp)
	movl	-920(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L684
	movl	-920(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -928(%ebp)
	jmp	.L685
.L684:
	movl	-920(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -928(%ebp)
.L685:
	movl	-928(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-932(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -1060(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -1056(%ebp)
	movb	$0, -1050(%ebp)
	movb	$0, -1049(%ebp)
	leal	-1080(%ebp), %eax
	movl	%eax, -916(%ebp)
	movl	-916(%ebp), %edx
	movl	-1060(%ebp), %eax
	movl	%eax, (%edx)
	movl	-1064(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-916(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-916(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-916(%ebp), %eax
	movl	(%eax), %edx
	movl	-916(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -908(%ebp)
	cmpl	$0, -908(%ebp)
	jns	.L686
	movl	$0, -912(%ebp)
	jmp	.L687
.L686:
	movl	-908(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -912(%ebp)
.L687:
	movl	-916(%ebp), %edx
	movl	-912(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1068(%ebp), %eax
	movl	%eax, -1048(%ebp)
	movl	-1048(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1908(%ebp)
	movl	-1908(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1908(%ebp)
	movl	-1908(%ebp), %ecx
	movl	%ecx, -1044(%ebp)
	movl	-1068(%ebp), %eax
	movl	%eax, -904(%ebp)
	movl	$0, -900(%ebp)
.L689:
	movl	-900(%ebp), %eax
	cmpl	-904(%ebp), %eax
	je	.L688
	movl	-900(%ebp), %edx
	movl	-1044(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -900(%ebp)
	jmp	.L689
.L688:
	leal	-1096(%ebp), %eax
	movl	%eax, -896(%ebp)
	movl	-1064(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-1056(%ebp), %edx
	movl	-896(%ebp), %eax
	movl	%edx, (%eax)
	movl	-896(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-896(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-896(%ebp), %eax
	movl	(%eax), %edx
	movl	-896(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -888(%ebp)
	cmpl	$0, -888(%ebp)
	jns	.L690
	movl	$0, -892(%ebp)
	jmp	.L691
.L690:
	movl	-888(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -892(%ebp)
.L691:
	movl	-896(%ebp), %edx
	movl	-892(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1040(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1904(%ebp)
	movl	-1904(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1904(%ebp)
	movl	-1904(%ebp), %ecx
	movl	%ecx, -1036(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -884(%ebp)
	movl	$0, -880(%ebp)
.L693:
	movl	-880(%ebp), %eax
	cmpl	-884(%ebp), %eax
	je	.L692
	movl	-880(%ebp), %edx
	movl	-1036(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -880(%ebp)
	jmp	.L693
.L692:
	leal	-1096(%ebp), %eax
	movl	%eax, -876(%ebp)
	movl	-1064(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-1056(%ebp), %edx
	movl	-876(%ebp), %eax
	movl	%edx, (%eax)
	movl	-876(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-876(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-876(%ebp), %eax
	movl	(%eax), %edx
	movl	-876(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -868(%ebp)
	cmpl	$0, -868(%ebp)
	jns	.L694
	movl	$0, -872(%ebp)
	jmp	.L695
.L694:
	movl	-868(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -872(%ebp)
.L695:
	movl	-876(%ebp), %edx
	movl	-872(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1040(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1900(%ebp)
	movl	-1900(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1900(%ebp)
	movl	-1900(%ebp), %ecx
	movl	%ecx, -1032(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -864(%ebp)
	movl	$0, -860(%ebp)
.L697:
	movl	-860(%ebp), %eax
	cmpl	-864(%ebp), %eax
	je	.L696
	movl	-860(%ebp), %edx
	movl	-1032(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -860(%ebp)
	jmp	.L697
.L696:
	leal	-1112(%ebp), %eax
	movl	%eax, -856(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -852(%ebp)
	movl	-852(%ebp), %eax
	movl	(%eax), %edx
	movl	-856(%ebp), %eax
	movl	%edx, (%eax)
	movl	-852(%ebp), %eax
	movl	4(%eax), %edx
	movl	-856(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-852(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-856(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-852(%ebp), %eax
	movl	12(%eax), %edx
	movl	-856(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1028(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1896(%ebp)
	movl	-1896(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1896(%ebp)
	movl	-1896(%ebp), %ecx
	movl	%ecx, -1024(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -848(%ebp)
	movl	$0, -844(%ebp)
.L699:
	movl	-844(%ebp), %eax
	cmpl	-848(%ebp), %eax
	je	.L698
	movl	-844(%ebp), %edx
	movl	-1024(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -844(%ebp)
	jmp	.L699
.L698:
	leal	-1112(%ebp), %eax
	movl	%eax, -840(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -836(%ebp)
	movl	-836(%ebp), %eax
	movl	(%eax), %edx
	movl	-840(%ebp), %eax
	movl	%edx, (%eax)
	movl	-836(%ebp), %eax
	movl	4(%eax), %edx
	movl	-840(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-836(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-840(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-836(%ebp), %eax
	movl	12(%eax), %edx
	movl	-840(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1028(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1892(%ebp)
	movl	-1892(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1892(%ebp)
	movl	-1892(%ebp), %ecx
	movl	%ecx, -1020(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -832(%ebp)
	movl	$0, -828(%ebp)
.L701:
	movl	-828(%ebp), %eax
	cmpl	-832(%ebp), %eax
	je	.L700
	movl	-828(%ebp), %edx
	movl	-1020(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -828(%ebp)
	jmp	.L701
.L700:
	leal	-1128(%ebp), %eax
	movl	%eax, -824(%ebp)
	movl	-824(%ebp), %edx
	movl	-1064(%ebp), %eax
	movl	%eax, (%edx)
	movl	-824(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-824(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-824(%ebp), %eax
	movl	(%eax), %edx
	movl	-824(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -816(%ebp)
	cmpl	$0, -816(%ebp)
	jns	.L702
	movl	$0, -820(%ebp)
	jmp	.L703
.L702:
	movl	-816(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -820(%ebp)
.L703:
	movl	-824(%ebp), %edx
	movl	-820(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1116(%ebp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1888(%ebp)
	movl	-1888(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1888(%ebp)
	movl	-1888(%ebp), %ecx
	movl	%ecx, -1012(%ebp)
	movl	-1116(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	$0, -808(%ebp)
.L705:
	movl	-808(%ebp), %eax
	cmpl	-812(%ebp), %eax
	je	.L704
	movl	-808(%ebp), %edx
	movl	-1012(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -808(%ebp)
	jmp	.L705
.L704:
	leal	-1128(%ebp), %eax
	movl	%eax, -804(%ebp)
	movl	-804(%ebp), %edx
	movl	-1064(%ebp), %eax
	movl	%eax, (%edx)
	movl	-804(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-804(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-804(%ebp), %eax
	movl	(%eax), %edx
	movl	-804(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -796(%ebp)
	cmpl	$0, -796(%ebp)
	jns	.L706
	movl	$0, -800(%ebp)
	jmp	.L707
.L706:
	movl	-796(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -800(%ebp)
.L707:
	movl	-804(%ebp), %edx
	movl	-800(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1116(%ebp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1884(%ebp)
	movl	-1884(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1884(%ebp)
	movl	-1884(%ebp), %ecx
	movl	%ecx, -1008(%ebp)
	movl	-1116(%ebp), %eax
	movl	%eax, -792(%ebp)
	movl	$0, -788(%ebp)
.L709:
	movl	-788(%ebp), %eax
	cmpl	-792(%ebp), %eax
	je	.L708
	movl	-788(%ebp), %edx
	movl	-1008(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -788(%ebp)
	jmp	.L709
.L708:
	leal	-1144(%ebp), %eax
	movl	%eax, -784(%ebp)
	movl	-1064(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-1056(%ebp), %edx
	movl	-784(%ebp), %eax
	movl	%edx, (%eax)
	movl	-784(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-784(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-784(%ebp), %eax
	movl	(%eax), %edx
	movl	-784(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -776(%ebp)
	cmpl	$0, -776(%ebp)
	jns	.L710
	movl	$0, -780(%ebp)
	jmp	.L711
.L710:
	movl	-776(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -780(%ebp)
.L711:
	movl	-784(%ebp), %edx
	movl	-780(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1132(%ebp), %eax
	movl	%eax, -1004(%ebp)
	movl	-1004(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1880(%ebp)
	movl	-1880(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1880(%ebp)
	movl	-1880(%ebp), %ecx
	movl	%ecx, -1000(%ebp)
	movl	-1132(%ebp), %eax
	movl	%eax, -772(%ebp)
	movl	$0, -768(%ebp)
.L713:
	movl	-768(%ebp), %eax
	cmpl	-772(%ebp), %eax
	je	.L712
	movl	-768(%ebp), %edx
	movl	-1000(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -768(%ebp)
	jmp	.L713
.L712:
	leal	-1160(%ebp), %eax
	movl	%eax, -764(%ebp)
	movl	-1060(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-764(%ebp), %eax
	movl	%edx, (%eax)
	movl	-764(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-764(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-764(%ebp), %eax
	movl	(%eax), %edx
	movl	-764(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -756(%ebp)
	cmpl	$0, -756(%ebp)
	jns	.L714
	movl	$0, -760(%ebp)
	jmp	.L715
.L714:
	movl	-756(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -760(%ebp)
.L715:
	movl	-764(%ebp), %edx
	movl	-760(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-996(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1876(%ebp)
	movl	-1876(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1876(%ebp)
	movl	-1876(%ebp), %ecx
	movl	%ecx, -992(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -752(%ebp)
	movl	$0, -748(%ebp)
.L717:
	movl	-748(%ebp), %eax
	cmpl	-752(%ebp), %eax
	je	.L716
	movl	-748(%ebp), %edx
	movl	-992(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -748(%ebp)
	jmp	.L717
.L716:
	leal	-1160(%ebp), %eax
	movl	%eax, -744(%ebp)
	movl	-1060(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-744(%ebp), %eax
	movl	%edx, (%eax)
	movl	-744(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-744(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-744(%ebp), %eax
	movl	(%eax), %edx
	movl	-744(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -736(%ebp)
	cmpl	$0, -736(%ebp)
	jns	.L718
	movl	$0, -740(%ebp)
	jmp	.L719
.L718:
	movl	-736(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -740(%ebp)
.L719:
	movl	-744(%ebp), %edx
	movl	-740(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-996(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1872(%ebp)
	movl	-1872(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1872(%ebp)
	movl	-1872(%ebp), %ecx
	movl	%ecx, -988(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -732(%ebp)
	movl	$0, -728(%ebp)
.L721:
	movl	-728(%ebp), %eax
	cmpl	-732(%ebp), %eax
	je	.L720
	movl	-728(%ebp), %edx
	movl	-988(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -728(%ebp)
	jmp	.L721
.L720:
	leal	-1176(%ebp), %eax
	movl	%eax, -724(%ebp)
	movl	-724(%ebp), %edx
	movl	-1060(%ebp), %eax
	movl	%eax, (%edx)
	movl	-724(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-724(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-724(%ebp), %eax
	movl	(%eax), %edx
	movl	-724(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -716(%ebp)
	cmpl	$0, -716(%ebp)
	jns	.L722
	movl	$0, -720(%ebp)
	jmp	.L723
.L722:
	movl	-716(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -720(%ebp)
.L723:
	movl	-724(%ebp), %edx
	movl	-720(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1164(%ebp), %eax
	movl	%eax, -984(%ebp)
	movl	-984(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1868(%ebp)
	movl	-1868(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1868(%ebp)
	movl	-1868(%ebp), %ecx
	movl	%ecx, -980(%ebp)
	movl	-1164(%ebp), %eax
	movl	%eax, -712(%ebp)
	movl	$0, -708(%ebp)
.L725:
	movl	-708(%ebp), %eax
	cmpl	-712(%ebp), %eax
	je	.L724
	movl	-708(%ebp), %edx
	movl	-980(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -708(%ebp)
	jmp	.L725
.L724:
	leal	-1192(%ebp), %eax
	movl	%eax, -704(%ebp)
	movl	-704(%ebp), %edx
	movl	-1060(%ebp), %eax
	movl	%eax, (%edx)
	movl	-704(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-704(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-704(%ebp), %eax
	movl	(%eax), %edx
	movl	-704(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -696(%ebp)
	cmpl	$0, -696(%ebp)
	jns	.L726
	movl	$0, -700(%ebp)
	jmp	.L727
.L726:
	movl	-696(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -700(%ebp)
.L727:
	movl	-704(%ebp), %edx
	movl	-700(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-976(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1864(%ebp)
	movl	-1864(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1864(%ebp)
	movl	-1864(%ebp), %ecx
	movl	%ecx, -972(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -692(%ebp)
	movl	$0, -688(%ebp)
.L729:
	movl	-688(%ebp), %eax
	cmpl	-692(%ebp), %eax
	je	.L728
	movl	-688(%ebp), %edx
	movl	-972(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -688(%ebp)
	jmp	.L729
.L728:
	movb	$0, -966(%ebp)
	movb	$0, -965(%ebp)
	leal	-1208(%ebp), %eax
	movl	%eax, -684(%ebp)
	movl	-684(%ebp), %edx
	movl	-1060(%ebp), %eax
	movl	%eax, (%edx)
	movl	-1064(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-684(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-684(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-684(%ebp), %eax
	movl	(%eax), %edx
	movl	-684(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -676(%ebp)
	cmpl	$0, -676(%ebp)
	jns	.L730
	movl	$0, -680(%ebp)
	jmp	.L731
.L730:
	movl	-676(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -680(%ebp)
.L731:
	movl	-684(%ebp), %edx
	movl	-680(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-964(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1860(%ebp)
	movl	-1860(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1860(%ebp)
	movl	-1860(%ebp), %ecx
	movl	%ecx, -960(%ebp)
	movl	-1196(%ebp), %eax
	movl	%eax, -672(%ebp)
	movl	$0, -668(%ebp)
.L733:
	movl	-668(%ebp), %eax
	cmpl	-672(%ebp), %eax
	je	.L732
	movl	-668(%ebp), %edx
	movl	-960(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -668(%ebp)
	jmp	.L733
.L732:
	leal	-1208(%ebp), %eax
	movl	%eax, -664(%ebp)
	movl	-664(%ebp), %edx
	movl	-1060(%ebp), %eax
	movl	%eax, (%edx)
	movl	-1064(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-664(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-664(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-664(%ebp), %eax
	movl	(%eax), %edx
	movl	-664(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -656(%ebp)
	cmpl	$0, -656(%ebp)
	jns	.L734
	movl	$0, -660(%ebp)
	jmp	.L735
.L734:
	movl	-656(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -660(%ebp)
.L735:
	movl	-664(%ebp), %edx
	movl	-660(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-964(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1856(%ebp)
	movl	-1856(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1856(%ebp)
	movl	-1856(%ebp), %ecx
	movl	%ecx, -956(%ebp)
	movl	-1196(%ebp), %eax
	movl	%eax, -652(%ebp)
	movl	$0, -648(%ebp)
.L737:
	movl	-648(%ebp), %eax
	cmpl	-652(%ebp), %eax
	je	.L736
	movl	-648(%ebp), %edx
	movl	-956(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -648(%ebp)
	jmp	.L737
.L736:
	movb	$0, -949(%ebp)
	cmpl	$0, -1064(%ebp)
	sete	%al
	movb	%al, -642(%ebp)
	cmpb	$0, -642(%ebp)
	jne	.L738
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -642(%ebp)
.L738:
	movzbl	-642(%ebp), %eax
	movb	%al, -643(%ebp)
	cmpb	$0, -643(%ebp)
	jne	.L739
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -643(%ebp)
.L739:
	cmpb	$0, -643(%ebp)
	je	.L740
	movb	$10, -1050(%ebp)
	jmp	.L741
.L740:
	movzbl	28(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -1050(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -1049(%ebp)
.L741:
	cmpb	$10, -1050(%ebp)
	sete	%al
	movb	%al, -641(%ebp)
	cmpb	$0, -641(%ebp)
	jne	.L742
	cmpb	$10, -1049(%ebp)
	sete	%al
	movb	%al, -641(%ebp)
.L742:
	cmpb	$0, -641(%ebp)
	je	.L743
	movl	%esp, %eax
	movl	%eax, -1832(%ebp)
	movl	-1048(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1852(%ebp)
	movl	-1852(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1852(%ebp)
	movl	-1852(%ebp), %ecx
	movl	%ecx, -640(%ebp)
	movl	-1068(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	$0, -632(%ebp)
.L745:
	movl	-632(%ebp), %eax
	cmpl	-636(%ebp), %eax
	je	.L744
	movl	-632(%ebp), %edx
	movl	-640(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -632(%ebp)
	jmp	.L745
.L744:
	movl	-640(%ebp), %eax
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1832(%ebp), %esp
	jmp	.L746
.L743:
	cmpb	$0, -1050(%ebp)
	sete	%al
	movb	%al, -623(%ebp)
	cmpb	$0, -623(%ebp)
	jne	.L747
	cmpb	$1, -1050(%ebp)
	sete	%al
	movb	%al, -623(%ebp)
.L747:
	movzbl	-623(%ebp), %eax
	movb	%al, -624(%ebp)
	cmpb	$0, -624(%ebp)
	jne	.L748
	cmpb	$0, -1049(%ebp)
	sete	%al
	movb	%al, -624(%ebp)
.L748:
	movzbl	-624(%ebp), %eax
	movb	%al, -625(%ebp)
	cmpb	$0, -625(%ebp)
	jne	.L749
	cmpb	$1, -1049(%ebp)
	sete	%al
	movb	%al, -625(%ebp)
.L749:
	movzbl	-625(%ebp), %eax
	movb	%al, -626(%ebp)
	cmpb	$0, -626(%ebp)
	jne	.L750
	cmpb	$9, -1050(%ebp)
	sete	%al
	movb	%al, -622(%ebp)
	cmpb	$1, -622(%ebp)
	jne	.L751
	cmpb	$2, -1049(%ebp)
	sete	%al
	movb	%al, -622(%ebp)
.L751:
	movzbl	-622(%ebp), %eax
	movb	%al, -626(%ebp)
.L750:
	movzbl	-626(%ebp), %eax
	movb	%al, -627(%ebp)
	cmpb	$0, -627(%ebp)
	jne	.L752
	cmpb	$2, -1050(%ebp)
	sete	%al
	movb	%al, -621(%ebp)
	cmpb	$1, -621(%ebp)
	jne	.L753
	cmpb	$9, -1049(%ebp)
	sete	%al
	movb	%al, -621(%ebp)
.L753:
	movzbl	-621(%ebp), %eax
	movb	%al, -627(%ebp)
.L752:
	cmpb	$0, -627(%ebp)
	je	.L754
	call	__ghdl_stack2_mark
	movl	%eax, -620(%ebp)
	movl	-1064(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-1216(%ebp), %eax
	movl	%eax, -616(%ebp)
.L756:
	movl	-616(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1068(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L755
	movl	-616(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-620(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L746
.L755:
	movl	$_UI00000000, %eax
	movl	$10840, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L756
.L754:
	cmpb	$9, -1050(%ebp)
	sete	%al
	movb	%al, -609(%ebp)
	cmpb	$0, -609(%ebp)
	jne	.L757
	cmpb	$9, -1049(%ebp)
	sete	%al
	movb	%al, -609(%ebp)
.L757:
	cmpb	$0, -609(%ebp)
	je	.L758
	call	__ghdl_stack2_mark
	movl	%eax, -608(%ebp)
	movl	-1064(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1224(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-1224(%ebp), %eax
	movl	%eax, -604(%ebp)
.L760:
	movl	-604(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1068(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L759
	movl	-604(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-608(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L746
.L759:
	movl	$_UI00000000, %eax
	movl	$10843, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L760
.L758:
	cmpb	$2, -1050(%ebp)
	sete	%al
	movb	%al, -597(%ebp)
	cmpb	$0, -597(%ebp)
	jne	.L761
	cmpb	$2, -1049(%ebp)
	sete	%al
	movb	%al, -597(%ebp)
.L761:
	cmpb	$0, -597(%ebp)
	je	.L762
	call	__ghdl_stack2_mark
	movl	%eax, -596(%ebp)
	movl	-1064(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1232(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_inffpO1
	leal	-1232(%ebp), %eax
	movl	%eax, -592(%ebp)
.L764:
	movl	-592(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1068(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L763
	movl	-592(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-596(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L746
.L763:
	movl	$_UI00000000, %eax
	movl	$10846, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L764
.L762:
	cmpb	$5, -1050(%ebp)
	sete	%al
	movb	%al, -585(%ebp)
	cmpb	$1, -585(%ebp)
	jne	.L765
	cmpb	$5, -1049(%ebp)
	sete	%al
	movb	%al, -585(%ebp)
.L765:
	cmpb	$0, -585(%ebp)
	je	.L766
	call	__ghdl_stack2_mark
	movl	%eax, -576(%ebp)
	movl	-1064(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1272(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_zerofpO1
	leal	-1272(%ebp), %eax
	movl	%eax, -572(%ebp)
.L768:
	movl	-572(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1068(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L767
	movl	-572(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-576(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L746
.L767:
	movl	$_UI00000000, %eax
	movl	$10849, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L768
.L766:
	call	__ghdl_stack2_mark
	movl	%eax, -568(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1288(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-1064(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1288(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1280(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-1280(%ebp), %eax
	movl	%eax, -564(%ebp)
.L771:
	movl	-564(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1196(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L769
	movl	-564(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-960(%ebp), %ecx
	movl	-964(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-568(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-960(%ebp), %eax
	movl	%eax, -1296(%ebp)
	leal	-1208(%ebp), %eax
	movl	%eax, -1292(%ebp)
	movb	$0, 4(%esp)
	leal	-1296(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -1050(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -560(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1312(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-1064(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1312(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1304(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-1304(%ebp), %eax
	movl	%eax, -556(%ebp)
	jmp	.L770
.L769:
	movl	$_UI00000000, %eax
	movl	$10852, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L771
.L770:
	movl	-556(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1196(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L772
	movl	-556(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-956(%ebp), %ecx
	movl	-964(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-560(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-956(%ebp), %eax
	movl	%eax, -1320(%ebp)
	leal	-1208(%ebp), %eax
	movl	%eax, -1316(%ebp)
	movb	$0, 4(%esp)
	leal	-1320(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -1049(%ebp)
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-960(%ebp), %eax
	movl	%eax, -1328(%ebp)
	leal	-1208(%ebp), %eax
	movl	%eax, -1324(%ebp)
	movl	-1116(%ebp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1008(%ebp), %eax
	movl	%eax, -1336(%ebp)
	leal	-1128(%ebp), %eax
	movl	%eax, -1332(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-992(%ebp), %eax
	movl	%eax, -1344(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1340(%ebp)
	leal	-1344(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-1336(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-1050(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-1328(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	movl	%esp, %eax
	movl	%eax, -1828(%ebp)
	movl	-1040(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1848(%ebp)
	movl	-1848(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1848(%ebp)
	movl	-1848(%ebp), %ecx
	movl	%ecx, -552(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -548(%ebp)
	movl	$0, -544(%ebp)
	jmp	.L773
.L772:
	movl	$_UI00000000, %eax
	movl	$10858, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L770
.L773:
	movl	-544(%ebp), %eax
	cmpl	-548(%ebp), %eax
	je	.L774
	movl	-544(%ebp), %edx
	movl	-552(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -544(%ebp)
	jmp	.L773
.L774:
	movl	-552(%ebp), %edx
	movl	-1036(%ebp), %ecx
	movl	-1040(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1828(%ebp), %esp
	leal	-1248(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-1056(%ebp), %edx
	movl	-1064(%ebp), %eax
	leal	(%eax,%edx), %edx
	movl	-540(%ebp), %eax
	movl	%edx, (%eax)
	movl	-540(%ebp), %edx
	movl	-1056(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-540(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-540(%ebp), %eax
	movl	(%eax), %edx
	movl	-540(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -532(%ebp)
	cmpl	$0, -532(%ebp)
	jns	.L775
	movl	$0, -536(%ebp)
	jmp	.L776
.L775:
	movl	-532(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -536(%ebp)
.L776:
	movl	-540(%ebp), %edx
	movl	-536(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1236(%ebp), %eax
	movl	%eax, -584(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -528(%ebp)
	leal	-1248(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	-528(%ebp), %eax
	movl	(%eax), %edx
	movl	-524(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -520(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -516(%ebp)
	movl	-520(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-524(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-516(%ebp), %edx
	movl	-528(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L777
	movl	$_UI00000000, %eax
	movl	$10871, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L777:
	movl	-1008(%ebp), %eax
	movl	%eax, -512(%ebp)
.L780:
	movl	-1116(%ebp), %edx
	movl	-1236(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L778
	movl	-512(%ebp), %ecx
	movl	-516(%ebp), %edx
	movl	-1036(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-584(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-1196(%ebp), %eax
	movl	%eax, -964(%ebp)
	movl	-956(%ebp), %eax
	movl	%eax, -1352(%ebp)
	leal	-1208(%ebp), %eax
	movl	%eax, -1348(%ebp)
	movl	-1116(%ebp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1012(%ebp), %eax
	movl	%eax, -1360(%ebp)
	leal	-1128(%ebp), %eax
	movl	%eax, -1356(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, -1368(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1364(%ebp)
	leal	-1368(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-1360(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-1049(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-1352(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	movl	%esp, %eax
	movl	%eax, -1824(%ebp)
	movl	-1040(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1844(%ebp)
	movl	-1844(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1844(%ebp)
	movl	-1844(%ebp), %ecx
	movl	%ecx, -508(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -504(%ebp)
	movl	$0, -500(%ebp)
	jmp	.L779
.L778:
	movl	$_UI00000000, %eax
	movl	$10816, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L780
.L779:
	movl	-500(%ebp), %eax
	cmpl	-504(%ebp), %eax
	je	.L781
	movl	-500(%ebp), %edx
	movl	-508(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -500(%ebp)
	jmp	.L779
.L781:
	movl	-508(%ebp), %edx
	movl	-1032(%ebp), %ecx
	movl	-1040(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1824(%ebp), %esp
	leal	-1264(%ebp), %eax
	movl	%eax, -496(%ebp)
	movl	-1056(%ebp), %edx
	movl	-1064(%ebp), %eax
	leal	(%eax,%edx), %edx
	movl	-496(%ebp), %eax
	movl	%edx, (%eax)
	movl	-496(%ebp), %edx
	movl	-1056(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-496(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-496(%ebp), %eax
	movl	(%eax), %edx
	movl	-496(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -488(%ebp)
	cmpl	$0, -488(%ebp)
	jns	.L782
	movl	$0, -492(%ebp)
	jmp	.L783
.L782:
	movl	-488(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -492(%ebp)
.L783:
	movl	-496(%ebp), %edx
	movl	-492(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1252(%ebp), %eax
	movl	%eax, -580(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -484(%ebp)
	leal	-1264(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-484(%ebp), %eax
	movl	(%eax), %edx
	movl	-480(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	-476(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-480(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-472(%ebp), %edx
	movl	-484(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L784
	movl	$_UI00000000, %eax
	movl	$10879, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L784:
	movl	-1012(%ebp), %eax
	movl	%eax, -468(%ebp)
.L788:
	movl	-1116(%ebp), %edx
	movl	-1252(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L785
	movl	-468(%ebp), %ecx
	movl	-472(%ebp), %edx
	movl	-1032(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-580(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	call	__ghdl_stack2_mark
	movl	%eax, -464(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -452(%ebp)
	movl	-452(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -444(%ebp)
	movl	-444(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	-444(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-452(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -448(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L786
	jmp	.L787
.L785:
	movl	$_UI00000000, %eax
	movl	$10816, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L788
.L786:
	movl	$_UI00000000, %eax
	movl	$10880, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L787:
	movl	-448(%ebp), %eax
	movl	%eax, -460(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-992(%ebp), %eax
	movl	%eax, -1384(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1380(%ebp)
	movl	-460(%ebp), %edx
	movl	-992(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1393(%ebp)
	leal	-1393(%ebp), %eax
	movl	%eax, -1392(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1388(%ebp)
	leal	-1384(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1392(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1404(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, -1412(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1408(%ebp)
	leal	-1412(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1404(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1376(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO3
	leal	-1376(%ebp), %eax
	movl	%eax, -456(%ebp)
.L792:
	movl	-456(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1180(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L789
	movl	-456(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-972(%ebp), %ecx
	movl	-976(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-464(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1420(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1416(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -436(%ebp)
	movl	-436(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L790
	jmp	.L887
.L789:
	movl	$_UI00000000, %eax
	movl	$10880, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L792
.L790:
	movl	-436(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -440(%ebp)
	jmp	.L793
.L887:
	movl	-436(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -440(%ebp)
.L793:
	movl	-440(%ebp), %eax
	negl	%eax
	movl	%eax, 4(%esp)
	leal	-1420(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO6
	testb	%al, %al
	je	.L794
	leal	-1160(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-420(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -412(%ebp)
	movl	-412(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	-412(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-420(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -416(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L795
	movl	$_UI00000000, %eax
	movl	$10882, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L795:
	movl	-416(%ebp), %eax
	movl	%eax, -432(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, -1428(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1424(%ebp)
	movl	-432(%ebp), %edx
	movl	-988(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1437(%ebp)
	leal	-1437(%ebp), %eax
	movl	%eax, -1436(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1432(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -428(%ebp)
	leal	-1428(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1436(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1448(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	leal	-1448(%ebp), %eax
	movl	%eax, -424(%ebp)
.L798:
	movl	-424(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L796
	movl	-424(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-980(%ebp), %ecx
	movl	-984(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-428(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1032(%ebp), %eax
	movl	%eax, -408(%ebp)
	jmp	.L797
.L796:
	movl	$_UI00000000, %eax
	movl	$10882, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L798
.L797:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L799
	movl	-408(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	%esp, %eax
	movl	%eax, -1820(%ebp)
	movl	-1028(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1840(%ebp)
	movl	-1840(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1840(%ebp)
	movl	-1840(%ebp), %ecx
	movl	%ecx, -404(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	$0, -396(%ebp)
	jmp	.L800
.L799:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L797
.L800:
	movl	-396(%ebp), %eax
	cmpl	-400(%ebp), %eax
	je	.L801
	movl	-396(%ebp), %edx
	movl	-404(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -396(%ebp)
	jmp	.L800
.L801:
	movl	-404(%ebp), %edx
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1820(%ebp), %esp
	movb	$0, -965(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1036(%ebp), %eax
	movl	%eax, -1456(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1452(%ebp)
	leal	-1456(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movb	%al, -949(%ebp)
	jmp	.L802
.L794:
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1464(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1460(%ebp)
	movl	$0, 4(%esp)
	leal	-1464(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO6
	testb	%al, %al
	je	.L803
	call	__ghdl_stack2_mark
	movl	%eax, -392(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1480(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1476(%ebp)
	leal	-1480(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1472(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	leal	-1472(%ebp), %eax
	movl	%eax, -388(%ebp)
.L806:
	movl	-388(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1180(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L804
	movl	-388(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-972(%ebp), %ecx
	movl	-976(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -384(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1036(%ebp), %eax
	movl	%eax, -1496(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1492(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1504(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1500(%ebp)
	leal	-1504(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, 8(%esp)
	leal	-1496(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1488(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_rightO1
	leal	-1488(%ebp), %eax
	movl	%eax, -380(%ebp)
	jmp	.L805
.L804:
	movl	$_UI00000000, %eax
	movl	$10888, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L806
.L805:
	movl	-380(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L807
	movl	-380(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-384(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1032(%ebp), %eax
	movl	%eax, -376(%ebp)
	jmp	.L808
.L807:
	movl	$_UI00000000, %eax
	movl	$10889, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L805
.L808:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L809
	movl	-376(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-1160(%ebp), %eax
	movl	%eax, -360(%ebp)
	movl	-360(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -352(%ebp)
	movl	-352(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-352(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-360(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -356(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L810
	jmp	.L811
.L809:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L808
.L810:
	movl	$_UI00000000, %eax
	movl	$10891, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L811:
	movl	-356(%ebp), %eax
	movl	%eax, -372(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, -1512(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1508(%ebp)
	movl	-372(%ebp), %edx
	movl	-988(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1521(%ebp)
	leal	-1521(%ebp), %eax
	movl	%eax, -1520(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1516(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -368(%ebp)
	leal	-1512(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1520(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1532(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	leal	-1532(%ebp), %eax
	movl	%eax, -364(%ebp)
.L813:
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L812
	movl	-364(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-980(%ebp), %ecx
	movl	-984(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-368(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$0, -965(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1036(%ebp), %eax
	movl	%eax, -1540(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1536(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1548(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1544(%ebp)
	leal	-1548(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, 4(%esp)
	leal	-1540(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__smallfract
	movb	%al, -949(%ebp)
	jmp	.L802
.L812:
	movl	$_UI00000000, %eax
	movl	$10891, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L813
.L803:
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1556(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1552(%ebp)
	movl	$0, 4(%esp)
	leal	-1556(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPEqO6
	testb	%al, %al
	je	.L814
	leal	-1160(%ebp), %eax
	movl	%eax, -336(%ebp)
	movl	-336(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -328(%ebp)
	movl	-328(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-328(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-336(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -332(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L815
	movl	$_UI00000000, %eax
	movl	$10896, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L815:
	movl	-332(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-992(%ebp), %eax
	movl	%eax, -1564(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1560(%ebp)
	movl	-348(%ebp), %edx
	movl	-992(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1573(%ebp)
	leal	-1573(%ebp), %eax
	movl	%eax, -1572(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1568(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -344(%ebp)
	leal	-1564(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1572(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1584(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	leal	-1584(%ebp), %eax
	movl	%eax, -340(%ebp)
.L819:
	movl	-340(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L816
	movl	-340(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-980(%ebp), %ecx
	movl	-984(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-344(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$2, -949(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1032(%ebp), %eax
	movl	%eax, -1592(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1588(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1036(%ebp), %eax
	movl	%eax, -1600(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1596(%ebp)
	leal	-1600(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1592(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	testb	%al, %al
	jne	.L817
	jmp	.L888
.L816:
	movl	$_UI00000000, %eax
	movl	$10896, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L819
.L817:
	movl	-1032(%ebp), %eax
	movl	%eax, -324(%ebp)
.L822:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L820
	movl	-324(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1036(%ebp), %eax
	movl	%eax, -320(%ebp)
	jmp	.L821
.L820:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L822
.L821:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L823
	movl	-320(%ebp), %eax
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movb	$0, -965(%ebp)
	jmp	.L802
.L823:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L821
.L888:
	movl	-1036(%ebp), %eax
	movl	%eax, -316(%ebp)
.L827:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L825
	movl	-316(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1032(%ebp), %eax
	movl	%eax, -312(%ebp)
	jmp	.L826
.L825:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L827
.L826:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L828
	movl	-312(%ebp), %eax
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movb	$1, -965(%ebp)
	jmp	.L802
.L828:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L826
.L814:
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1608(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1604(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L829
	movl	-304(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -308(%ebp)
	jmp	.L830
.L829:
	movl	-304(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -308(%ebp)
.L830:
	movl	-308(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1608(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO6
	testb	%al, %al
	je	.L831
	leal	-1160(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -280(%ebp)
	movl	-280(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-280(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -284(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L832
	movl	$_UI00000000, %eax
	movl	$10908, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L832:
	movl	-284(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-992(%ebp), %eax
	movl	%eax, -1616(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1612(%ebp)
	movl	-300(%ebp), %edx
	movl	-992(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1625(%ebp)
	leal	-1625(%ebp), %eax
	movl	%eax, -1624(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1620(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -296(%ebp)
	leal	-1616(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1624(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1636(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	leal	-1636(%ebp), %eax
	movl	%eax, -292(%ebp)
.L835:
	movl	-292(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L833
	movl	-292(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-980(%ebp), %ecx
	movl	-984(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-296(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	%esp, %eax
	movl	%eax, -1816(%ebp)
	movl	-1028(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1836(%ebp)
	movl	-1836(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1836(%ebp)
	movl	-1836(%ebp), %ecx
	movl	%ecx, -276(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	$0, -268(%ebp)
	jmp	.L834
.L833:
	movl	$_UI00000000, %eax
	movl	$10908, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L835
.L834:
	movl	-268(%ebp), %eax
	cmpl	-272(%ebp), %eax
	je	.L836
	movl	-268(%ebp), %edx
	movl	-276(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -268(%ebp)
	jmp	.L834
.L836:
	movl	-276(%ebp), %edx
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1816(%ebp), %esp
	movl	-1036(%ebp), %eax
	movl	%eax, -264(%ebp)
.L838:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L837
	movl	-264(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movb	$1, -965(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1032(%ebp), %eax
	movl	%eax, -1644(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1640(%ebp)
	leal	-1644(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movb	%al, -949(%ebp)
	jmp	.L802
.L837:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L838
.L831:
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1652(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1648(%ebp)
	movl	$0, 4(%esp)
	leal	-1652(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO6
	testb	%al, %al
	je	.L802
	call	__ghdl_stack2_mark
	movl	%eax, -260(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1032(%ebp), %eax
	movl	%eax, -1668(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1664(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1676(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1672(%ebp)
	leal	-1676(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, 8(%esp)
	leal	-1668(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1660(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_rightO1
	leal	-1660(%ebp), %eax
	movl	%eax, -256(%ebp)
.L841:
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L839
	movl	-256(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1020(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-260(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-1036(%ebp), %eax
	movl	%eax, -252(%ebp)
	jmp	.L840
.L839:
	movl	$_UI00000000, %eax
	movl	$10914, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L841
.L840:
	movl	-1084(%ebp), %edx
	movl	-1100(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L842
	movl	-252(%ebp), %edx
	movl	-1024(%ebp), %ecx
	movl	-1028(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-1160(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	(%eax), %edx
	movl	-1060(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-228(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-236(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -232(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L843
	jmp	.L844
.L842:
	movl	$_UI00000000, %eax
	movl	$10814, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L840
.L843:
	movl	$_UI00000000, %eax
	movl	$10916, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L844:
	movl	-232(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-1148(%ebp), %eax
	movl	%eax, -996(%ebp)
	movl	-992(%ebp), %eax
	movl	%eax, -1684(%ebp)
	leal	-1160(%ebp), %eax
	movl	%eax, -1680(%ebp)
	movl	-248(%ebp), %edx
	movl	-992(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, -1693(%ebp)
	leal	-1693(%ebp), %eax
	movl	%eax, -1692(%ebp)
	movl	$ieee__numeric_std__signed__BR1, -1688(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -244(%ebp)
	leal	-1684(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1692(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1704(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__signed_CONCAT
	leal	-1704(%ebp), %eax
	movl	%eax, -240(%ebp)
.L846:
	movl	-240(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1164(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L845
	movl	-240(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-980(%ebp), %ecx
	movl	-984(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-244(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$1, -965(%ebp)
	movl	-1084(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-1032(%ebp), %eax
	movl	%eax, -1712(%ebp)
	leal	-1096(%ebp), %eax
	movl	%eax, -1708(%ebp)
	movl	-1180(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-972(%ebp), %eax
	movl	%eax, -1720(%ebp)
	leal	-1192(%ebp), %eax
	movl	%eax, -1716(%ebp)
	leal	-1720(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, 4(%esp)
	leal	-1712(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__smallfract
	movb	%al, -949(%ebp)
	jmp	.L802
.L845:
	movl	$_UI00000000, %eax
	movl	$10916, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L846
.L802:
	leal	-1112(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	-212(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-220(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -216(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L847
	movl	$_UI00000000, %eax
	movl	$10922, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L847:
	movl	-216(%ebp), %eax
	movl	%eax, -224(%ebp)
	leal	-1112(%ebp), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -196(%ebp)
	movl	-196(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	-196(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-204(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -200(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L848
	movl	$_UI00000000, %eax
	movl	$10922, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L848:
	movl	-200(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-224(%ebp), %ebx
	movl	-208(%ebp), %edx
	movl	-1020(%ebp), %eax
	movzbl	(%eax,%edx), %edx
	movzbl	-949(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__orO1
	movl	%eax, %edx
	movl	-1020(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -184(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L849
	movl	-172(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -180(%ebp)
	jmp	.L850
.L849:
	movl	-172(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -180(%ebp)
.L850:
	movl	-180(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-184(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -160(%ebp)
	movl	-184(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L851
	movl	-160(%ebp), %eax
	movl	-164(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -168(%ebp)
	jmp	.L852
.L851:
	movl	-164(%ebp), %eax
	movl	-160(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -168(%ebp)
.L852:
	movl	-168(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-168(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -176(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L853
	movl	$_UI00000000, %eax
	movl	$10923, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L853:
	movl	-176(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -156(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L854
	movl	-144(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -152(%ebp)
	jmp	.L855
.L854:
	movl	-144(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -152(%ebp)
.L855:
	movl	-152(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-156(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
	movl	-156(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L856
	movl	-132(%ebp), %eax
	movl	-136(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -140(%ebp)
	jmp	.L857
.L856:
	movl	-136(%ebp), %eax
	movl	-132(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -140(%ebp)
.L857:
	movl	-140(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-140(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-156(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -148(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L858
	movl	$_UI00000000, %eax
	movl	$10923, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L858:
	movl	-148(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-192(%ebp), %eax
	movzbl	(%edx,%eax), %ecx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-188(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	%al, %cl
	jne	.L859
	call	__ghdl_stack2_mark
	movl	%eax, -128(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1024(%ebp), %eax
	movl	%eax, -1736(%ebp)
	leal	-1112(%ebp), %eax
	movl	%eax, -1732(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1020(%ebp), %eax
	movl	%eax, -1744(%ebp)
	leal	-1112(%ebp), %eax
	movl	%eax, -1740(%ebp)
	leal	-1744(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1736(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1728(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO1
	leal	-1728(%ebp), %eax
	movl	%eax, -124(%ebp)
.L863:
	movl	-124(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L860
	movl	-124(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1000(%ebp), %ecx
	movl	-1004(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -116(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L861
	jmp	.L889
.L860:
	movl	$_UI00000000, %eax
	movl	$10924, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L863
.L861:
	movl	-104(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	jmp	.L864
.L889:
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -112(%ebp)
.L864:
	movl	-112(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-116(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-116(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L865
	movl	-92(%ebp), %eax
	movl	-96(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -100(%ebp)
	jmp	.L866
.L865:
	movl	-96(%ebp), %eax
	movl	-92(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -100(%ebp)
.L866:
	movl	-100(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-100(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-116(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -108(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L867
	movl	$_UI00000000, %eax
	movl	$10925, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L867:
	movl	-108(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-120(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -966(%ebp)
	jmp	.L868
.L859:
	call	__ghdl_stack2_mark
	movl	%eax, -88(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1024(%ebp), %eax
	movl	%eax, -1760(%ebp)
	leal	-1112(%ebp), %eax
	movl	%eax, -1756(%ebp)
	movl	-1100(%ebp), %eax
	movl	%eax, -1028(%ebp)
	movl	-1020(%ebp), %eax
	movl	%eax, -1768(%ebp)
	leal	-1112(%ebp), %eax
	movl	%eax, -1764(%ebp)
	leal	-1768(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1760(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1752(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO2
	leal	-1752(%ebp), %eax
	movl	%eax, -84(%ebp)
.L872:
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L869
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1000(%ebp), %ecx
	movl	-1004(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	cmpb	$0, -965(%ebp)
	jne	.L870
	jmp	.L890
.L869:
	movl	$_UI00000000, %eax
	movl	$10927, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L872
.L870:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L873
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L874
.L873:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L874:
	movl	-72(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L875
	movl	-52(%ebp), %eax
	movl	-56(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	jmp	.L876
.L875:
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
.L876:
	movl	-60(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-60(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -68(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L877
	movl	$_UI00000000, %eax
	movl	$10929, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L877:
	movl	-68(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -966(%ebp)
	jmp	.L868
.L890:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L878
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L879
.L878:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L879:
	movl	-40(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L880
	movl	-20(%ebp), %eax
	movl	-24(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -28(%ebp)
	jmp	.L881
.L880:
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -28(%ebp)
.L881:
	movl	-28(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-28(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -36(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L882
	movl	$_UI00000000, %eax
	movl	$10931, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L882:
	movl	-36(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -966(%ebp)
.L868:
	movl	-1132(%ebp), %eax
	movl	%eax, -1004(%ebp)
	movl	-1000(%ebp), %eax
	movl	%eax, -1776(%ebp)
	leal	-1144(%ebp), %eax
	movl	%eax, -1772(%ebp)
	leal	-1776(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	cmpb	$2, %al
	jne	.L883
	movb	$2, -966(%ebp)
.L883:
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movl	-1132(%ebp), %eax
	movl	%eax, -1004(%ebp)
	movl	-1000(%ebp), %eax
	movl	%eax, -1792(%ebp)
	leal	-1144(%ebp), %eax
	movl	%eax, -1788(%ebp)
	movl	-1164(%ebp), %eax
	movl	%eax, -984(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -1800(%ebp)
	leal	-1176(%ebp), %eax
	movl	%eax, -1796(%ebp)
	movl	-1056(%ebp), %eax
	movl	%eax, 36(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movl	-1064(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-1060(%ebp), %eax
	movl	%eax, 20(%esp)
	movzbl	-949(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	-966(%ebp), %eax
	movb	%al, 12(%esp)
	leal	-1800(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1792(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1784(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-1784(%ebp), %eax
	movl	%eax, -12(%ebp)
.L885:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1068(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L884
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-1044(%ebp), %ecx
	movl	-1048(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L746
.L884:
	movl	$_UI00000000, %eax
	movl	$10938, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L885
.L746:
	movl	-1068(%ebp), %eax
	movl	%eax, -1048(%ebp)
	movl	-1044(%ebp), %eax
	movl	%eax, -1808(%ebp)
	leal	-1080(%ebp), %eax
	movl	%eax, -1804(%ebp)
	leal	-1808(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__add, .-ahir_ieee_proposed__float_pkg__add
.globl ahir_ieee_proposed__float_pkg__subtract
	.type	ahir_ieee_proposed__float_pkg__subtract, @function
ahir_ieee_proposed__float_pkg__subtract:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-56(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-32(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$0, -20(%ebp)
.L893:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L892
	movl	-20(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -20(%ebp)
	jmp	.L893
.L892:
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-64(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPMiO1
	leal	-64(%ebp), %eax
	movl	%eax, -12(%ebp)
.L895:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L894
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-36(%ebp), %ecx
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -76(%ebp)
	movzbl	32(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	28(%ebp), %eax
	movb	%al, 20(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 16(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-72(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L894:
	movl	$_UI00000000, %eax
	movl	$10961, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L895
	.size	ahir_ieee_proposed__float_pkg__subtract, .-ahir_ieee_proposed__float_pkg__subtract
.globl ahir_ieee_proposed__float_pkg__multiply
	.type	ahir_ieee_proposed__float_pkg__multiply, @function
ahir_ieee_proposed__float_pkg__multiply:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$1208, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -588(%ebp)
	movl	-588(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L898
	movl	-588(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -596(%ebp)
	jmp	.L899
.L898:
	movl	-588(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -596(%ebp)
.L899:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -584(%ebp)
	movl	-584(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L900
	movl	-584(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -592(%ebp)
	jmp	.L901
.L900:
	movl	-584(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -592(%ebp)
.L901:
	movl	-592(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-596(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -692(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -572(%ebp)
	movl	-572(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L902
	movl	-572(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -580(%ebp)
	jmp	.L903
.L902:
	movl	-572(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -580(%ebp)
.L903:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L904
	movl	-568(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -576(%ebp)
	jmp	.L905
.L904:
	movl	-568(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -576(%ebp)
.L905:
	movl	-576(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-580(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -688(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -684(%ebp)
	movb	$0, -678(%ebp)
	movb	$0, -677(%ebp)
	leal	-708(%ebp), %eax
	movl	%eax, -564(%ebp)
	movl	-564(%ebp), %edx
	movl	-688(%ebp), %eax
	movl	%eax, (%edx)
	movl	-692(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-564(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-564(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-564(%ebp), %eax
	movl	(%eax), %edx
	movl	-564(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -556(%ebp)
	cmpl	$0, -556(%ebp)
	jns	.L906
	movl	$0, -560(%ebp)
	jmp	.L907
.L906:
	movl	-556(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -560(%ebp)
.L907:
	movl	-564(%ebp), %edx
	movl	-560(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-696(%ebp), %eax
	movl	%eax, -676(%ebp)
	movl	-676(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1168(%ebp)
	movl	-1168(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1168(%ebp)
	movl	-1168(%ebp), %ecx
	movl	%ecx, -672(%ebp)
	movl	-696(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	$0, -548(%ebp)
.L909:
	movl	-548(%ebp), %eax
	cmpl	-552(%ebp), %eax
	je	.L908
	movl	-548(%ebp), %edx
	movl	-672(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -548(%ebp)
	jmp	.L909
.L908:
	leal	-724(%ebp), %eax
	movl	%eax, -544(%ebp)
	movl	-544(%ebp), %edx
	movl	-692(%ebp), %eax
	movl	%eax, (%edx)
	movl	-544(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-544(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-544(%ebp), %eax
	movl	(%eax), %edx
	movl	-544(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -536(%ebp)
	cmpl	$0, -536(%ebp)
	jns	.L910
	movl	$0, -540(%ebp)
	jmp	.L911
.L910:
	movl	-536(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -540(%ebp)
.L911:
	movl	-544(%ebp), %edx
	movl	-540(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1164(%ebp)
	movl	-1164(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1164(%ebp)
	movl	-1164(%ebp), %ecx
	movl	%ecx, -664(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	$0, -528(%ebp)
.L913:
	movl	-528(%ebp), %eax
	cmpl	-532(%ebp), %eax
	je	.L912
	movl	-528(%ebp), %edx
	movl	-664(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -528(%ebp)
	jmp	.L913
.L912:
	leal	-724(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	-524(%ebp), %edx
	movl	-692(%ebp), %eax
	movl	%eax, (%edx)
	movl	-524(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-524(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-524(%ebp), %eax
	movl	(%eax), %edx
	movl	-524(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -516(%ebp)
	cmpl	$0, -516(%ebp)
	jns	.L914
	movl	$0, -520(%ebp)
	jmp	.L915
.L914:
	movl	-516(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -520(%ebp)
.L915:
	movl	-524(%ebp), %edx
	movl	-520(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1160(%ebp)
	movl	-1160(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1160(%ebp)
	movl	-1160(%ebp), %ecx
	movl	%ecx, -660(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -512(%ebp)
	movl	$0, -508(%ebp)
.L917:
	movl	-508(%ebp), %eax
	cmpl	-512(%ebp), %eax
	je	.L916
	movl	-508(%ebp), %edx
	movl	-660(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -508(%ebp)
	jmp	.L917
.L916:
	leal	-740(%ebp), %eax
	movl	%eax, -504(%ebp)
	movl	-692(%ebp), %eax
	addl	%eax, %eax
	leal	1(%eax), %edx
	movl	-504(%ebp), %eax
	movl	%edx, (%eax)
	movl	-504(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-504(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-504(%ebp), %eax
	movl	(%eax), %edx
	movl	-504(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -496(%ebp)
	cmpl	$0, -496(%ebp)
	jns	.L918
	movl	$0, -500(%ebp)
	jmp	.L919
.L918:
	movl	-496(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -500(%ebp)
.L919:
	movl	-504(%ebp), %edx
	movl	-500(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-728(%ebp), %eax
	movl	%eax, -656(%ebp)
	movl	-656(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1156(%ebp)
	movl	-1156(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1156(%ebp)
	movl	-1156(%ebp), %ecx
	movl	%ecx, -652(%ebp)
	movl	-728(%ebp), %eax
	movl	%eax, -492(%ebp)
	movl	$0, -488(%ebp)
.L921:
	movl	-488(%ebp), %eax
	cmpl	-492(%ebp), %eax
	je	.L920
	movl	-488(%ebp), %edx
	movl	-652(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -488(%ebp)
	jmp	.L921
.L920:
	leal	-756(%ebp), %eax
	movl	%eax, -484(%ebp)
	movl	-692(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-684(%ebp), %edx
	movl	-484(%ebp), %eax
	movl	%edx, (%eax)
	movl	-484(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-484(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-484(%ebp), %eax
	movl	(%eax), %edx
	movl	-484(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -476(%ebp)
	cmpl	$0, -476(%ebp)
	jns	.L922
	movl	$0, -480(%ebp)
	jmp	.L923
.L922:
	movl	-476(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -480(%ebp)
.L923:
	movl	-484(%ebp), %edx
	movl	-480(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-744(%ebp), %eax
	movl	%eax, -648(%ebp)
	movl	-648(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1152(%ebp)
	movl	-1152(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1152(%ebp)
	movl	-1152(%ebp), %ecx
	movl	%ecx, -644(%ebp)
	movl	-744(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	$0, -468(%ebp)
.L925:
	movl	-468(%ebp), %eax
	cmpl	-472(%ebp), %eax
	je	.L924
	movl	-468(%ebp), %edx
	movl	-644(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -468(%ebp)
	jmp	.L925
.L924:
	movl	$-2147483648, -640(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-688(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-464(%ebp), %eax
	movl	%edx, (%eax)
	movl	-464(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-464(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-464(%ebp), %eax
	movl	(%eax), %edx
	movl	-464(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -456(%ebp)
	cmpl	$0, -456(%ebp)
	jns	.L926
	movl	$0, -460(%ebp)
	jmp	.L927
.L926:
	movl	-456(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -460(%ebp)
.L927:
	movl	-464(%ebp), %edx
	movl	-460(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1148(%ebp)
	movl	-1148(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1148(%ebp)
	movl	-1148(%ebp), %ecx
	movl	%ecx, -632(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -452(%ebp)
	movl	$0, -448(%ebp)
.L929:
	movl	-448(%ebp), %eax
	cmpl	-452(%ebp), %eax
	je	.L928
	movl	-448(%ebp), %edx
	movl	-632(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -448(%ebp)
	jmp	.L929
.L928:
	leal	-772(%ebp), %eax
	movl	%eax, -444(%ebp)
	movl	-688(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-444(%ebp), %eax
	movl	%edx, (%eax)
	movl	-444(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-444(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-444(%ebp), %eax
	movl	(%eax), %edx
	movl	-444(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -436(%ebp)
	cmpl	$0, -436(%ebp)
	jns	.L930
	movl	$0, -440(%ebp)
	jmp	.L931
.L930:
	movl	-436(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -440(%ebp)
.L931:
	movl	-444(%ebp), %edx
	movl	-440(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1144(%ebp)
	movl	-1144(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1144(%ebp)
	movl	-1144(%ebp), %ecx
	movl	%ecx, -628(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -432(%ebp)
	movl	$0, -428(%ebp)
.L933:
	movl	-428(%ebp), %eax
	cmpl	-432(%ebp), %eax
	je	.L932
	movl	-428(%ebp), %edx
	movl	-628(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -428(%ebp)
	jmp	.L933
.L932:
	leal	-788(%ebp), %eax
	movl	%eax, -424(%ebp)
	movl	-688(%ebp), %eax
	leal	1(%eax), %edx
	movl	-424(%ebp), %eax
	movl	%edx, (%eax)
	movl	-424(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-424(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-424(%ebp), %eax
	movl	(%eax), %edx
	movl	-424(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -416(%ebp)
	cmpl	$0, -416(%ebp)
	jns	.L934
	movl	$0, -420(%ebp)
	jmp	.L935
.L934:
	movl	-416(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -420(%ebp)
.L935:
	movl	-424(%ebp), %edx
	movl	-420(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-776(%ebp), %eax
	movl	%eax, -624(%ebp)
	movl	-624(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1140(%ebp)
	movl	-1140(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1140(%ebp)
	movl	-1140(%ebp), %ecx
	movl	%ecx, -620(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	$0, -408(%ebp)
.L937:
	movl	-408(%ebp), %eax
	cmpl	-412(%ebp), %eax
	je	.L936
	movl	-408(%ebp), %edx
	movl	-620(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -408(%ebp)
	jmp	.L937
.L936:
	movb	$0, -613(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -404(%ebp)
	movl	-404(%ebp), %edx
	movl	-688(%ebp), %eax
	movl	%eax, (%edx)
	movl	-692(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-404(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-404(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-404(%ebp), %eax
	movl	(%eax), %edx
	movl	-404(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -396(%ebp)
	cmpl	$0, -396(%ebp)
	jns	.L938
	movl	$0, -400(%ebp)
	jmp	.L939
.L938:
	movl	-396(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -400(%ebp)
.L939:
	movl	-404(%ebp), %edx
	movl	-400(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-612(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1136(%ebp)
	movl	-1136(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1136(%ebp)
	movl	-1136(%ebp), %ecx
	movl	%ecx, -608(%ebp)
	movl	-792(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	$0, -388(%ebp)
.L941:
	movl	-388(%ebp), %eax
	cmpl	-392(%ebp), %eax
	je	.L940
	movl	-388(%ebp), %edx
	movl	-608(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -388(%ebp)
	jmp	.L941
.L940:
	leal	-804(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-384(%ebp), %edx
	movl	-688(%ebp), %eax
	movl	%eax, (%edx)
	movl	-692(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-384(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-384(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-384(%ebp), %eax
	movl	(%eax), %edx
	movl	-384(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -376(%ebp)
	cmpl	$0, -376(%ebp)
	jns	.L942
	movl	$0, -380(%ebp)
	jmp	.L943
.L942:
	movl	-376(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -380(%ebp)
.L943:
	movl	-384(%ebp), %edx
	movl	-380(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-612(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1132(%ebp)
	movl	-1132(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1132(%ebp)
	movl	-1132(%ebp), %ecx
	movl	%ecx, -604(%ebp)
	movl	-792(%ebp), %eax
	movl	%eax, -372(%ebp)
	movl	$0, -368(%ebp)
.L945:
	movl	-368(%ebp), %eax
	cmpl	-372(%ebp), %eax
	je	.L944
	movl	-368(%ebp), %edx
	movl	-604(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -368(%ebp)
	jmp	.L945
.L944:
	movb	$0, -597(%ebp)
	cmpl	$0, -692(%ebp)
	sete	%al
	movb	%al, -362(%ebp)
	cmpb	$0, -362(%ebp)
	jne	.L946
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -362(%ebp)
.L946:
	movzbl	-362(%ebp), %eax
	movb	%al, -363(%ebp)
	cmpb	$0, -363(%ebp)
	jne	.L947
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -363(%ebp)
.L947:
	cmpb	$0, -363(%ebp)
	je	.L948
	movb	$10, -678(%ebp)
	jmp	.L949
.L948:
	movzbl	28(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -678(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 4(%esp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -677(%ebp)
.L949:
	cmpb	$10, -678(%ebp)
	sete	%al
	movb	%al, -361(%ebp)
	cmpb	$0, -361(%ebp)
	jne	.L950
	cmpb	$10, -677(%ebp)
	sete	%al
	movb	%al, -361(%ebp)
.L950:
	cmpb	$0, -361(%ebp)
	je	.L951
	movl	%esp, %eax
	movl	%eax, -1124(%ebp)
	movl	-676(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1128(%ebp)
	movl	-1128(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1128(%ebp)
	movl	-1128(%ebp), %ecx
	movl	%ecx, -360(%ebp)
	movl	-696(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	$0, -352(%ebp)
.L953:
	movl	-352(%ebp), %eax
	cmpl	-356(%ebp), %eax
	je	.L952
	movl	-352(%ebp), %edx
	movl	-360(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -352(%ebp)
	jmp	.L953
.L952:
	movl	-360(%ebp), %eax
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1124(%ebp), %esp
	jmp	.L954
.L951:
	cmpb	$0, -678(%ebp)
	sete	%al
	movb	%al, -345(%ebp)
	cmpb	$0, -345(%ebp)
	jne	.L955
	cmpb	$1, -678(%ebp)
	sete	%al
	movb	%al, -345(%ebp)
.L955:
	movzbl	-345(%ebp), %eax
	movb	%al, -346(%ebp)
	cmpb	$0, -346(%ebp)
	jne	.L956
	cmpb	$0, -677(%ebp)
	sete	%al
	movb	%al, -346(%ebp)
.L956:
	movzbl	-346(%ebp), %eax
	movb	%al, -347(%ebp)
	cmpb	$0, -347(%ebp)
	jne	.L957
	cmpb	$1, -677(%ebp)
	sete	%al
	movb	%al, -347(%ebp)
.L957:
	cmpb	$0, -347(%ebp)
	je	.L958
	call	__ghdl_stack2_mark
	movl	%eax, -344(%ebp)
	movl	-692(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-812(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-812(%ebp), %eax
	movl	%eax, -340(%ebp)
.L960:
	movl	-340(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-696(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L959
	movl	-340(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-344(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L954
.L959:
	movl	$_UI00000000, %eax
	movl	$11004, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L960
.L958:
	cmpb	$9, -678(%ebp)
	sete	%al
	movb	%al, -333(%ebp)
	cmpb	$0, -333(%ebp)
	jne	.L961
	cmpb	$2, -678(%ebp)
	sete	%al
	movb	%al, -333(%ebp)
.L961:
	movzbl	-333(%ebp), %eax
	movb	%al, -334(%ebp)
	cmpb	$1, -334(%ebp)
	jne	.L962
	cmpb	$6, -677(%ebp)
	sete	%al
	movb	%al, -332(%ebp)
	cmpb	$0, -332(%ebp)
	jne	.L963
	cmpb	$5, -677(%ebp)
	sete	%al
	movb	%al, -332(%ebp)
.L963:
	movzbl	-332(%ebp), %eax
	movb	%al, -334(%ebp)
.L962:
	movzbl	-334(%ebp), %eax
	movb	%al, -335(%ebp)
	cmpb	$0, -335(%ebp)
	jne	.L964
	cmpb	$9, -677(%ebp)
	sete	%al
	movb	%al, -330(%ebp)
	cmpb	$0, -330(%ebp)
	jne	.L965
	cmpb	$2, -677(%ebp)
	sete	%al
	movb	%al, -330(%ebp)
.L965:
	movzbl	-330(%ebp), %eax
	movb	%al, -331(%ebp)
	cmpb	$1, -331(%ebp)
	jne	.L966
	cmpb	$6, -678(%ebp)
	sete	%al
	movb	%al, -329(%ebp)
	cmpb	$0, -329(%ebp)
	jne	.L967
	cmpb	$5, -678(%ebp)
	sete	%al
	movb	%al, -329(%ebp)
.L967:
	movzbl	-329(%ebp), %eax
	movb	%al, -331(%ebp)
.L966:
	movzbl	-331(%ebp), %eax
	movb	%al, -335(%ebp)
.L964:
	cmpb	$0, -335(%ebp)
	je	.L968
	call	__ghdl_stack2_mark
	movl	%eax, -328(%ebp)
	movl	-692(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-820(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-820(%ebp), %eax
	movl	%eax, -324(%ebp)
.L970:
	movl	-324(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-696(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L969
	movl	-324(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-328(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L954
.L969:
	movl	$_UI00000000, %eax
	movl	$11011, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L970
.L968:
	cmpb	$9, -678(%ebp)
	sete	%al
	movb	%al, -305(%ebp)
	cmpb	$0, -305(%ebp)
	jne	.L971
	cmpb	$9, -677(%ebp)
	sete	%al
	movb	%al, -305(%ebp)
.L971:
	movzbl	-305(%ebp), %eax
	movb	%al, -306(%ebp)
	cmpb	$0, -306(%ebp)
	jne	.L972
	cmpb	$2, -678(%ebp)
	sete	%al
	movb	%al, -306(%ebp)
.L972:
	movzbl	-306(%ebp), %eax
	movb	%al, -317(%ebp)
	cmpb	$0, -317(%ebp)
	jne	.L973
	cmpb	$2, -677(%ebp)
	sete	%al
	movb	%al, -317(%ebp)
.L973:
	cmpb	$0, -317(%ebp)
	je	.L974
	call	__ghdl_stack2_mark
	movl	%eax, -304(%ebp)
	movl	-692(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-860(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-860(%ebp), %eax
	movl	%eax, -300(%ebp)
.L978:
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-696(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L975
	movl	-300(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-304(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -288(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -276(%ebp)
	movl	-276(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L976
	jmp	.L1036
.L975:
	movl	$_UI00000000, %eax
	movl	$11015, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L978
.L976:
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -284(%ebp)
	jmp	.L979
.L1036:
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -284(%ebp)
.L979:
	movl	-284(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -264(%ebp)
	movl	-288(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L980
	movl	-264(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
	jmp	.L981
.L980:
	movl	-268(%ebp), %eax
	movl	-264(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
.L981:
	movl	-272(%ebp), %eax
	movl	%eax, -280(%ebp)
	movl	-272(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -280(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L982
	movl	$_UI00000000, %eax
	movl	$11018, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L982:
	movl	-280(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L983
	movl	-248(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -256(%ebp)
	jmp	.L984
.L983:
	movl	-248(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -256(%ebp)
.L984:
	movl	-256(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-260(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -236(%ebp)
	movl	-260(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L985
	movl	-236(%ebp), %eax
	movl	-240(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -244(%ebp)
	jmp	.L986
.L985:
	movl	-240(%ebp), %eax
	movl	-236(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -244(%ebp)
.L986:
	movl	-244(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-244(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-260(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -252(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L987
	movl	$_UI00000000, %eax
	movl	$11018, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L987:
	movl	-252(%ebp), %eax
	movl	%eax, -292(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-292(%ebp), %eax
	movzbl	(%edx,%eax), %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-296(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xorO1
	movb	%al, -613(%ebp)
	leal	-708(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movl	(%eax), %eax
	subl	-688(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-220(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-228(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -224(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L988
	movl	$_UI00000000, %eax
	movl	$11019, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L988:
	movl	-224(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-232(%ebp), %ecx
	movl	-672(%ebp), %edx
	movzbl	-613(%ebp), %eax
	movb	%al, (%edx,%ecx)
	jmp	.L954
.L974:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -208(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -196(%ebp)
	movl	-196(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L989
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -204(%ebp)
	jmp	.L990
.L989:
	movl	-196(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
.L990:
	movl	-204(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -184(%ebp)
	movl	-208(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L991
	movl	-184(%ebp), %eax
	movl	-188(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -192(%ebp)
	jmp	.L992
.L991:
	movl	-188(%ebp), %eax
	movl	-184(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -192(%ebp)
.L992:
	movl	-192(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	-192(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-208(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -200(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L993
	movl	$_UI00000000, %eax
	movl	$11021, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L993:
	movl	-200(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -180(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L994
	movl	-168(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -176(%ebp)
	jmp	.L995
.L994:
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -176(%ebp)
.L995:
	movl	-176(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-180(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -156(%ebp)
	movl	-180(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L996
	movl	-156(%ebp), %eax
	movl	-160(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -164(%ebp)
	jmp	.L997
.L996:
	movl	-160(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -164(%ebp)
.L997:
	movl	-164(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-164(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-180(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -172(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L998
	movl	$_UI00000000, %eax
	movl	$11021, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L998:
	movl	-172(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-212(%ebp), %eax
	movzbl	(%edx,%eax), %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-216(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xorO1
	movb	%al, -613(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -152(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-876(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-692(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-876(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-868(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-868(%ebp), %eax
	movl	%eax, -148(%ebp)
.L1001:
	movl	-148(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-792(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L999
	movl	-148(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-608(%ebp), %ecx
	movl	-612(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-608(%ebp), %eax
	movl	%eax, -884(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -880(%ebp)
	movb	$0, 4(%esp)
	leal	-884(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -678(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -144(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-900(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-692(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-900(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-892(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-892(%ebp), %eax
	movl	%eax, -140(%ebp)
	jmp	.L1000
.L999:
	movl	$_UI00000000, %eax
	movl	$11022, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1001
.L1000:
	movl	-140(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-792(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1002
	movl	-140(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-604(%ebp), %ecx
	movl	-612(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-144(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-604(%ebp), %eax
	movl	%eax, -908(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -904(%ebp)
	movb	$0, 4(%esp)
	leal	-908(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -677(%ebp)
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-608(%ebp), %eax
	movl	%eax, -916(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -912(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -924(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -920(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-632(%ebp), %eax
	movl	%eax, -932(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -928(%ebp)
	leal	-932(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-924(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-678(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-916(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	movl	-792(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	-604(%ebp), %eax
	movl	%eax, -940(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -936(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-660(%ebp), %eax
	movl	%eax, -948(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -944(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -956(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -952(%ebp)
	leal	-956(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-948(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-677(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-940(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	cmpb	$7, -677(%ebp)
	sete	%al
	movb	%al, -133(%ebp)
	cmpb	$0, -133(%ebp)
	je	.L1003
	jmp	.L1004
.L1002:
	movl	$_UI00000000, %eax
	movl	$11028, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1000
.L1003:
	cmpb	$4, -677(%ebp)
	sete	%al
	movb	%al, -133(%ebp)
.L1004:
	cmpb	$0, -133(%ebp)
	je	.L1005
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-660(%ebp), %eax
	movl	%eax, -964(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -960(%ebp)
	movb	$3, 4(%esp)
	leal	-964(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__find_leftmostO2
	movl	%eax, %edx
	movl	-692(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -640(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -132(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-660(%ebp), %eax
	movl	%eax, -980(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -976(%ebp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-980(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-972(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_leftO1
	leal	-972(%ebp), %eax
	movl	%eax, -128(%ebp)
.L1008:
	movl	-128(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-712(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1006
	movl	-128(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-660(%ebp), %ecx
	movl	-668(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1007
.L1006:
	movl	$_UI00000000, %eax
	movl	$11048, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1008
.L1005:
	cmpb	$7, -678(%ebp)
	sete	%al
	movb	%al, -121(%ebp)
	cmpb	$0, -121(%ebp)
	jne	.L1009
	cmpb	$4, -678(%ebp)
	sete	%al
	movb	%al, -121(%ebp)
.L1009:
	cmpb	$0, -121(%ebp)
	je	.L1010
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -988(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -984(%ebp)
	movb	$3, 4(%esp)
	leal	-988(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__find_leftmostO2
	movl	%eax, %edx
	movl	-692(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -640(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -120(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -1004(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -1000(%ebp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1004(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-996(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_leftO1
	leal	-996(%ebp), %eax
	movl	%eax, -116(%ebp)
.L1012:
	movl	-116(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-712(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1011
	movl	-116(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-664(%ebp), %ecx
	movl	-668(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-120(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1007
.L1011:
	movl	$_UI00000000, %eax
	movl	$11051, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1012
.L1010:
	movl	$0, -640(%ebp)
.L1007:
	call	__ghdl_stack2_mark
	movl	%eax, -112(%ebp)
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-632(%ebp), %eax
	movl	%eax, -1044(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -1040(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1044(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1036(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	movl	-760(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -1052(%ebp)
	leal	-772(%ebp), %eax
	movl	%eax, -1048(%ebp)
	leal	-1052(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1036(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1028(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO2
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1028(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1020(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	movl	$1, 8(%esp)
	leal	-1020(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1012(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-1012(%ebp), %eax
	movl	%eax, -108(%ebp)
.L1015:
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-776(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1013
	movl	-108(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-620(%ebp), %ecx
	movl	-624(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -104(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -1068(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -1064(%ebp)
	movl	-712(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	-660(%ebp), %eax
	movl	%eax, -1076(%ebp)
	leal	-724(%ebp), %eax
	movl	%eax, -1072(%ebp)
	leal	-1076(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1068(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1060(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMuO1
	leal	-1060(%ebp), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1014
.L1013:
	movl	$_UI00000000, %eax
	movl	$11058, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1015
.L1014:
	movl	-100(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-728(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1016
	movl	-100(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-652(%ebp), %ecx
	movl	-656(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-836(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1017
	jmp	.L1037
.L1016:
	movl	$_UI00000000, %eax
	movl	$11059, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1014
.L1017:
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -92(%ebp)
	jmp	.L1019
.L1037:
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
.L1019:
	movl	-96(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	%eax, (%edx)
	leal	-740(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1020
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1021
.L1020:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1021:
	movl	-692(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-684(%ebp), %edx
	movl	-88(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-96(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-96(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	cmpl	$0, -72(%ebp)
	jns	.L1022
	movl	$0, -76(%ebp)
	jmp	.L1023
.L1022:
	movl	-72(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -76(%ebp)
.L1023:
	movl	-96(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-824(%ebp), %eax
	movl	%eax, -316(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -68(%ebp)
	leal	-836(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-56(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1024
	movl	$_UI00000000, %eax
	movl	$11060, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1024:
	movl	-56(%ebp), %eax
	movl	-652(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -52(%ebp)
.L1028:
	movl	-824(%ebp), %edx
	movl	-744(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1025
	movl	-52(%ebp), %edx
	movl	-644(%ebp), %ecx
	movl	-648(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-852(%ebp), %eax
	movl	%eax, -48(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1026
	jmp	.L1038
.L1025:
	movl	$_UI00000000, %eax
	movl	$11060, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1028
.L1026:
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1029
.L1038:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L1029:
	movl	-692(%ebp), %eax
	addl	$1, %eax
	movl	%eax, %edx
	addl	-684(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-48(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-48(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	jns	.L1030
	movl	$0, -36(%ebp)
	jmp	.L1031
.L1030:
	movl	-32(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -36(%ebp)
.L1031:
	movl	-48(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-840(%ebp), %eax
	movl	%eax, -312(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -28(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-16(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1032
	movl	$_UI00000000, %eax
	movl	$11062, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1032:
	movl	-840(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	-16(%ebp), %edx
	movl	-652(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -1084(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, -1080(%ebp)
	leal	-1084(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movb	%al, -597(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	-744(%ebp), %eax
	movl	%eax, -648(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -1100(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -1096(%ebp)
	movl	-776(%ebp), %eax
	movl	%eax, -624(%ebp)
	movl	-620(%ebp), %eax
	movl	%eax, -1108(%ebp)
	leal	-788(%ebp), %eax
	movl	%eax, -1104(%ebp)
	movl	-684(%ebp), %eax
	movl	%eax, 36(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movl	-692(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-688(%ebp), %eax
	movl	%eax, 20(%esp)
	movzbl	-597(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	-613(%ebp), %eax
	movb	%al, 12(%esp)
	leal	-1108(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1100(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1092(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-1092(%ebp), %eax
	movl	%eax, -8(%ebp)
.L1034:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-696(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1033
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-672(%ebp), %ecx
	movl	-676(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L954
.L1033:
	movl	$_UI00000000, %eax
	movl	$11065, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1034
.L954:
	movl	-696(%ebp), %eax
	movl	%eax, -676(%ebp)
	movl	-672(%ebp), %eax
	movl	%eax, -1116(%ebp)
	leal	-708(%ebp), %eax
	movl	%eax, -1112(%ebp)
	leal	-1116(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__multiply, .-ahir_ieee_proposed__float_pkg__multiply
.globl ahir_ieee_proposed__float_pkg__is_negative
	.type	ahir_ieee_proposed__float_pkg__is_negative, @function
ahir_ieee_proposed__float_pkg__is_negative:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1040
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L1041
.L1040:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L1041:
	movl	-24(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1042
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	jmp	.L1043
.L1042:
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
.L1043:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1044
	movl	$_UI00000000, %eax
	movl	$11082, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1044:
	movl	-20(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$3, %al
	sete	%al
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__is_negative, .-ahir_ieee_proposed__float_pkg__is_negative
.globl ahir_ieee_proposed__float_pkg__eq
	.type	ahir_ieee_proposed__float_pkg__eq, @function
ahir_ieee_proposed__float_pkg__eq:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$264, %esp
	movb	$0, -128(%ebp)
	movb	$0, -127(%ebp)
	movb	$0, -126(%ebp)
	movb	$0, -125(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1047
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1048
.L1047:
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L1048:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1049
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1050
.L1049:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1050:
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -124(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1051
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1052
.L1051:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1052:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1053
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1054
.L1053:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1054:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -120(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1055
	movl	$0, -68(%ebp)
	jmp	.L1056
.L1055:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1056:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %ecx
	movl	%ecx, -112(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L1058:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1057
	movl	-56(%ebp), %edx
	movl	-112(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L1058
.L1057:
	leal	-144(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1059
	movl	$0, -48(%ebp)
	jmp	.L1060
.L1059:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1060:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1062:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1061
	movl	-36(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1062
.L1061:
	cmpl	$0, -124(%ebp)
	sete	%al
	movb	%al, -28(%ebp)
	cmpb	$0, -28(%ebp)
	jne	.L1063
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -28(%ebp)
.L1063:
	movzbl	-28(%ebp), %eax
	movb	%al, -29(%ebp)
	cmpb	$0, -29(%ebp)
	jne	.L1064
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -29(%ebp)
.L1064:
	cmpb	$0, -29(%ebp)
	je	.L1065
	movb	$0, -209(%ebp)
	jmp	.L1066
.L1065:
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -128(%ebp)
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -127(%ebp)
	cmpb	$5, -128(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
	cmpb	$0, -26(%ebp)
	jne	.L1067
	cmpb	$6, -128(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
.L1067:
	movzbl	-26(%ebp), %eax
	movb	%al, -27(%ebp)
	cmpb	$1, -27(%ebp)
	jne	.L1068
	cmpb	$5, -127(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
	cmpb	$0, -25(%ebp)
	jne	.L1069
	cmpb	$6, -127(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
.L1069:
	movzbl	-25(%ebp), %eax
	movb	%al, -27(%ebp)
.L1068:
	cmpb	$0, -27(%ebp)
	je	.L1070
	movb	$1, -126(%ebp)
	jmp	.L1071
.L1070:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-152(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1074:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1072
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-176(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-176(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-168(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1073
.L1072:
	movl	$_UI00000000, %eax
	movl	$11109, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1074
.L1073:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1075
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-108(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-192(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-184(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -208(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -204(%ebp)
	leal	-208(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-200(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-184(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__std_logic_vector_EQ
	movb	%al, -126(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1071
.L1075:
	movl	$_UI00000000, %eax
	movl	$11114, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1073
.L1071:
	cmpb	$0, 16(%ebp)
	je	.L1076
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -125(%ebp)
	jmp	.L1077
.L1076:
	movb	$0, -125(%ebp)
.L1077:
	movzbl	-126(%ebp), %eax
	movb	%al, -1(%ebp)
	cmpb	$1, -1(%ebp)
	jne	.L1078
	movzbl	-125(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
.L1078:
	movzbl	-1(%ebp), %eax
	movb	%al, -209(%ebp)
.L1066:
	movzbl	-209(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__eq, .-ahir_ieee_proposed__float_pkg__eq
.globl ahir_ieee_proposed__float_pkg__lt
	.type	ahir_ieee_proposed__float_pkg__lt, @function
ahir_ieee_proposed__float_pkg__lt:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1060, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -584(%ebp)
	movl	-584(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1081
	movl	-584(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -592(%ebp)
	jmp	.L1082
.L1081:
	movl	-584(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -592(%ebp)
.L1082:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -580(%ebp)
	movl	-580(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1083
	movl	-580(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -588(%ebp)
	jmp	.L1084
.L1083:
	movl	-580(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -588(%ebp)
.L1084:
	movl	-588(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-592(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -644(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1085
	movl	-568(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -576(%ebp)
	jmp	.L1086
.L1085:
	movl	-568(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -576(%ebp)
.L1086:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -564(%ebp)
	movl	-564(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1087
	movl	-564(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -572(%ebp)
	jmp	.L1088
.L1087:
	movl	-564(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -572(%ebp)
.L1088:
	movl	-572(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-576(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -640(%ebp)
	movb	$0, -634(%ebp)
	movb	$0, -633(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-560(%ebp), %eax
	movl	%edx, (%eax)
	movl	-560(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-560(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-560(%ebp), %eax
	movl	(%eax), %edx
	movl	-560(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -552(%ebp)
	cmpl	$0, -552(%ebp)
	jns	.L1089
	movl	$0, -556(%ebp)
	jmp	.L1090
.L1089:
	movl	-552(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -556(%ebp)
.L1090:
	movl	-560(%ebp), %edx
	movl	-556(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1020(%ebp)
	movl	-1020(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1020(%ebp)
	movl	-1020(%ebp), %ecx
	movl	%ecx, -628(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -548(%ebp)
	movl	$0, -544(%ebp)
.L1092:
	movl	-544(%ebp), %eax
	cmpl	-548(%ebp), %eax
	je	.L1091
	movl	-544(%ebp), %edx
	movl	-628(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -544(%ebp)
	jmp	.L1092
.L1091:
	leal	-660(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-540(%ebp), %eax
	movl	%edx, (%eax)
	movl	-540(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-540(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-540(%ebp), %eax
	movl	(%eax), %edx
	movl	-540(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -532(%ebp)
	cmpl	$0, -532(%ebp)
	jns	.L1093
	movl	$0, -536(%ebp)
	jmp	.L1094
.L1093:
	movl	-532(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -536(%ebp)
.L1094:
	movl	-540(%ebp), %edx
	movl	-536(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %ecx
	movl	%ecx, -624(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -528(%ebp)
	movl	$0, -524(%ebp)
.L1096:
	movl	-524(%ebp), %eax
	cmpl	-528(%ebp), %eax
	je	.L1095
	movl	-524(%ebp), %edx
	movl	-624(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -524(%ebp)
	jmp	.L1096
.L1095:
	leal	-676(%ebp), %eax
	movl	%eax, -520(%ebp)
	movl	-644(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-520(%ebp), %eax
	movl	%edx, (%eax)
	movl	-520(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-520(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-520(%ebp), %eax
	movl	(%eax), %edx
	movl	-520(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -512(%ebp)
	cmpl	$0, -512(%ebp)
	jns	.L1097
	movl	$0, -516(%ebp)
	jmp	.L1098
.L1097:
	movl	-512(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -516(%ebp)
.L1098:
	movl	-520(%ebp), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-620(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1012(%ebp)
	movl	-1012(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1012(%ebp)
	movl	-1012(%ebp), %ecx
	movl	%ecx, -616(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -508(%ebp)
	movl	$0, -504(%ebp)
.L1100:
	movl	-504(%ebp), %eax
	cmpl	-508(%ebp), %eax
	je	.L1099
	movl	-504(%ebp), %edx
	movl	-616(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -504(%ebp)
	jmp	.L1100
.L1099:
	leal	-676(%ebp), %eax
	movl	%eax, -500(%ebp)
	movl	-644(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-500(%ebp), %eax
	movl	%edx, (%eax)
	movl	-500(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-500(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-500(%ebp), %eax
	movl	(%eax), %edx
	movl	-500(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -492(%ebp)
	cmpl	$0, -492(%ebp)
	jns	.L1101
	movl	$0, -496(%ebp)
	jmp	.L1102
.L1101:
	movl	-492(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -496(%ebp)
.L1102:
	movl	-500(%ebp), %edx
	movl	-496(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-620(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1008(%ebp)
	movl	-1008(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1008(%ebp)
	movl	-1008(%ebp), %ecx
	movl	%ecx, -612(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	$0, -484(%ebp)
.L1104:
	movl	-484(%ebp), %eax
	cmpl	-488(%ebp), %eax
	je	.L1103
	movl	-484(%ebp), %edx
	movl	-612(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -484(%ebp)
	jmp	.L1104
.L1103:
	movb	$0, -606(%ebp)
	movb	$0, -605(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-480(%ebp), %edx
	movl	-640(%ebp), %eax
	movl	%eax, (%edx)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-480(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-480(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-480(%ebp), %eax
	movl	(%eax), %edx
	movl	-480(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -472(%ebp)
	cmpl	$0, -472(%ebp)
	jns	.L1105
	movl	$0, -476(%ebp)
	jmp	.L1106
.L1105:
	movl	-472(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -476(%ebp)
.L1106:
	movl	-480(%ebp), %edx
	movl	-476(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-680(%ebp), %eax
	movl	%eax, -604(%ebp)
	movl	-604(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1004(%ebp)
	movl	-1004(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1004(%ebp)
	movl	-1004(%ebp), %ecx
	movl	%ecx, -600(%ebp)
	movl	-680(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	$0, -464(%ebp)
.L1108:
	movl	-464(%ebp), %eax
	cmpl	-468(%ebp), %eax
	je	.L1107
	movl	-464(%ebp), %edx
	movl	-600(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -464(%ebp)
	jmp	.L1108
.L1107:
	leal	-692(%ebp), %eax
	movl	%eax, -460(%ebp)
	movl	-460(%ebp), %edx
	movl	-640(%ebp), %eax
	movl	%eax, (%edx)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-460(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-460(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-460(%ebp), %eax
	movl	(%eax), %edx
	movl	-460(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -452(%ebp)
	cmpl	$0, -452(%ebp)
	jns	.L1109
	movl	$0, -456(%ebp)
	jmp	.L1110
.L1109:
	movl	-452(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -456(%ebp)
.L1110:
	movl	-460(%ebp), %edx
	movl	-456(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-680(%ebp), %eax
	movl	%eax, -604(%ebp)
	movl	-604(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1000(%ebp)
	movl	-1000(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1000(%ebp)
	movl	-1000(%ebp), %ecx
	movl	%ecx, -596(%ebp)
	movl	-680(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	$0, -444(%ebp)
.L1112:
	movl	-444(%ebp), %eax
	cmpl	-448(%ebp), %eax
	je	.L1111
	movl	-444(%ebp), %edx
	movl	-596(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -444(%ebp)
	jmp	.L1112
.L1111:
	cmpl	$0, -644(%ebp)
	sete	%al
	movb	%al, -437(%ebp)
	cmpb	$0, -437(%ebp)
	jne	.L1113
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -437(%ebp)
.L1113:
	movzbl	-437(%ebp), %eax
	movb	%al, -438(%ebp)
	cmpb	$0, -438(%ebp)
	jne	.L1114
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -438(%ebp)
.L1114:
	cmpb	$0, -438(%ebp)
	je	.L1115
	movb	$0, -606(%ebp)
	jmp	.L1116
.L1115:
	call	__ghdl_stack2_mark
	movl	%eax, -436(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-708(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-644(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-708(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-700(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-700(%ebp), %eax
	movl	%eax, -432(%ebp)
.L1119:
	movl	-432(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-680(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1117
	movl	-432(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-600(%ebp), %ecx
	movl	-604(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-436(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -428(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-724(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-644(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-724(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-716(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-716(%ebp), %eax
	movl	%eax, -424(%ebp)
	jmp	.L1118
.L1117:
	movl	$_UI00000000, %eax
	movl	$11146, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1119
.L1118:
	movl	-424(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-680(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1120
	movl	-424(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-596(%ebp), %ecx
	movl	-604(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-428(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -404(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1121
	jmp	.L1188
.L1120:
	movl	$_UI00000000, %eax
	movl	$11151, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1118
.L1121:
	movl	-392(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -400(%ebp)
	jmp	.L1123
.L1188:
	movl	-392(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -400(%ebp)
.L1123:
	movl	-400(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -380(%ebp)
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1124
	movl	-380(%ebp), %eax
	movl	-384(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -388(%ebp)
	jmp	.L1125
.L1124:
	movl	-384(%ebp), %eax
	movl	-380(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -388(%ebp)
.L1125:
	movl	-388(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-388(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-404(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -396(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1126
	movl	$_UI00000000, %eax
	movl	$11156, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1126:
	movl	-396(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -364(%ebp)
	movl	-364(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1127
	movl	-364(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -372(%ebp)
	jmp	.L1128
.L1127:
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -372(%ebp)
.L1128:
	movl	-372(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-376(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -352(%ebp)
	movl	-376(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1129
	movl	-352(%ebp), %eax
	movl	-356(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -360(%ebp)
	jmp	.L1130
.L1129:
	movl	-356(%ebp), %eax
	movl	-352(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -360(%ebp)
.L1130:
	movl	-360(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	-360(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-376(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -368(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1131
	movl	$_UI00000000, %eax
	movl	$11156, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1131:
	movl	-368(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-420(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-416(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	%al, %bl
	jne	.L1132
	leal	-740(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-348(%ebp), %eax
	movl	%edx, (%eax)
	movl	-348(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-348(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-348(%ebp), %eax
	movl	(%eax), %edx
	movl	-348(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -340(%ebp)
	cmpl	$0, -340(%ebp)
	jns	.L1133
	movl	$0, -344(%ebp)
	jmp	.L1134
.L1133:
	movl	-340(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -344(%ebp)
.L1134:
	movl	-348(%ebp), %edx
	movl	-344(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-728(%ebp), %eax
	movl	%eax, -412(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -336(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-336(%ebp), %eax
	movl	(%eax), %edx
	movl	-332(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -328(%ebp)
	movl	-328(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-328(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-332(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-324(%ebp), %edx
	movl	-336(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1135
	movl	$_UI00000000, %eax
	movl	$11157, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1135:
	leal	-764(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-324(%ebp), %edx
	movl	-600(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movl	%eax, -764(%ebp)
	leal	-780(%ebp), %eax
	movl	%eax, -760(%ebp)
	movl	-316(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -308(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, (%eax)
	movl	-304(%ebp), %eax
	movl	4(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-304(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-308(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-304(%ebp), %eax
	movl	12(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-764(%ebp), %eax
	movl	%eax, -320(%ebp)
.L1139:
	movl	-320(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-648(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1136
	movl	-320(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-628(%ebp), %ecx
	movl	-632(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-756(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, (%eax)
	movl	-300(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-300(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-300(%ebp), %eax
	movl	(%eax), %edx
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -292(%ebp)
	cmpl	$0, -292(%ebp)
	js	.L1137
	jmp	.L1189
.L1136:
	movl	$_UI00000000, %eax
	movl	$11157, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1139
.L1137:
	movl	$0, -296(%ebp)
	jmp	.L1140
.L1189:
	movl	-292(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -296(%ebp)
.L1140:
	movl	-300(%ebp), %edx
	movl	-296(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-744(%ebp), %eax
	movl	%eax, -408(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -288(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %edx
	movl	-284(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -280(%ebp)
	movl	-280(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-280(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-284(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-276(%ebp), %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1141
	movl	$_UI00000000, %eax
	movl	$11158, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1141:
	leal	-788(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-276(%ebp), %edx
	movl	-596(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movl	%eax, -788(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -784(%ebp)
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-256(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, (%eax)
	movl	-256(%ebp), %eax
	movl	4(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-256(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-260(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-256(%ebp), %eax
	movl	12(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-788(%ebp), %eax
	movl	%eax, -272(%ebp)
.L1145:
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-648(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1142
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-624(%ebp), %ecx
	movl	-632(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -812(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -808(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -820(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -816(%ebp)
	leal	-820(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-812(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPEqO1
	testb	%al, %al
	jne	.L1143
	jmp	.L1190
.L1142:
	movl	$_UI00000000, %eax
	movl	$11158, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1145
.L1143:
	call	__ghdl_stack2_mark
	movl	%eax, -252(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movl	$-1, (%eax)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-224(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-224(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-224(%ebp), %eax
	movl	(%eax), %edx
	movl	-224(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -216(%ebp)
	cmpl	$0, -216(%ebp)
	jns	.L1146
	movl	$0, -220(%ebp)
	jmp	.L1147
.L1146:
	movl	-216(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -220(%ebp)
.L1147:
	movl	-224(%ebp), %edx
	movl	-220(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-832(%ebp), %eax
	movl	%eax, -248(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -244(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-244(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-236(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-240(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-232(%ebp), %edx
	movl	-244(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1148
	movl	$_UI00000000, %eax
	movl	$11160, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1148:
	movl	-832(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-232(%ebp), %edx
	movl	-600(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -852(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -848(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-828(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-860(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-828(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -860(%ebp)
	leal	-876(%ebp), %eax
	movl	%eax, -856(%ebp)
	movl	-212(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	movl	(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, (%eax)
	movl	-200(%ebp), %eax
	movl	4(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-200(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-204(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-200(%ebp), %eax
	movl	12(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-860(%ebp), %eax
	movl	%eax, -228(%ebp)
.L1152:
	movl	-228(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-664(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1149
	movl	-228(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-616(%ebp), %ecx
	movl	-620(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-252(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -196(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movl	$-1, (%eax)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-168(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-168(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-168(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -160(%ebp)
	cmpl	$0, -160(%ebp)
	js	.L1150
	jmp	.L1191
.L1149:
	movl	$_UI00000000, %eax
	movl	$11160, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1152
.L1150:
	movl	$0, -164(%ebp)
	jmp	.L1153
.L1191:
	movl	-160(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -164(%ebp)
.L1153:
	movl	-168(%ebp), %edx
	movl	-164(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-888(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-188(%ebp), %eax
	movl	(%eax), %edx
	movl	-184(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-180(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-176(%ebp), %edx
	movl	-188(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1154
	movl	$_UI00000000, %eax
	movl	$11161, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1154:
	movl	-888(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-176(%ebp), %edx
	movl	-596(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -908(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -904(%ebp)
	leal	-908(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-884(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-916(%ebp), %eax
	movl	%eax, -156(%ebp)
	leal	-884(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -916(%ebp)
	leal	-932(%ebp), %eax
	movl	%eax, -912(%ebp)
	movl	-156(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movl	(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, (%eax)
	movl	-144(%ebp), %eax
	movl	4(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-148(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-144(%ebp), %eax
	movl	12(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-916(%ebp), %eax
	movl	%eax, -172(%ebp)
.L1158:
	movl	-172(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-664(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1155
	movl	-172(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-612(%ebp), %ecx
	movl	-620(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-196(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1156
	jmp	.L1192
.L1155:
	movl	$_UI00000000, %eax
	movl	$11161, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1158
.L1156:
	movl	-124(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
	jmp	.L1159
.L1192:
	movl	-124(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -132(%ebp)
.L1159:
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	movl	-136(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1160
	movl	-112(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
	jmp	.L1161
.L1160:
	movl	-116(%ebp), %eax
	movl	-112(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
.L1161:
	movl	-120(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-120(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -128(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1162
	movl	$_UI00000000, %eax
	movl	$11162, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1162:
	movl	-128(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$2, %al
	jne	.L1163
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -940(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -936(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -948(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -944(%ebp)
	leal	-948(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-940(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO1
	movb	%al, -606(%ebp)
	jmp	.L1116
.L1163:
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -956(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -952(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -964(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -960(%ebp)
	leal	-964(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-956(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	movb	%al, -606(%ebp)
	jmp	.L1116
.L1190:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1166
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1167
.L1166:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1167:
	movl	-100(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-104(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1168
	movl	-80(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
	jmp	.L1169
.L1168:
	movl	-84(%ebp), %eax
	movl	-80(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
.L1169:
	movl	-88(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-88(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -96(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1170
	movl	$_UI00000000, %eax
	movl	$11168, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1170:
	movl	-96(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$2, %al
	jne	.L1171
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -972(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -968(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -980(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -976(%ebp)
	leal	-980(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-972(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO1
	movb	%al, -606(%ebp)
	jmp	.L1116
.L1171:
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -988(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -984(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -996(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -992(%ebp)
	leal	-996(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-988(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	movb	%al, -606(%ebp)
	jmp	.L1116
.L1132:
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -634(%ebp)
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -633(%ebp)
	cmpb	$5, -634(%ebp)
	sete	%al
	movb	%al, -73(%ebp)
	cmpb	$1, -73(%ebp)
	jne	.L1172
	cmpb	$6, -633(%ebp)
	sete	%al
	movb	%al, -73(%ebp)
.L1172:
	cmpb	$0, -73(%ebp)
	je	.L1173
	movb	$0, -606(%ebp)
	jmp	.L1116
.L1173:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1174
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1175
.L1174:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L1175:
	movl	-60(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1176
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1177
.L1176:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1177:
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -56(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1178
	movl	$_UI00000000, %eax
	movl	$11180, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1178:
	movl	-56(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1179
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1180
.L1179:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
.L1180:
	movl	-32(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1181
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1182
.L1181:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L1182:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -28(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1183
	movl	$_UI00000000, %eax
	movl	$11180, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1183:
	movl	-28(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	%al, %bl
	seta	%al
	movb	%al, -606(%ebp)
.L1116:
	cmpb	$0, 16(%ebp)
	je	.L1184
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -605(%ebp)
	jmp	.L1185
.L1184:
	movb	$0, -605(%ebp)
.L1185:
	movzbl	-606(%ebp), %eax
	movb	%al, -5(%ebp)
	cmpb	$1, -5(%ebp)
	jne	.L1186
	movzbl	-605(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -5(%ebp)
.L1186:
	movzbl	-5(%ebp), %eax
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__lt, .-ahir_ieee_proposed__float_pkg__lt
.globl ahir_ieee_proposed__float_pkg__gt
	.type	ahir_ieee_proposed__float_pkg__gt, @function
ahir_ieee_proposed__float_pkg__gt:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1060, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -584(%ebp)
	movl	-584(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1194
	movl	-584(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -592(%ebp)
	jmp	.L1195
.L1194:
	movl	-584(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -592(%ebp)
.L1195:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -580(%ebp)
	movl	-580(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1196
	movl	-580(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -588(%ebp)
	jmp	.L1197
.L1196:
	movl	-580(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -588(%ebp)
.L1197:
	movl	-588(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-592(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -644(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1198
	movl	-568(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -576(%ebp)
	jmp	.L1199
.L1198:
	movl	-568(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -576(%ebp)
.L1199:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -564(%ebp)
	movl	-564(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1200
	movl	-564(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -572(%ebp)
	jmp	.L1201
.L1200:
	movl	-564(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -572(%ebp)
.L1201:
	movl	-572(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-576(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -640(%ebp)
	movb	$0, -634(%ebp)
	movb	$0, -633(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-560(%ebp), %eax
	movl	%edx, (%eax)
	movl	-560(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-560(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-560(%ebp), %eax
	movl	(%eax), %edx
	movl	-560(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -552(%ebp)
	cmpl	$0, -552(%ebp)
	jns	.L1202
	movl	$0, -556(%ebp)
	jmp	.L1203
.L1202:
	movl	-552(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -556(%ebp)
.L1203:
	movl	-560(%ebp), %edx
	movl	-556(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1020(%ebp)
	movl	-1020(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1020(%ebp)
	movl	-1020(%ebp), %ecx
	movl	%ecx, -628(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -548(%ebp)
	movl	$0, -544(%ebp)
.L1205:
	movl	-544(%ebp), %eax
	cmpl	-548(%ebp), %eax
	je	.L1204
	movl	-544(%ebp), %edx
	movl	-628(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -544(%ebp)
	jmp	.L1205
.L1204:
	leal	-660(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-540(%ebp), %eax
	movl	%edx, (%eax)
	movl	-540(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-540(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-540(%ebp), %eax
	movl	(%eax), %edx
	movl	-540(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -532(%ebp)
	cmpl	$0, -532(%ebp)
	jns	.L1206
	movl	$0, -536(%ebp)
	jmp	.L1207
.L1206:
	movl	-532(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -536(%ebp)
.L1207:
	movl	-540(%ebp), %edx
	movl	-536(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1016(%ebp)
	movl	-1016(%ebp), %ecx
	movl	%ecx, -624(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -528(%ebp)
	movl	$0, -524(%ebp)
.L1209:
	movl	-524(%ebp), %eax
	cmpl	-528(%ebp), %eax
	je	.L1208
	movl	-524(%ebp), %edx
	movl	-624(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -524(%ebp)
	jmp	.L1209
.L1208:
	leal	-676(%ebp), %eax
	movl	%eax, -520(%ebp)
	movl	-644(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-520(%ebp), %eax
	movl	%edx, (%eax)
	movl	-520(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-520(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-520(%ebp), %eax
	movl	(%eax), %edx
	movl	-520(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -512(%ebp)
	cmpl	$0, -512(%ebp)
	jns	.L1210
	movl	$0, -516(%ebp)
	jmp	.L1211
.L1210:
	movl	-512(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -516(%ebp)
.L1211:
	movl	-520(%ebp), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-620(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1012(%ebp)
	movl	-1012(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1012(%ebp)
	movl	-1012(%ebp), %ecx
	movl	%ecx, -616(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -508(%ebp)
	movl	$0, -504(%ebp)
.L1213:
	movl	-504(%ebp), %eax
	cmpl	-508(%ebp), %eax
	je	.L1212
	movl	-504(%ebp), %edx
	movl	-616(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -504(%ebp)
	jmp	.L1213
.L1212:
	leal	-676(%ebp), %eax
	movl	%eax, -500(%ebp)
	movl	-644(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-500(%ebp), %eax
	movl	%edx, (%eax)
	movl	-500(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-500(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-500(%ebp), %eax
	movl	(%eax), %edx
	movl	-500(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -492(%ebp)
	cmpl	$0, -492(%ebp)
	jns	.L1214
	movl	$0, -496(%ebp)
	jmp	.L1215
.L1214:
	movl	-492(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -496(%ebp)
.L1215:
	movl	-500(%ebp), %edx
	movl	-496(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-620(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1008(%ebp)
	movl	-1008(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1008(%ebp)
	movl	-1008(%ebp), %ecx
	movl	%ecx, -612(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	$0, -484(%ebp)
.L1217:
	movl	-484(%ebp), %eax
	cmpl	-488(%ebp), %eax
	je	.L1216
	movl	-484(%ebp), %edx
	movl	-612(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -484(%ebp)
	jmp	.L1217
.L1216:
	movb	$0, -606(%ebp)
	movb	$0, -605(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-480(%ebp), %edx
	movl	-640(%ebp), %eax
	movl	%eax, (%edx)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-480(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-480(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-480(%ebp), %eax
	movl	(%eax), %edx
	movl	-480(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -472(%ebp)
	cmpl	$0, -472(%ebp)
	jns	.L1218
	movl	$0, -476(%ebp)
	jmp	.L1219
.L1218:
	movl	-472(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -476(%ebp)
.L1219:
	movl	-480(%ebp), %edx
	movl	-476(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-680(%ebp), %eax
	movl	%eax, -604(%ebp)
	movl	-604(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1004(%ebp)
	movl	-1004(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1004(%ebp)
	movl	-1004(%ebp), %ecx
	movl	%ecx, -600(%ebp)
	movl	-680(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	$0, -464(%ebp)
.L1221:
	movl	-464(%ebp), %eax
	cmpl	-468(%ebp), %eax
	je	.L1220
	movl	-464(%ebp), %edx
	movl	-600(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -464(%ebp)
	jmp	.L1221
.L1220:
	leal	-692(%ebp), %eax
	movl	%eax, -460(%ebp)
	movl	-460(%ebp), %edx
	movl	-640(%ebp), %eax
	movl	%eax, (%edx)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-460(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-460(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-460(%ebp), %eax
	movl	(%eax), %edx
	movl	-460(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -452(%ebp)
	cmpl	$0, -452(%ebp)
	jns	.L1222
	movl	$0, -456(%ebp)
	jmp	.L1223
.L1222:
	movl	-452(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -456(%ebp)
.L1223:
	movl	-460(%ebp), %edx
	movl	-456(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-680(%ebp), %eax
	movl	%eax, -604(%ebp)
	movl	-604(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -1000(%ebp)
	movl	-1000(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1000(%ebp)
	movl	-1000(%ebp), %ecx
	movl	%ecx, -596(%ebp)
	movl	-680(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	$0, -444(%ebp)
.L1225:
	movl	-444(%ebp), %eax
	cmpl	-448(%ebp), %eax
	je	.L1224
	movl	-444(%ebp), %edx
	movl	-596(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -444(%ebp)
	jmp	.L1225
.L1224:
	cmpl	$0, -644(%ebp)
	sete	%al
	movb	%al, -437(%ebp)
	cmpb	$0, -437(%ebp)
	jne	.L1226
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -437(%ebp)
.L1226:
	movzbl	-437(%ebp), %eax
	movb	%al, -438(%ebp)
	cmpb	$0, -438(%ebp)
	jne	.L1227
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -438(%ebp)
.L1227:
	cmpb	$0, -438(%ebp)
	je	.L1228
	movb	$0, -606(%ebp)
	jmp	.L1229
.L1228:
	call	__ghdl_stack2_mark
	movl	%eax, -436(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-708(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-644(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-708(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-700(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-700(%ebp), %eax
	movl	%eax, -432(%ebp)
.L1232:
	movl	-432(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-680(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1230
	movl	-432(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-600(%ebp), %ecx
	movl	-604(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-436(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -428(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-724(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_x01
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-644(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-640(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-724(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-716(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-716(%ebp), %eax
	movl	%eax, -424(%ebp)
	jmp	.L1231
.L1230:
	movl	$_UI00000000, %eax
	movl	$11210, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1232
.L1231:
	movl	-424(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-680(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1233
	movl	-424(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-596(%ebp), %ecx
	movl	-604(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-428(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -404(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1234
	jmp	.L1301
.L1233:
	movl	$_UI00000000, %eax
	movl	$11215, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1231
.L1234:
	movl	-392(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -400(%ebp)
	jmp	.L1236
.L1301:
	movl	-392(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -400(%ebp)
.L1236:
	movl	-400(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -380(%ebp)
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1237
	movl	-380(%ebp), %eax
	movl	-384(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -388(%ebp)
	jmp	.L1238
.L1237:
	movl	-384(%ebp), %eax
	movl	-380(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -388(%ebp)
.L1238:
	movl	-388(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-388(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-404(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -396(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1239
	movl	$_UI00000000, %eax
	movl	$11220, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1239:
	movl	-396(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -364(%ebp)
	movl	-364(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1240
	movl	-364(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -372(%ebp)
	jmp	.L1241
.L1240:
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -372(%ebp)
.L1241:
	movl	-372(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-376(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -352(%ebp)
	movl	-376(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1242
	movl	-352(%ebp), %eax
	movl	-356(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -360(%ebp)
	jmp	.L1243
.L1242:
	movl	-356(%ebp), %eax
	movl	-352(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -360(%ebp)
.L1243:
	movl	-360(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	-360(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-376(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -368(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1244
	movl	$_UI00000000, %eax
	movl	$11220, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1244:
	movl	-368(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-420(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-416(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	%al, %bl
	jne	.L1245
	leal	-740(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-348(%ebp), %eax
	movl	%edx, (%eax)
	movl	-348(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-348(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-348(%ebp), %eax
	movl	(%eax), %edx
	movl	-348(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -340(%ebp)
	cmpl	$0, -340(%ebp)
	jns	.L1246
	movl	$0, -344(%ebp)
	jmp	.L1247
.L1246:
	movl	-340(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -344(%ebp)
.L1247:
	movl	-348(%ebp), %edx
	movl	-344(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-728(%ebp), %eax
	movl	%eax, -412(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -336(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-336(%ebp), %eax
	movl	(%eax), %edx
	movl	-332(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -328(%ebp)
	movl	-328(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-328(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-332(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-324(%ebp), %edx
	movl	-336(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1248
	movl	$_UI00000000, %eax
	movl	$11221, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1248:
	leal	-764(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-324(%ebp), %edx
	movl	-600(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movl	%eax, -764(%ebp)
	leal	-780(%ebp), %eax
	movl	%eax, -760(%ebp)
	movl	-316(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -308(%ebp)
	leal	-740(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, (%eax)
	movl	-304(%ebp), %eax
	movl	4(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-304(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-308(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-304(%ebp), %eax
	movl	12(%eax), %edx
	movl	-308(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-764(%ebp), %eax
	movl	%eax, -320(%ebp)
.L1252:
	movl	-320(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-648(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1249
	movl	-320(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-628(%ebp), %ecx
	movl	-632(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-756(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-640(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, (%eax)
	movl	-300(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-300(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-300(%ebp), %eax
	movl	(%eax), %edx
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -292(%ebp)
	cmpl	$0, -292(%ebp)
	js	.L1250
	jmp	.L1302
.L1249:
	movl	$_UI00000000, %eax
	movl	$11221, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1252
.L1250:
	movl	$0, -296(%ebp)
	jmp	.L1253
.L1302:
	movl	-292(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -296(%ebp)
.L1253:
	movl	-300(%ebp), %edx
	movl	-296(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-744(%ebp), %eax
	movl	%eax, -408(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -288(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %edx
	movl	-284(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -280(%ebp)
	movl	-280(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-280(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-284(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-276(%ebp), %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1254
	movl	$_UI00000000, %eax
	movl	$11222, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1254:
	leal	-788(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-276(%ebp), %edx
	movl	-596(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movl	%eax, -788(%ebp)
	leal	-804(%ebp), %eax
	movl	%eax, -784(%ebp)
	movl	-268(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
	leal	-756(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-256(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, (%eax)
	movl	-256(%ebp), %eax
	movl	4(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-256(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-260(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-256(%ebp), %eax
	movl	12(%eax), %edx
	movl	-260(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-788(%ebp), %eax
	movl	%eax, -272(%ebp)
.L1258:
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-648(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1255
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-624(%ebp), %ecx
	movl	-632(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -812(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -808(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -820(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -816(%ebp)
	leal	-820(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-812(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPEqO1
	testb	%al, %al
	jne	.L1256
	jmp	.L1303
.L1255:
	movl	$_UI00000000, %eax
	movl	$11222, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1258
.L1256:
	call	__ghdl_stack2_mark
	movl	%eax, -252(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movl	$-1, (%eax)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-224(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-224(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-224(%ebp), %eax
	movl	(%eax), %edx
	movl	-224(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -216(%ebp)
	cmpl	$0, -216(%ebp)
	jns	.L1259
	movl	$0, -220(%ebp)
	jmp	.L1260
.L1259:
	movl	-216(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -220(%ebp)
.L1260:
	movl	-224(%ebp), %edx
	movl	-220(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-832(%ebp), %eax
	movl	%eax, -248(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -244(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-244(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-236(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-240(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-232(%ebp), %edx
	movl	-244(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1261
	movl	$_UI00000000, %eax
	movl	$11224, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1261:
	movl	-832(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-232(%ebp), %edx
	movl	-600(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -852(%ebp)
	leal	-844(%ebp), %eax
	movl	%eax, -848(%ebp)
	leal	-852(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-828(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-860(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-828(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -860(%ebp)
	leal	-876(%ebp), %eax
	movl	%eax, -856(%ebp)
	movl	-212(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	movl	(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, (%eax)
	movl	-200(%ebp), %eax
	movl	4(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-200(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-204(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-200(%ebp), %eax
	movl	12(%eax), %edx
	movl	-204(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-860(%ebp), %eax
	movl	%eax, -228(%ebp)
.L1265:
	movl	-228(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-664(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1262
	movl	-228(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-616(%ebp), %ecx
	movl	-620(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-252(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -196(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movl	$-1, (%eax)
	movl	-644(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-168(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-168(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-168(%ebp), %eax
	movl	(%eax), %edx
	movl	-168(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -160(%ebp)
	cmpl	$0, -160(%ebp)
	js	.L1263
	jmp	.L1304
.L1262:
	movl	$_UI00000000, %eax
	movl	$11224, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1265
.L1263:
	movl	$0, -164(%ebp)
	jmp	.L1266
.L1304:
	movl	-160(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -164(%ebp)
.L1266:
	movl	-168(%ebp), %edx
	movl	-164(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-888(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-692(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-188(%ebp), %eax
	movl	(%eax), %edx
	movl	-184(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-180(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-184(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-176(%ebp), %edx
	movl	-188(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1267
	movl	$_UI00000000, %eax
	movl	$11225, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1267:
	movl	-888(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-176(%ebp), %edx
	movl	-596(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -908(%ebp)
	leal	-900(%ebp), %eax
	movl	%eax, -904(%ebp)
	leal	-908(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-884(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-916(%ebp), %eax
	movl	%eax, -156(%ebp)
	leal	-884(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -916(%ebp)
	leal	-932(%ebp), %eax
	movl	%eax, -912(%ebp)
	movl	-156(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -148(%ebp)
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movl	(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, (%eax)
	movl	-144(%ebp), %eax
	movl	4(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-144(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-148(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-144(%ebp), %eax
	movl	12(%eax), %edx
	movl	-148(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-916(%ebp), %eax
	movl	%eax, -172(%ebp)
.L1271:
	movl	-172(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-664(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1268
	movl	-172(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-612(%ebp), %ecx
	movl	-620(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-196(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1269
	jmp	.L1305
.L1268:
	movl	$_UI00000000, %eax
	movl	$11225, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1271
.L1269:
	movl	-124(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -132(%ebp)
	jmp	.L1272
.L1305:
	movl	-124(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -132(%ebp)
.L1272:
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	movl	-136(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1273
	movl	-112(%ebp), %eax
	movl	-116(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
	jmp	.L1274
.L1273:
	movl	-116(%ebp), %eax
	movl	-112(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -120(%ebp)
.L1274:
	movl	-120(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-120(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -128(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1275
	movl	$_UI00000000, %eax
	movl	$11226, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1275:
	movl	-128(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$2, %al
	jne	.L1276
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -940(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -936(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -948(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -944(%ebp)
	leal	-948(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-940(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	movb	%al, -606(%ebp)
	jmp	.L1229
.L1276:
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-616(%ebp), %eax
	movl	%eax, -956(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -952(%ebp)
	movl	-664(%ebp), %eax
	movl	%eax, -620(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -964(%ebp)
	leal	-676(%ebp), %eax
	movl	%eax, -960(%ebp)
	leal	-964(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-956(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO1
	movb	%al, -606(%ebp)
	jmp	.L1229
.L1303:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1279
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1280
.L1279:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1280:
	movl	-100(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-104(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-104(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1281
	movl	-80(%ebp), %eax
	movl	-84(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
	jmp	.L1282
.L1281:
	movl	-84(%ebp), %eax
	movl	-80(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
.L1282:
	movl	-88(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-88(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-104(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -96(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1283
	movl	$_UI00000000, %eax
	movl	$11232, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1283:
	movl	-96(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$2, %al
	jne	.L1284
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -972(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -968(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -980(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -976(%ebp)
	leal	-980(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-972(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	movb	%al, -606(%ebp)
	jmp	.L1229
.L1284:
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -988(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -984(%ebp)
	movl	-648(%ebp), %eax
	movl	%eax, -632(%ebp)
	movl	-624(%ebp), %eax
	movl	%eax, -996(%ebp)
	leal	-660(%ebp), %eax
	movl	%eax, -992(%ebp)
	leal	-996(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-988(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPLtO1
	movb	%al, -606(%ebp)
	jmp	.L1229
.L1245:
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -634(%ebp)
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -633(%ebp)
	cmpb	$6, -634(%ebp)
	sete	%al
	movb	%al, -73(%ebp)
	cmpb	$1, -73(%ebp)
	jne	.L1285
	cmpb	$5, -633(%ebp)
	sete	%al
	movb	%al, -73(%ebp)
.L1285:
	cmpb	$0, -73(%ebp)
	je	.L1286
	movb	$0, -606(%ebp)
	jmp	.L1229
.L1286:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1287
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L1288
.L1287:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L1288:
	movl	-60(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1289
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1290
.L1289:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1290:
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -56(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1291
	movl	$_UI00000000, %eax
	movl	$11244, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1291:
	movl	-56(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1292
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	jmp	.L1293
.L1292:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
.L1293:
	movl	-32(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1294
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1295
.L1294:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L1295:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -28(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1296
	movl	$_UI00000000, %eax
	movl	$11244, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1296:
	movl	-28(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	%al, %bl
	setb	%al
	movb	%al, -606(%ebp)
.L1229:
	cmpb	$0, 16(%ebp)
	je	.L1297
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -605(%ebp)
	jmp	.L1298
.L1297:
	movb	$0, -605(%ebp)
.L1298:
	movzbl	-606(%ebp), %eax
	movb	%al, -5(%ebp)
	cmpb	$1, -5(%ebp)
	jne	.L1299
	movzbl	-605(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -5(%ebp)
.L1299:
	movzbl	-5(%ebp), %eax
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__gt, .-ahir_ieee_proposed__float_pkg__gt
.globl ahir_ieee_proposed__float_pkg__ne
	.type	ahir_ieee_proposed__float_pkg__ne, @function
ahir_ieee_proposed__float_pkg__ne:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -3(%ebp)
	movb	$0, -2(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movb	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	movb	%al, -3(%ebp)
	cmpb	$0, 16(%ebp)
	je	.L1307
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -2(%ebp)
	jmp	.L1308
.L1307:
	movb	$0, -2(%ebp)
.L1308:
	movzbl	-3(%ebp), %eax
	movb	%al, -1(%ebp)
	cmpb	$1, -1(%ebp)
	jne	.L1309
	movzbl	-2(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
.L1309:
	movzbl	-1(%ebp), %eax
	xorl	$1, %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__ne, .-ahir_ieee_proposed__float_pkg__ne
.globl ahir_ieee_proposed__float_pkg__le
	.type	ahir_ieee_proposed__float_pkg__le, @function
ahir_ieee_proposed__float_pkg__le:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -3(%ebp)
	movb	$0, -2(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movb	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	movb	%al, -3(%ebp)
	cmpb	$0, 16(%ebp)
	je	.L1312
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -2(%ebp)
	jmp	.L1313
.L1312:
	movb	$0, -2(%ebp)
.L1313:
	movzbl	-3(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
	cmpb	$1, -1(%ebp)
	jne	.L1314
	movzbl	-2(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
.L1314:
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__le, .-ahir_ieee_proposed__float_pkg__le
.globl ahir_ieee_proposed__float_pkg__ge
	.type	ahir_ieee_proposed__float_pkg__ge, @function
ahir_ieee_proposed__float_pkg__ge:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -3(%ebp)
	movb	$0, -2(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movb	$0, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	movb	%al, -3(%ebp)
	cmpb	$0, 16(%ebp)
	je	.L1317
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unordered
	movb	%al, -2(%ebp)
	jmp	.L1318
.L1317:
	movb	$0, -2(%ebp)
.L1318:
	movzbl	-3(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
	cmpb	$1, -1(%ebp)
	jne	.L1319
	movzbl	-2(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -1(%ebp)
.L1319:
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__ge, .-ahir_ieee_proposed__float_pkg__ge
.globl ahir_ieee_proposed__float_pkg__qeqO1
	.type	ahir_ieee_proposed__float_pkg__qeqO1, @function
ahir_ieee_proposed__float_pkg__qeqO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1322
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1323
.L1322:
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L1323:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1324
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1325
.L1324:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1325:
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -128(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1326
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1327
.L1326:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1327:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1328
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1329
.L1328:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1329:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -124(%ebp)
	movb	$0, -120(%ebp)
	movb	$0, -119(%ebp)
	movb	$0, -118(%ebp)
	movb	$0, -117(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	%eax, (%edx)
	movl	-128(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1330
	movl	$0, -68(%ebp)
	jmp	.L1331
.L1330:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1331:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %ecx
	movl	%ecx, -112(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L1333:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1332
	movl	-56(%ebp), %edx
	movl	-112(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L1333
.L1332:
	leal	-144(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	%eax, (%edx)
	movl	-128(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1334
	movl	$0, -48(%ebp)
	jmp	.L1335
.L1334:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1335:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1337:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1336
	movl	-36(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1337
.L1336:
	cmpl	$0, -128(%ebp)
	sete	%al
	movb	%al, -28(%ebp)
	cmpb	$0, -28(%ebp)
	jne	.L1338
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -28(%ebp)
.L1338:
	movzbl	-28(%ebp), %eax
	movb	%al, -29(%ebp)
	cmpb	$0, -29(%ebp)
	jne	.L1339
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -29(%ebp)
.L1339:
	cmpb	$0, -29(%ebp)
	je	.L1340
	movb	$1, -193(%ebp)
	jmp	.L1341
.L1340:
	movb	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -120(%ebp)
	movb	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -119(%ebp)
	cmpb	$5, -120(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
	cmpb	$0, -26(%ebp)
	jne	.L1342
	cmpb	$6, -120(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
.L1342:
	movzbl	-26(%ebp), %eax
	movb	%al, -27(%ebp)
	cmpb	$1, -27(%ebp)
	jne	.L1343
	cmpb	$5, -119(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
	cmpb	$0, -25(%ebp)
	jne	.L1344
	cmpb	$6, -119(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
.L1344:
	movzbl	-25(%ebp), %eax
	movb	%al, -27(%ebp)
.L1343:
	cmpb	$0, -27(%ebp)
	je	.L1345
	movb	$3, -118(%ebp)
	jmp	.L1346
.L1345:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-152(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1349:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1347
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-160(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1348
.L1347:
	movl	$_UI00000000, %eax
	movl	$11335, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1349
.L1348:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1350
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-108(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -172(%ebp)
	leal	-176(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-192(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-184(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-184(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO7
	movb	%al, -118(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1346
.L1350:
	movl	$_UI00000000, %eax
	movl	$11340, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1348
.L1346:
	movzbl	ahir_ieee_proposed__float_pkg__float_check_error, %eax
	testb	%al, %al
	je	.L1351
	cmpb	$0, -120(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1352
	cmpb	$1, -120(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L1352:
	movzbl	-1(%ebp), %eax
	movb	%al, -2(%ebp)
	cmpb	$0, -2(%ebp)
	jne	.L1353
	cmpb	$0, -119(%ebp)
	sete	%al
	movb	%al, -2(%ebp)
.L1353:
	movzbl	-2(%ebp), %eax
	movb	%al, -3(%ebp)
	cmpb	$0, -3(%ebp)
	jne	.L1354
	cmpb	$1, -119(%ebp)
	sete	%al
	movb	%al, -3(%ebp)
.L1354:
	cmpb	$0, -3(%ebp)
	je	.L1355
	movb	$3, -117(%ebp)
	jmp	.L1357
.L1355:
	movb	$2, -117(%ebp)
	jmp	.L1357
.L1351:
	movb	$2, -117(%ebp)
.L1357:
	movzbl	-117(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movb	%al, 4(%esp)
	movzbl	-118(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -193(%ebp)
.L1341:
	movzbl	-193(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qeqO1, .-ahir_ieee_proposed__float_pkg__qeqO1
.globl ahir_ieee_proposed__float_pkg__qnoteqO1
	.type	ahir_ieee_proposed__float_pkg__qnoteqO1, @function
ahir_ieee_proposed__float_pkg__qnoteqO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1360
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1361
.L1360:
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L1361:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1362
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1363
.L1362:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1363:
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -128(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1364
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1365
.L1364:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1365:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1366
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1367
.L1366:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1367:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -124(%ebp)
	movb	$0, -120(%ebp)
	movb	$0, -119(%ebp)
	movb	$0, -118(%ebp)
	movb	$0, -117(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	%eax, (%edx)
	movl	-128(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1368
	movl	$0, -68(%ebp)
	jmp	.L1369
.L1368:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1369:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %ecx
	movl	%ecx, -112(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L1371:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1370
	movl	-56(%ebp), %edx
	movl	-112(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L1371
.L1370:
	leal	-144(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	%eax, (%edx)
	movl	-128(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1372
	movl	$0, -48(%ebp)
	jmp	.L1373
.L1372:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1373:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1375:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1374
	movl	-36(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1375
.L1374:
	cmpl	$0, -128(%ebp)
	sete	%al
	movb	%al, -28(%ebp)
	cmpb	$0, -28(%ebp)
	jne	.L1376
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -28(%ebp)
.L1376:
	movzbl	-28(%ebp), %eax
	movb	%al, -29(%ebp)
	cmpb	$0, -29(%ebp)
	jne	.L1377
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -29(%ebp)
.L1377:
	cmpb	$0, -29(%ebp)
	je	.L1378
	movb	$1, -193(%ebp)
	jmp	.L1379
.L1378:
	movb	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -120(%ebp)
	movb	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -119(%ebp)
	cmpb	$5, -120(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
	cmpb	$0, -26(%ebp)
	jne	.L1380
	cmpb	$6, -120(%ebp)
	sete	%al
	movb	%al, -26(%ebp)
.L1380:
	movzbl	-26(%ebp), %eax
	movb	%al, -27(%ebp)
	cmpb	$1, -27(%ebp)
	jne	.L1381
	cmpb	$5, -119(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
	cmpb	$0, -25(%ebp)
	jne	.L1382
	cmpb	$6, -119(%ebp)
	sete	%al
	movb	%al, -25(%ebp)
.L1382:
	movzbl	-25(%ebp), %eax
	movb	%al, -27(%ebp)
.L1381:
	cmpb	$0, -27(%ebp)
	je	.L1383
	movb	$3, -118(%ebp)
	jmp	.L1384
.L1383:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-152(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1387:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1385
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-128(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-160(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1386
.L1385:
	movl	$_UI00000000, %eax
	movl	$11377, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1387
.L1386:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-132(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1388
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-108(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -172(%ebp)
	leal	-176(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	-132(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-144(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-192(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-184(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-184(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-168(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO7
	movb	%al, -118(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1384
.L1388:
	movl	$_UI00000000, %eax
	movl	$11382, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1386
.L1384:
	movzbl	ahir_ieee_proposed__float_pkg__float_check_error, %eax
	testb	%al, %al
	je	.L1389
	cmpb	$0, -120(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1390
	cmpb	$1, -120(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L1390:
	movzbl	-1(%ebp), %eax
	movb	%al, -2(%ebp)
	cmpb	$0, -2(%ebp)
	jne	.L1391
	cmpb	$0, -119(%ebp)
	sete	%al
	movb	%al, -2(%ebp)
.L1391:
	movzbl	-2(%ebp), %eax
	movb	%al, -3(%ebp)
	cmpb	$0, -3(%ebp)
	jne	.L1392
	cmpb	$1, -119(%ebp)
	sete	%al
	movb	%al, -3(%ebp)
.L1392:
	cmpb	$0, -3(%ebp)
	je	.L1393
	movb	$3, -117(%ebp)
	jmp	.L1395
.L1393:
	movb	$2, -117(%ebp)
	jmp	.L1395
.L1389:
	movb	$2, -117(%ebp)
.L1395:
	movzbl	-117(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movb	%al, 4(%esp)
	movzbl	-118(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movb	%al, -193(%ebp)
.L1379:
	movzbl	-193(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qnoteqO1, .-ahir_ieee_proposed__float_pkg__qnoteqO1
	.section	.rodata
	.align 4
	.type	_UI0000000c.11750, @object
	.size	_UI0000000c.11750, 12
_UI0000000c.11750:
	.long	_UI00000000
	.long	11420
	.long	9
	.align 32
	.type	_UI0000000d.11752, @object
	.size	_UI0000000d.11752, 44
_UI0000000d.11752:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	32
	.byte	34
	.byte	63
	.byte	62
	.byte	34
	.byte	58
	.byte	32
	.byte	39
	.byte	45
	.byte	39
	.byte	32
	.byte	102
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	32
	.byte	105
	.byte	110
	.byte	32
	.byte	99
	.byte	111
	.byte	109
	.byte	112
	.byte	97
	.byte	114
	.byte	101
	.byte	32
	.byte	115
	.byte	116
	.byte	114
	.byte	105
	.byte	110
	.byte	103
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qgtO1__U1__STB.11753, @object
	.size	ahir_ieee_proposed__float_pkg__qgtO1__U1__STB.11753, 16
ahir_ieee_proposed__float_pkg__qgtO1__U1__STB.11753:
	.long	1
	.long	44
	.byte	0
	.zero	3
	.long	44
	.text
.globl ahir_ieee_proposed__float_pkg__qgtO1
	.type	ahir_ieee_proposed__float_pkg__qgtO1, @function
ahir_ieee_proposed__float_pkg__qgtO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1398
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1399
.L1398:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1399:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1400
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1401
.L1400:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1401:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -96(%ebp)
	movb	$0, -89(%ebp)
	cmpl	$0, -96(%ebp)
	sete	%al
	movb	%al, -69(%ebp)
	cmpb	$0, -69(%ebp)
	jne	.L1402
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -69(%ebp)
.L1402:
	movzbl	-69(%ebp), %eax
	movb	%al, -70(%ebp)
	cmpb	$0, -70(%ebp)
	jne	.L1403
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -70(%ebp)
.L1403:
	cmpb	$0, -70(%ebp)
	je	.L1404
	movb	$1, -113(%ebp)
	jmp	.L1405
.L1404:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1406
.L1413:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-56(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1407
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1408
.L1407:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1408:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -52(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1409
	movl	$_UI00000000, %eax
	movl	$11410, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1409:
	movl	-52(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1410
	movb	$1, -89(%ebp)
.L1410:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -68(%ebp)
	je	.L1406
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1411
	addl	$1, -68(%ebp)
	jmp	.L1413
.L1411:
	subl	$1, -68(%ebp)
	jmp	.L1413
.L1406:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1414
.L1421:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1415
	movl	-8(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1416
.L1415:
	movl	-12(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
.L1416:
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1417
	movl	$_UI00000000, %eax
	movl	$11415, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1417:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1418
	movb	$1, -89(%ebp)
.L1418:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -36(%ebp)
	je	.L1414
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1419
	addl	$1, -36(%ebp)
	jmp	.L1421
.L1419:
	subl	$1, -36(%ebp)
	jmp	.L1421
.L1414:
	cmpb	$0, -89(%ebp)
	je	.L1422
	movl	$_UI0000000d.11752, %eax
	movl	%eax, -104(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qgtO1__U1__STB.11753, -100(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000000c.11750, 8(%esp)
	movb	$2, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -113(%ebp)
	jmp	.L1405
.L1422:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1423
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
.L1423:
	cmpb	$0, -1(%ebp)
	je	.L1424
	movb	$1, -113(%ebp)
	jmp	.L1405
.L1424:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPGtO1
	testb	%al, %al
	je	.L1425
	movb	$3, -113(%ebp)
	jmp	.L1405
.L1425:
	movb	$2, -113(%ebp)
.L1405:
	movzbl	-113(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qgtO1, .-ahir_ieee_proposed__float_pkg__qgtO1
	.section	.rodata
	.align 4
	.type	_UI0000000e.11880, @object
	.size	_UI0000000e.11880, 12
_UI0000000e.11880:
	.long	_UI00000000
	.long	11452
	.long	9
	.align 32
	.type	_UI0000000f.11882, @object
	.size	_UI0000000f.11882, 45
_UI0000000f.11882:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	32
	.byte	34
	.byte	63
	.byte	62
	.byte	61
	.byte	34
	.byte	58
	.byte	32
	.byte	39
	.byte	45
	.byte	39
	.byte	32
	.byte	102
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	32
	.byte	105
	.byte	110
	.byte	32
	.byte	99
	.byte	111
	.byte	109
	.byte	112
	.byte	97
	.byte	114
	.byte	101
	.byte	32
	.byte	115
	.byte	116
	.byte	114
	.byte	105
	.byte	110
	.byte	103
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qgteqO1__U1__STB.11883, @object
	.size	ahir_ieee_proposed__float_pkg__qgteqO1__U1__STB.11883, 16
ahir_ieee_proposed__float_pkg__qgteqO1__U1__STB.11883:
	.long	1
	.long	45
	.byte	0
	.zero	3
	.long	45
	.text
.globl ahir_ieee_proposed__float_pkg__qgteqO1
	.type	ahir_ieee_proposed__float_pkg__qgteqO1, @function
ahir_ieee_proposed__float_pkg__qgteqO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1428
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1429
.L1428:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1429:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1430
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1431
.L1430:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1431:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -96(%ebp)
	movb	$0, -89(%ebp)
	cmpl	$0, -96(%ebp)
	sete	%al
	movb	%al, -69(%ebp)
	cmpb	$0, -69(%ebp)
	jne	.L1432
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -69(%ebp)
.L1432:
	movzbl	-69(%ebp), %eax
	movb	%al, -70(%ebp)
	cmpb	$0, -70(%ebp)
	jne	.L1433
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -70(%ebp)
.L1433:
	cmpb	$0, -70(%ebp)
	je	.L1434
	movb	$1, -113(%ebp)
	jmp	.L1435
.L1434:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1436
.L1443:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-56(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1437
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1438
.L1437:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1438:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -52(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1439
	movl	$_UI00000000, %eax
	movl	$11442, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1439:
	movl	-52(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1440
	movb	$1, -89(%ebp)
.L1440:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -68(%ebp)
	je	.L1436
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1441
	addl	$1, -68(%ebp)
	jmp	.L1443
.L1441:
	subl	$1, -68(%ebp)
	jmp	.L1443
.L1436:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1444
.L1451:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1445
	movl	-8(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1446
.L1445:
	movl	-12(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
.L1446:
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1447
	movl	$_UI00000000, %eax
	movl	$11447, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1447:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1448
	movb	$1, -89(%ebp)
.L1448:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -36(%ebp)
	je	.L1444
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1449
	addl	$1, -36(%ebp)
	jmp	.L1451
.L1449:
	subl	$1, -36(%ebp)
	jmp	.L1451
.L1444:
	cmpb	$0, -89(%ebp)
	je	.L1452
	movl	$_UI0000000f.11882, %eax
	movl	%eax, -104(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qgteqO1__U1__STB.11883, -100(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000000e.11880, 8(%esp)
	movb	$2, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -113(%ebp)
	jmp	.L1435
.L1452:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1453
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
.L1453:
	cmpb	$0, -1(%ebp)
	je	.L1454
	movb	$1, -113(%ebp)
	jmp	.L1435
.L1454:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPGeO1
	testb	%al, %al
	je	.L1455
	movb	$3, -113(%ebp)
	jmp	.L1435
.L1455:
	movb	$2, -113(%ebp)
.L1435:
	movzbl	-113(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qgteqO1, .-ahir_ieee_proposed__float_pkg__qgteqO1
	.section	.rodata
	.align 4
	.type	_UI00000010.12010, @object
	.size	_UI00000010.12010, 12
_UI00000010.12010:
	.long	_UI00000000
	.long	11484
	.long	9
	.align 32
	.type	_UI00000011.12012, @object
	.size	_UI00000011.12012, 44
_UI00000011.12012:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	32
	.byte	34
	.byte	63
	.byte	60
	.byte	34
	.byte	58
	.byte	32
	.byte	39
	.byte	45
	.byte	39
	.byte	32
	.byte	102
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	32
	.byte	105
	.byte	110
	.byte	32
	.byte	99
	.byte	111
	.byte	109
	.byte	112
	.byte	97
	.byte	114
	.byte	101
	.byte	32
	.byte	115
	.byte	116
	.byte	114
	.byte	105
	.byte	110
	.byte	103
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qltO1__U1__STB.12013, @object
	.size	ahir_ieee_proposed__float_pkg__qltO1__U1__STB.12013, 16
ahir_ieee_proposed__float_pkg__qltO1__U1__STB.12013:
	.long	1
	.long	44
	.byte	0
	.zero	3
	.long	44
	.text
.globl ahir_ieee_proposed__float_pkg__qltO1
	.type	ahir_ieee_proposed__float_pkg__qltO1, @function
ahir_ieee_proposed__float_pkg__qltO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1458
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1459
.L1458:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1459:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1460
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1461
.L1460:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1461:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -96(%ebp)
	movb	$0, -89(%ebp)
	cmpl	$0, -96(%ebp)
	sete	%al
	movb	%al, -69(%ebp)
	cmpb	$0, -69(%ebp)
	jne	.L1462
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -69(%ebp)
.L1462:
	movzbl	-69(%ebp), %eax
	movb	%al, -70(%ebp)
	cmpb	$0, -70(%ebp)
	jne	.L1463
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -70(%ebp)
.L1463:
	cmpb	$0, -70(%ebp)
	je	.L1464
	movb	$1, -113(%ebp)
	jmp	.L1465
.L1464:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1466
.L1473:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-56(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1467
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1468
.L1467:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1468:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -52(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1469
	movl	$_UI00000000, %eax
	movl	$11474, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1469:
	movl	-52(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1470
	movb	$1, -89(%ebp)
.L1470:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -68(%ebp)
	je	.L1466
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1471
	addl	$1, -68(%ebp)
	jmp	.L1473
.L1471:
	subl	$1, -68(%ebp)
	jmp	.L1473
.L1466:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1474
.L1481:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1475
	movl	-8(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1476
.L1475:
	movl	-12(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
.L1476:
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1477
	movl	$_UI00000000, %eax
	movl	$11479, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1477:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1478
	movb	$1, -89(%ebp)
.L1478:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -36(%ebp)
	je	.L1474
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1479
	addl	$1, -36(%ebp)
	jmp	.L1481
.L1479:
	subl	$1, -36(%ebp)
	jmp	.L1481
.L1474:
	cmpb	$0, -89(%ebp)
	je	.L1482
	movl	$_UI00000011.12012, %eax
	movl	%eax, -104(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qltO1__U1__STB.12013, -100(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000010.12010, 8(%esp)
	movb	$2, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -113(%ebp)
	jmp	.L1465
.L1482:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1483
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
.L1483:
	cmpb	$0, -1(%ebp)
	je	.L1484
	movb	$1, -113(%ebp)
	jmp	.L1465
.L1484:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPLtO1
	testb	%al, %al
	je	.L1485
	movb	$3, -113(%ebp)
	jmp	.L1465
.L1485:
	movb	$2, -113(%ebp)
.L1465:
	movzbl	-113(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qltO1, .-ahir_ieee_proposed__float_pkg__qltO1
	.section	.rodata
	.align 4
	.type	_UI00000012.12140, @object
	.size	_UI00000012.12140, 12
_UI00000012.12140:
	.long	_UI00000000
	.long	11516
	.long	9
	.align 32
	.type	_UI00000013.12142, @object
	.size	_UI00000013.12142, 45
_UI00000013.12142:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	32
	.byte	34
	.byte	63
	.byte	60
	.byte	61
	.byte	34
	.byte	58
	.byte	32
	.byte	39
	.byte	45
	.byte	39
	.byte	32
	.byte	102
	.byte	111
	.byte	117
	.byte	110
	.byte	100
	.byte	32
	.byte	105
	.byte	110
	.byte	32
	.byte	99
	.byte	111
	.byte	109
	.byte	112
	.byte	97
	.byte	114
	.byte	101
	.byte	32
	.byte	115
	.byte	116
	.byte	114
	.byte	105
	.byte	110
	.byte	103
	.align 4
	.type	ahir_ieee_proposed__float_pkg__qlteqO1__U1__STB.12143, @object
	.size	ahir_ieee_proposed__float_pkg__qlteqO1__U1__STB.12143, 16
ahir_ieee_proposed__float_pkg__qlteqO1__U1__STB.12143:
	.long	1
	.long	45
	.byte	0
	.zero	3
	.long	45
	.text
.globl ahir_ieee_proposed__float_pkg__qlteqO1
	.type	ahir_ieee_proposed__float_pkg__qlteqO1, @function
ahir_ieee_proposed__float_pkg__qlteqO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1488
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1489
.L1488:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1489:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1490
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1491
.L1490:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1491:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -96(%ebp)
	movb	$0, -89(%ebp)
	cmpl	$0, -96(%ebp)
	sete	%al
	movb	%al, -69(%ebp)
	cmpb	$0, -69(%ebp)
	jne	.L1492
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -69(%ebp)
.L1492:
	movzbl	-69(%ebp), %eax
	movb	%al, -70(%ebp)
	cmpb	$0, -70(%ebp)
	jne	.L1493
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$6, %eax
	setle	%al
	movb	%al, -70(%ebp)
.L1493:
	cmpb	$0, -70(%ebp)
	je	.L1494
	movb	$1, -113(%ebp)
	jmp	.L1495
.L1494:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1496
.L1503:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-56(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1497
	movl	-40(%ebp), %eax
	movl	-44(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	jmp	.L1498
.L1497:
	movl	-44(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
.L1498:
	movl	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-48(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -52(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1499
	movl	$_UI00000000, %eax
	movl	$11506, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1499:
	movl	-52(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1500
	movb	$1, -89(%ebp)
.L1500:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -68(%ebp)
	je	.L1496
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1501
	addl	$1, -68(%ebp)
	jmp	.L1503
.L1501:
	subl	$1, -68(%ebp)
	jmp	.L1503
.L1496:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1504
.L1511:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1505
	movl	-8(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	jmp	.L1506
.L1505:
	movl	-12(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
.L1506:
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1507
	movl	$_UI00000000, %eax
	movl	$11511, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1507:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	$8, %al
	jne	.L1508
	movb	$1, -89(%ebp)
.L1508:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -36(%ebp)
	je	.L1504
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1509
	addl	$1, -36(%ebp)
	jmp	.L1511
.L1509:
	subl	$1, -36(%ebp)
	jmp	.L1511
.L1504:
	cmpb	$0, -89(%ebp)
	je	.L1512
	movl	$_UI00000013.12142, %eax
	movl	%eax, -104(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__qlteqO1__U1__STB.12143, -100(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000012.12140, 8(%esp)
	movb	$2, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$1, -113(%ebp)
	jmp	.L1495
.L1512:
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L1513
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_x
	movb	%al, -1(%ebp)
.L1513:
	cmpb	$0, -1(%ebp)
	je	.L1514
	movb	$1, -113(%ebp)
	jmp	.L1495
.L1514:
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPLeO1
	testb	%al, %al
	je	.L1515
	movb	$3, -113(%ebp)
	jmp	.L1495
.L1515:
	movb	$2, -113(%ebp)
.L1495:
	movzbl	-113(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qlteqO1, .-ahir_ieee_proposed__float_pkg__qlteqO1
	.section	.rodata
	.align 4
	.type	_UI00000014.12251, @object
	.size	_UI00000014.12251, 12
_UI00000014.12251:
	.long	_UI00000000
	.long	11535
	.long	7
	.align 32
	.type	_UI00000015.12253, @object
	.size	_UI00000015.12253, 56
_UI00000015.12253:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	83
	.byte	84
	.byte	68
	.byte	95
	.byte	77
	.byte	65
	.byte	84
	.byte	67
	.byte	72
	.byte	58
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	70
	.byte	65
	.byte	76
	.byte	83
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__std_match__U1__STB.12254, @object
	.size	ahir_ieee_proposed__float_pkg__std_match__U1__STB.12254, 16
ahir_ieee_proposed__float_pkg__std_match__U1__STB.12254:
	.long	1
	.long	56
	.byte	0
	.zero	3
	.long	56
	.text
.globl ahir_ieee_proposed__float_pkg__std_match
	.type	ahir_ieee_proposed__float_pkg__std_match, @function
ahir_ieee_proposed__float_pkg__std_match:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1518
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L1519
.L1518:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L1519:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1520
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	jmp	.L1521
.L1520:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
.L1521:
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	sete	%al
	movb	%al, -41(%ebp)
	cmpb	$1, -41(%ebp)
	jne	.L1522
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1523
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L1524
.L1523:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L1524:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1525
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L1526
.L1525:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L1526:
	movl	-24(%ebp), %eax
	cmpl	-20(%ebp), %eax
	sete	%al
	movb	%al, -41(%ebp)
.L1522:
	cmpb	$0, -41(%ebp)
	je	.L1527
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-60(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__std_matchO5
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	movb	%al, -81(%ebp)
	jmp	.L1528
.L1527:
	movl	$_UI00000015.12253, %eax
	movl	%eax, -68(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__std_match__U1__STB.12254, -64(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000014.12251, 8(%esp)
	movb	$1, 4(%esp)
	leal	-68(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_report
	movb	$0, -81(%ebp)
.L1528:
	movzbl	-81(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__std_match, .-ahir_ieee_proposed__float_pkg__std_match
.globl ahir_ieee_proposed__float_pkg__find_rightmost
	.type	ahir_ieee_proposed__float_pkg__find_rightmost, @function
ahir_ieee_proposed__float_pkg__find_rightmost:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1531
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L1532
.L1531:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
.L1532:
	movl	-52(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1533
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1534
.L1533:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L1534:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-56(%ebp), %eax
	cmpl	-48(%ebp), %eax
	jl	.L1535
.L1541:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1536
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L1537
.L1536:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L1537:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1538
	movl	$_UI00000000, %eax
	movl	$11545, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1538:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	12(%ebp), %al
	jne	.L1539
	movl	-56(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L1540
.L1539:
	movl	-56(%ebp), %eax
	cmpl	-48(%ebp), %eax
	je	.L1535
	subl	$1, -56(%ebp)
	jmp	.L1541
.L1535:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1542
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -8(%ebp)
	jmp	.L1543
.L1542:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
.L1543:
	movl	-8(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1540:
	movl	-68(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__find_rightmost, .-ahir_ieee_proposed__float_pkg__find_rightmost
.globl ahir_ieee_proposed__float_pkg__find_leftmostO1
	.type	ahir_ieee_proposed__float_pkg__find_leftmostO1, @function
ahir_ieee_proposed__float_pkg__find_leftmostO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	movl	$-2147483648, -44(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1546
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L1547
.L1546:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L1547:
	movl	-40(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -44(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L1548
.L1555:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-20(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1549
	movl	-4(%ebp), %eax
	movl	-8(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
	jmp	.L1550
.L1549:
	movl	-8(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -12(%ebp)
.L1550:
	movl	-12(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-12(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-20(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -16(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1551
	movl	$_UI00000000, %eax
	movl	$11557, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1551:
	movl	-16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	cmpb	12(%ebp), %al
	jne	.L1552
	movl	-32(%ebp), %eax
	movl	%eax, -44(%ebp)
	jmp	.L1548
.L1552:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -32(%ebp)
	je	.L1548
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1553
	addl	$1, -32(%ebp)
	jmp	.L1555
.L1553:
	subl	$1, -32(%ebp)
	jmp	.L1555
.L1548:
	movl	-44(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__find_leftmostO1, .-ahir_ieee_proposed__float_pkg__find_leftmostO1
.globl ahir_ieee_proposed__float_pkg__OPEqO1
	.type	ahir_ieee_proposed__float_pkg__OPEqO1, @function
ahir_ieee_proposed__float_pkg__OPEqO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPEqO1, .-ahir_ieee_proposed__float_pkg__OPEqO1
.globl ahir_ieee_proposed__float_pkg__OPNeO1
	.type	ahir_ieee_proposed__float_pkg__OPNeO1, @function
ahir_ieee_proposed__float_pkg__OPNeO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ne
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPNeO1, .-ahir_ieee_proposed__float_pkg__OPNeO1
.globl ahir_ieee_proposed__float_pkg__OPGeO1
	.type	ahir_ieee_proposed__float_pkg__OPGeO1, @function
ahir_ieee_proposed__float_pkg__OPGeO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ge
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPGeO1, .-ahir_ieee_proposed__float_pkg__OPGeO1
.globl ahir_ieee_proposed__float_pkg__OPLeO1
	.type	ahir_ieee_proposed__float_pkg__OPLeO1, @function
ahir_ieee_proposed__float_pkg__OPLeO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__le
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPLeO1, .-ahir_ieee_proposed__float_pkg__OPLeO1
.globl ahir_ieee_proposed__float_pkg__OPGtO1
	.type	ahir_ieee_proposed__float_pkg__OPGtO1, @function
ahir_ieee_proposed__float_pkg__OPGtO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPGtO1, .-ahir_ieee_proposed__float_pkg__OPGtO1
.globl ahir_ieee_proposed__float_pkg__OPLtO1
	.type	ahir_ieee_proposed__float_pkg__OPLtO1, @function
ahir_ieee_proposed__float_pkg__OPLtO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPLtO1, .-ahir_ieee_proposed__float_pkg__OPLtO1
.globl ahir_ieee_proposed__float_pkg__maximumO1
	.type	ahir_ieee_proposed__float_pkg__maximumO1, @function
ahir_ieee_proposed__float_pkg__maximumO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1570
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1571
.L1570:
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L1571:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1572
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1573
.L1572:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1573:
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -124(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1574
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1575
.L1574:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1575:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1576
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1577
.L1576:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1577:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -120(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1578
	movl	$0, -68(%ebp)
	jmp	.L1579
.L1578:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1579:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %ecx
	movl	%ecx, -112(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L1581:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1580
	movl	-56(%ebp), %edx
	movl	-112(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L1581
.L1580:
	leal	-140(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1582
	movl	$0, -48(%ebp)
	jmp	.L1583
.L1582:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1583:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1585:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1584
	movl	-36(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1585
.L1584:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -29(%ebp)
	cmpb	$0, -29(%ebp)
	jne	.L1586
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -29(%ebp)
.L1586:
	cmpb	$0, -29(%ebp)
	je	.L1587
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -144(%ebp)
	leal	-148(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1595
.L1587:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-156(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1591:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-128(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1589
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-164(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1590
.L1589:
	movl	$_UI00000000, %eax
	movl	$11606, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1591
.L1590:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-128(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1592
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-108(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -172(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -180(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-180(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-172(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPGtO1
	testb	%al, %al
	jne	.L1593
	jmp	.L1596
.L1592:
	movl	$_UI00000000, %eax
	movl	$11607, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1590
.L1593:
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -184(%ebp)
	leal	-188(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1595
.L1596:
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -196(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-196(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L1595:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__maximumO1, .-ahir_ieee_proposed__float_pkg__maximumO1
.globl ahir_ieee_proposed__float_pkg__minimumO1
	.type	ahir_ieee_proposed__float_pkg__minimumO1, @function
ahir_ieee_proposed__float_pkg__minimumO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1598
	movl	-96(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -104(%ebp)
	jmp	.L1599
.L1598:
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -104(%ebp)
.L1599:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1600
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -100(%ebp)
	jmp	.L1601
.L1600:
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
.L1601:
	movl	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -124(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1602
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L1603
.L1602:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L1603:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1604
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -84(%ebp)
	jmp	.L1605
.L1604:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -84(%ebp)
.L1605:
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -120(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1606
	movl	$0, -68(%ebp)
	jmp	.L1607
.L1606:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1607:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %ecx
	movl	%ecx, -112(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L1609:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L1608
	movl	-56(%ebp), %edx
	movl	-112(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L1609
.L1608:
	leal	-140(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %edx
	movl	-120(%ebp), %eax
	movl	%eax, (%edx)
	movl	-124(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1610
	movl	$0, -48(%ebp)
	jmp	.L1611
.L1610:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1611:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1613:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1612
	movl	-36(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1613
.L1612:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -29(%ebp)
	cmpb	$0, -29(%ebp)
	jne	.L1614
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	setle	%al
	movb	%al, -29(%ebp)
.L1614:
	cmpb	$0, -29(%ebp)
	je	.L1615
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -144(%ebp)
	leal	-148(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1623
.L1615:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-156(%ebp), %eax
	movl	%eax, -20(%ebp)
.L1619:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-128(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1617
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-112(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 28(%esp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movb	$0, 16(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	-120(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-164(%ebp), %eax
	movl	%eax, -12(%ebp)
	jmp	.L1618
.L1617:
	movl	$_UI00000000, %eax
	movl	$11622, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1619
.L1618:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-128(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1620
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-108(%ebp), %ecx
	movl	-116(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -172(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -180(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-180(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-172(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__OPGtO1
	testb	%al, %al
	jne	.L1621
	jmp	.L1624
.L1620:
	movl	$_UI00000000, %eax
	movl	$11623, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1618
.L1621:
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -184(%ebp)
	leal	-188(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1623
.L1624:
	movl	-128(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -196(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -192(%ebp)
	leal	-196(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L1623:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__minimumO1, .-ahir_ieee_proposed__float_pkg__minimumO1
.globl ahir_ieee_proposed__float_pkg__resizeO1
	.type	ahir_ieee_proposed__float_pkg__resizeO1, @function
ahir_ieee_proposed__float_pkg__resizeO1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1508, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -896(%ebp)
	movl	-896(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1626
	movl	-896(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -900(%ebp)
	jmp	.L1627
.L1626:
	movl	-896(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -900(%ebp)
.L1627:
	movl	-900(%ebp), %eax
	negl	%eax
	movl	%eax, -960(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -888(%ebp)
	movl	-888(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1628
	movl	-888(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -892(%ebp)
	jmp	.L1629
.L1628:
	movl	-888(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -892(%ebp)
.L1629:
	movl	-892(%ebp), %eax
	movl	%eax, -956(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -884(%ebp)
	movl	-884(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-884(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-884(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-884(%ebp), %eax
	movl	(%eax), %edx
	movl	-884(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -876(%ebp)
	cmpl	$0, -876(%ebp)
	jns	.L1630
	movl	$0, -880(%ebp)
	jmp	.L1631
.L1630:
	movl	-876(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -880(%ebp)
.L1631:
	movl	-884(%ebp), %edx
	movl	-880(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-964(%ebp), %eax
	movl	%eax, -952(%ebp)
	movl	-952(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1472(%ebp)
	movl	-1472(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1472(%ebp)
	movl	-1472(%ebp), %ecx
	movl	%ecx, -948(%ebp)
	movl	-964(%ebp), %eax
	movl	%eax, -872(%ebp)
	movl	$0, -868(%ebp)
.L1633:
	movl	-868(%ebp), %eax
	cmpl	-872(%ebp), %eax
	je	.L1632
	movl	-868(%ebp), %edx
	movl	-948(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -868(%ebp)
	jmp	.L1633
.L1632:
	movb	$0, -941(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -864(%ebp)
	movl	-956(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-864(%ebp), %eax
	movl	%edx, (%eax)
	movl	-864(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-864(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-864(%ebp), %eax
	movl	(%eax), %edx
	movl	-864(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -856(%ebp)
	cmpl	$0, -856(%ebp)
	jns	.L1634
	movl	$0, -860(%ebp)
	jmp	.L1635
.L1634:
	movl	-856(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -860(%ebp)
.L1635:
	movl	-864(%ebp), %edx
	movl	-860(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-940(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1468(%ebp)
	movl	-1468(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1468(%ebp)
	movl	-1468(%ebp), %ecx
	movl	%ecx, -936(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -852(%ebp)
	movl	$0, -848(%ebp)
.L1637:
	movl	-848(%ebp), %eax
	cmpl	-852(%ebp), %eax
	je	.L1636
	movl	-848(%ebp), %edx
	movl	-936(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -848(%ebp)
	jmp	.L1637
.L1636:
	leal	-1008(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	-844(%ebp), %edx
	movl	-960(%ebp), %eax
	movl	%eax, (%edx)
	movl	-844(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-844(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-844(%ebp), %eax
	movl	(%eax), %edx
	movl	-844(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -836(%ebp)
	cmpl	$0, -836(%ebp)
	jns	.L1638
	movl	$0, -840(%ebp)
	jmp	.L1639
.L1638:
	movl	-836(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -840(%ebp)
.L1639:
	movl	-844(%ebp), %edx
	movl	-840(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-996(%ebp), %eax
	movl	%eax, -932(%ebp)
	movl	-932(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1464(%ebp)
	movl	-1464(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1464(%ebp)
	movl	-1464(%ebp), %ecx
	movl	%ecx, -928(%ebp)
	movl	-996(%ebp), %eax
	movl	%eax, -832(%ebp)
	movl	$0, -828(%ebp)
.L1641:
	movl	-828(%ebp), %eax
	cmpl	-832(%ebp), %eax
	je	.L1640
	movl	-828(%ebp), %edx
	movl	-928(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -828(%ebp)
	jmp	.L1641
.L1640:
	movb	$0, -921(%ebp)
	leal	-1024(%ebp), %eax
	movl	%eax, -824(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-824(%ebp), %eax
	movl	%edx, (%eax)
	movl	-824(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-824(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-824(%ebp), %eax
	movl	(%eax), %edx
	movl	-824(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -816(%ebp)
	cmpl	$0, -816(%ebp)
	jns	.L1642
	movl	$0, -820(%ebp)
	jmp	.L1643
.L1642:
	movl	-816(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -820(%ebp)
.L1643:
	movl	-824(%ebp), %edx
	movl	-820(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1012(%ebp), %eax
	movl	%eax, -920(%ebp)
	movl	-920(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1460(%ebp)
	movl	-1460(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1460(%ebp)
	movl	-1460(%ebp), %ecx
	movl	%ecx, -916(%ebp)
	movl	-1012(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	$0, -808(%ebp)
.L1645:
	movl	-808(%ebp), %eax
	cmpl	-812(%ebp), %eax
	je	.L1644
	movl	-808(%ebp), %edx
	movl	-916(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -808(%ebp)
	jmp	.L1645
.L1644:
	leal	-1040(%ebp), %eax
	movl	%eax, -804(%ebp)
	movl	-804(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, (%edx)
	movl	-804(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-804(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-804(%ebp), %eax
	movl	(%eax), %edx
	movl	-804(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -796(%ebp)
	cmpl	$0, -796(%ebp)
	jns	.L1646
	movl	$0, -800(%ebp)
	jmp	.L1647
.L1646:
	movl	-796(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -800(%ebp)
.L1647:
	movl	-804(%ebp), %edx
	movl	-800(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1028(%ebp), %eax
	movl	%eax, -912(%ebp)
	movl	-912(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1456(%ebp)
	movl	-1456(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1456(%ebp)
	movl	-1456(%ebp), %ecx
	movl	%ecx, -908(%ebp)
	movl	-1028(%ebp), %eax
	movl	%eax, -792(%ebp)
	movl	$0, -788(%ebp)
.L1649:
	movl	-788(%ebp), %eax
	cmpl	-792(%ebp), %eax
	je	.L1648
	movl	-788(%ebp), %edx
	movl	-908(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -788(%ebp)
	jmp	.L1649
.L1648:
	movl	$0, -904(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -941(%ebp)
	cmpb	$7, -941(%ebp)
	sete	%al
	movb	%al, -754(%ebp)
	cmpb	$0, -754(%ebp)
	jne	.L1650
	cmpb	$4, -941(%ebp)
	sete	%al
	movb	%al, -754(%ebp)
.L1650:
	movzbl	-754(%ebp), %eax
	movb	%al, -755(%ebp)
	cmpb	$1, -755(%ebp)
	jne	.L1651
	movzbl	32(%ebp), %eax
	movb	%al, -755(%ebp)
.L1651:
	movzbl	-755(%ebp), %eax
	movb	%al, -756(%ebp)
	cmpb	$1, -756(%ebp)
	jne	.L1652
	movl	-956(%ebp), %eax
	cmpl	16(%ebp), %eax
	setl	%al
	movb	%al, -753(%ebp)
	cmpb	$0, -753(%ebp)
	jne	.L1653
	movl	-960(%ebp), %eax
	cmpl	20(%ebp), %eax
	setl	%al
	movb	%al, -753(%ebp)
.L1653:
	movzbl	-753(%ebp), %eax
	movb	%al, -756(%ebp)
.L1652:
	movzbl	-756(%ebp), %eax
	movb	%al, -757(%ebp)
	cmpb	$0, -757(%ebp)
	jne	.L1654
	movl	-956(%ebp), %eax
	cmpl	16(%ebp), %eax
	setg	%al
	movb	%al, -757(%ebp)
.L1654:
	movzbl	-757(%ebp), %eax
	movb	%al, -781(%ebp)
	cmpb	$0, -781(%ebp)
	jne	.L1655
	movl	-960(%ebp), %eax
	cmpl	20(%ebp), %eax
	setg	%al
	movb	%al, -781(%ebp)
.L1655:
	cmpb	$0, -781(%ebp)
	je	.L1656
	cmpb	$10, -941(%ebp)
	ja	.L1657
	movzbl	-941(%ebp), %eax
	movl	.L1663(,%eax,4), %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L1663:
	.long	.L1658
	.long	.L1658
	.long	.L1659
	.long	.L1657
	.long	.L1657
	.long	.L1660
	.long	.L1660
	.long	.L1657
	.long	.L1657
	.long	.L1661
	.long	.L1662
	.text
.L1662:
	movl	%esp, %eax
	movl	%eax, -1432(%ebp)
	movl	-952(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1452(%ebp)
	movl	-1452(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1452(%ebp)
	movl	-1452(%ebp), %ecx
	movl	%ecx, -752(%ebp)
	movl	-964(%ebp), %eax
	movl	%eax, -748(%ebp)
	movl	$0, -744(%ebp)
.L1665:
	movl	-744(%ebp), %eax
	cmpl	-748(%ebp), %eax
	je	.L1664
	movl	-744(%ebp), %edx
	movl	-752(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -744(%ebp)
	jmp	.L1665
.L1664:
	movl	-752(%ebp), %eax
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1432(%ebp), %esp
	jmp	.L1699
.L1658:
	call	__ghdl_stack2_mark
	movl	%eax, -740(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1128(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-1128(%ebp), %eax
	movl	%eax, -736(%ebp)
.L1668:
	movl	-736(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1667
	movl	-736(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-740(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1667:
	movl	$_UI00000000, %eax
	movl	$11666, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1668
.L1661:
	call	__ghdl_stack2_mark
	movl	%eax, -732(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1136(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-1136(%ebp), %eax
	movl	%eax, -728(%ebp)
.L1670:
	movl	-728(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1669
	movl	-728(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-732(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1669:
	movl	$_UI00000000, %eax
	movl	$11669, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1670
.L1659:
	call	__ghdl_stack2_mark
	movl	%eax, -724(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1144(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_inffpO1
	leal	-1144(%ebp), %eax
	movl	%eax, -720(%ebp)
.L1672:
	movl	-720(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1671
	movl	-720(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-724(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1671:
	movl	$_UI00000000, %eax
	movl	$11672, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1672
.L1660:
	call	__ghdl_stack2_mark
	movl	%eax, -716(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1152(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__zerofpO1
	leal	-1152(%ebp), %eax
	movl	%eax, -712(%ebp)
.L1674:
	movl	-712(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1673
	movl	-712(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-716(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1673:
	movl	$_UI00000000, %eax
	movl	$11675, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1674
.L1657:
	movl	-996(%ebp), %eax
	movl	%eax, -932(%ebp)
	movl	-928(%ebp), %eax
	movl	%eax, -1160(%ebp)
	leal	-1008(%ebp), %eax
	movl	%eax, -1156(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-936(%ebp), %eax
	movl	%eax, -1168(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -1164(%ebp)
	leal	-1168(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-1160(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	32(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-941(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	movl	20(%ebp), %eax
	cmpl	-960(%ebp), %eax
	setg	%al
	movb	%al, -705(%ebp)
	cmpb	$1, -705(%ebp)
	jne	.L1675
	movzbl	32(%ebp), %eax
	movb	%al, -705(%ebp)
.L1675:
	cmpb	$0, -705(%ebp)
	je	.L1676
	movl	%esp, %eax
	movl	%eax, -1428(%ebp)
	movl	-912(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1448(%ebp)
	movl	-1448(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1448(%ebp)
	movl	-1448(%ebp), %ecx
	movl	%ecx, -700(%ebp)
	movl	-1028(%ebp), %eax
	movl	%eax, -696(%ebp)
	movl	$0, -692(%ebp)
.L1678:
	movl	-692(%ebp), %eax
	cmpl	-696(%ebp), %eax
	je	.L1677
	movl	-692(%ebp), %edx
	movl	-700(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -692(%ebp)
	jmp	.L1678
.L1677:
	movl	-700(%ebp), %edx
	movl	-908(%ebp), %ecx
	movl	-912(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1428(%ebp), %esp
	leal	-1184(%ebp), %eax
	movl	%eax, -688(%ebp)
	movl	-688(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, (%edx)
	movl	-960(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-688(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-688(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-688(%ebp), %eax
	movl	(%eax), %edx
	movl	-688(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -680(%ebp)
	cmpl	$0, -680(%ebp)
	jns	.L1679
	movl	$0, -684(%ebp)
	jmp	.L1680
.L1679:
	movl	-680(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -684(%ebp)
.L1680:
	movl	-688(%ebp), %edx
	movl	-684(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1172(%ebp), %eax
	movl	%eax, -704(%ebp)
	leal	-1040(%ebp), %eax
	movl	%eax, -676(%ebp)
	leal	-1184(%ebp), %eax
	movl	%eax, -672(%ebp)
	movl	-676(%ebp), %eax
	movl	(%eax), %edx
	movl	-672(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -668(%ebp)
	movl	-668(%ebp), %eax
	movl	%eax, -664(%ebp)
	movl	-668(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-672(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-664(%ebp), %edx
	movl	-676(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1681
	movl	$_UI00000000, %eax
	movl	$11687, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1681:
	movl	-928(%ebp), %eax
	movl	%eax, -660(%ebp)
.L1685:
	movl	-996(%ebp), %edx
	movl	-1172(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1682
	movl	-660(%ebp), %ecx
	movl	-664(%ebp), %edx
	movl	-908(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-704(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	call	__ghdl_stack2_mark
	movl	%eax, -656(%ebp)
	movl	-1028(%ebp), %eax
	movl	%eax, -912(%ebp)
	movl	-908(%ebp), %eax
	movl	%eax, -1200(%ebp)
	leal	-1040(%ebp), %eax
	movl	%eax, -1196(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-936(%ebp), %eax
	movl	%eax, -1208(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -1204(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -644(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1683
	jmp	.L1777
.L1682:
	movl	$_UI00000000, %eax
	movl	$11649, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1685
.L1683:
	movl	-632(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -640(%ebp)
	jmp	.L1686
.L1777:
	movl	-632(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -640(%ebp)
.L1686:
	movl	-640(%ebp), %eax
	movl	%eax, -624(%ebp)
	movl	-644(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -620(%ebp)
	movl	-644(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1687
	movl	-620(%ebp), %eax
	movl	-624(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -628(%ebp)
	jmp	.L1688
.L1687:
	movl	-624(%ebp), %eax
	movl	-620(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -628(%ebp)
.L1688:
	movl	-628(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	-628(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-644(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -636(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1689
	movl	$_UI00000000, %eax
	movl	$11692, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1689:
	movl	-636(%ebp), %eax
	movl	%eax, -652(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-652(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movl	$0, 36(%esp)
	movzbl	36(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 28(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movb	$2, 16(%esp)
	movb	%dl, 12(%esp)
	leal	-1208(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1200(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1192(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-1192(%ebp), %eax
	movl	%eax, -648(%ebp)
.L1691:
	movl	-648(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1690
	movl	-648(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-656(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1690:
	movl	$_UI00000000, %eax
	movl	$11689, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1691
.L1676:
	call	__ghdl_stack2_mark
	movl	%eax, -616(%ebp)
	movl	-996(%ebp), %eax
	movl	%eax, -932(%ebp)
	movl	-928(%ebp), %eax
	movl	%eax, -1224(%ebp)
	leal	-1008(%ebp), %eax
	movl	%eax, -1220(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-936(%ebp), %eax
	movl	%eax, -1232(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -1228(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -604(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -592(%ebp)
	movl	-592(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1692
	movl	-592(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -600(%ebp)
	jmp	.L1693
.L1692:
	movl	-592(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -600(%ebp)
.L1693:
	movl	-600(%ebp), %eax
	movl	%eax, -584(%ebp)
	movl	-604(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -580(%ebp)
	movl	-604(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1694
	movl	-580(%ebp), %eax
	movl	-584(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -588(%ebp)
	jmp	.L1695
.L1694:
	movl	-584(%ebp), %eax
	movl	-580(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -588(%ebp)
.L1695:
	movl	-588(%ebp), %eax
	movl	%eax, -596(%ebp)
	movl	-588(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-604(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -596(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1696
	movl	$_UI00000000, %eax
	movl	$11702, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1696:
	movl	-596(%ebp), %eax
	movl	%eax, -612(%ebp)
	movl	20(%ebp), %edx
	movl	-960(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-612(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movl	%ecx, 36(%esp)
	movzbl	36(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 28(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 20(%esp)
	movb	$2, 16(%esp)
	movb	%dl, 12(%esp)
	leal	-1232(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1224(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-1216(%ebp), %eax
	movl	%eax, -608(%ebp)
.L1698:
	movl	-608(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-964(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1697
	movl	-608(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-948(%ebp), %ecx
	movl	-952(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-616(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1699
.L1697:
	movl	$_UI00000000, %eax
	movl	$11699, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1698
.L1656:
	movl	16(%ebp), %eax
	cmpl	-956(%ebp), %eax
	jle	.L1700
	leal	-1056(%ebp), %eax
	movl	%eax, -576(%ebp)
	movl	-956(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-576(%ebp), %eax
	movl	%edx, (%eax)
	movl	-576(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-576(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-576(%ebp), %eax
	movl	(%eax), %edx
	movl	-576(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -568(%ebp)
	cmpl	$0, -568(%ebp)
	jns	.L1701
	movl	$0, -572(%ebp)
	jmp	.L1702
.L1701:
	movl	-568(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -572(%ebp)
.L1702:
	movl	-576(%ebp), %edx
	movl	-572(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1044(%ebp), %eax
	movl	%eax, -780(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -564(%ebp)
	leal	-1056(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-564(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-560(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L1703
	movl	$_UI00000000, %eax
	movl	$11712, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1703:
	movl	-564(%ebp), %eax
	movl	(%eax), %edx
	movl	-560(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -556(%ebp)
	movl	-556(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-556(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-560(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-552(%ebp), %edx
	movl	-564(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1704
	movl	$_UI00000000, %eax
	movl	$11712, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1704:
	leal	-1240(%ebp), %eax
	movl	%eax, -544(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-552(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-540(%ebp), %eax
	movl	%eax, -1240(%ebp)
	leal	-1256(%ebp), %eax
	movl	%eax, -1236(%ebp)
	movl	-544(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -536(%ebp)
	leal	-1056(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	-532(%ebp), %eax
	movl	(%eax), %edx
	movl	-536(%ebp), %eax
	movl	%edx, (%eax)
	movl	-532(%ebp), %eax
	movl	4(%eax), %edx
	movl	-536(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-532(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-536(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-532(%ebp), %eax
	movl	12(%eax), %edx
	movl	-536(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1240(%ebp), %eax
	movl	%eax, -548(%ebp)
.L1708:
	movl	-548(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-980(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1705
	movl	-548(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-936(%ebp), %ecx
	movl	-940(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	cmpb	$6, -941(%ebp)
	sete	%al
	movb	%al, -525(%ebp)
	cmpb	$0, -525(%ebp)
	je	.L1706
	jmp	.L1707
.L1705:
	movl	$_UI00000000, %eax
	movl	$11712, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1708
.L1706:
	cmpb	$5, -941(%ebp)
	sete	%al
	movb	%al, -525(%ebp)
.L1707:
	cmpb	$0, -525(%ebp)
	je	.L1709
	leal	-1272(%ebp), %eax
	movl	%eax, -520(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-520(%ebp), %eax
	movl	%edx, (%eax)
	movl	-520(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-520(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-520(%ebp), %eax
	movl	(%eax), %edx
	movl	-520(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -512(%ebp)
	cmpl	$0, -512(%ebp)
	jns	.L1710
	movl	$0, -516(%ebp)
	jmp	.L1711
.L1710:
	movl	-512(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -516(%ebp)
.L1711:
	movl	-520(%ebp), %edx
	movl	-516(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1260(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	%esp, %eax
	movl	%eax, -1424(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -508(%ebp)
	leal	-1272(%ebp), %eax
	movl	%eax, -504(%ebp)
	movl	-508(%ebp), %eax
	movl	(%eax), %edx
	movl	-504(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -500(%ebp)
	movl	-500(%ebp), %eax
	movl	%eax, -496(%ebp)
	movl	-500(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-504(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-496(%ebp), %edx
	movl	-508(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1712
	movl	$_UI00000000, %eax
	movl	$11714, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1712:
	movl	-524(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1444(%ebp)
	movl	-1444(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1444(%ebp)
	movl	-1444(%ebp), %ecx
	movl	%ecx, -492(%ebp)
	movl	-1260(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	$0, -484(%ebp)
.L1714:
	movl	-484(%ebp), %eax
	cmpl	-488(%ebp), %eax
	je	.L1713
	movl	-484(%ebp), %edx
	movl	-492(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -484(%ebp)
	jmp	.L1714
.L1713:
	movl	-492(%ebp), %ecx
	movl	-496(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-524(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-1424(%ebp), %esp
	jmp	.L1715
.L1709:
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-936(%ebp), %eax
	movl	%eax, -1280(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -1276(%ebp)
	movl	$-1, 4(%esp)
	leal	-1280(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPEqO6
	testb	%al, %al
	je	.L1716
	leal	-1296(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-472(%ebp), %eax
	movl	%edx, (%eax)
	movl	-472(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-472(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-472(%ebp), %eax
	movl	(%eax), %edx
	movl	-472(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -464(%ebp)
	cmpl	$0, -464(%ebp)
	jns	.L1717
	movl	$0, -468(%ebp)
	jmp	.L1718
.L1717:
	movl	-464(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -468(%ebp)
.L1718:
	movl	-472(%ebp), %edx
	movl	-468(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1284(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	%esp, %eax
	movl	%eax, -1420(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -460(%ebp)
	leal	-1296(%ebp), %eax
	movl	%eax, -456(%ebp)
	movl	-460(%ebp), %eax
	movl	(%eax), %edx
	movl	-456(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -452(%ebp)
	movl	-452(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	-452(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-456(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-448(%ebp), %edx
	movl	-460(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1719
	movl	$_UI00000000, %eax
	movl	$11716, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1719:
	movl	-480(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1440(%ebp)
	movl	-1440(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1440(%ebp)
	movl	-1440(%ebp), %ecx
	movl	%ecx, -444(%ebp)
	movl	-1284(%ebp), %eax
	movl	%eax, -440(%ebp)
	movl	$0, -436(%ebp)
.L1721:
	movl	-436(%ebp), %eax
	cmpl	-440(%ebp), %eax
	je	.L1720
	movl	-436(%ebp), %edx
	movl	-444(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -436(%ebp)
	jmp	.L1721
.L1720:
	movl	-444(%ebp), %ecx
	movl	-448(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-480(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-1420(%ebp), %esp
	jmp	.L1715
.L1716:
	leal	-992(%ebp), %eax
	movl	%eax, -428(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	-416(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1722
	movl	-416(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -424(%ebp)
	jmp	.L1723
.L1722:
	movl	-416(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -424(%ebp)
.L1723:
	movl	-428(%ebp), %eax
	movl	(%eax), %eax
	subl	-424(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	-412(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-420(%ebp), %eax
	movl	%eax, -432(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -404(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1724
	movl	-392(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -400(%ebp)
	jmp	.L1725
.L1724:
	movl	-392(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -400(%ebp)
.L1725:
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	subl	-400(%ebp), %eax
	movl	%eax, -388(%ebp)
	movl	-388(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-396(%ebp), %eax
	movl	%eax, -408(%ebp)
	movl	-432(%ebp), %ebx
	movl	-408(%ebp), %edx
	movl	-936(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-936(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	call	__ghdl_stack2_mark
	movl	%eax, -384(%ebp)
	movl	-980(%ebp), %eax
	movl	%eax, -940(%ebp)
	movl	-936(%ebp), %eax
	movl	%eax, -1328(%ebp)
	leal	-992(%ebp), %eax
	movl	%eax, -1324(%ebp)
	movl	-1012(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1328(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1320(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	leal	-1320(%ebp), %eax
	movl	%eax, -380(%ebp)
.L1729:
	movl	-380(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1012(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1726
	movl	-380(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-916(%ebp), %ecx
	movl	-920(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-384(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-1024(%ebp), %eax
	movl	%eax, -372(%ebp)
	leal	-1024(%ebp), %eax
	movl	%eax, -360(%ebp)
	movl	-360(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1727
	jmp	.L1778
.L1726:
	movl	$_UI00000000, %eax
	movl	$11720, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1729
.L1727:
	movl	-360(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -368(%ebp)
	jmp	.L1730
.L1778:
	movl	-360(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -368(%ebp)
.L1730:
	movl	-372(%ebp), %eax
	movl	(%eax), %eax
	subl	-368(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %eax
	movl	%eax, -364(%ebp)
	movl	-364(%ebp), %eax
	movl	%eax, -376(%ebp)
	leal	-1024(%ebp), %eax
	movl	%eax, -348(%ebp)
	leal	-1024(%ebp), %eax
	movl	%eax, -336(%ebp)
	movl	-336(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1731
	movl	-336(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -344(%ebp)
	jmp	.L1732
.L1731:
	movl	-336(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -344(%ebp)
.L1732:
	movl	-348(%ebp), %eax
	movl	(%eax), %eax
	subl	-344(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-332(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	-340(%ebp), %eax
	movl	%eax, -352(%ebp)
	movl	-376(%ebp), %ebx
	movl	-352(%ebp), %edx
	movl	-916(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-916(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	leal	-1312(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-328(%ebp), %eax
	movl	%edx, (%eax)
	movl	-328(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-328(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-328(%ebp), %eax
	movl	(%eax), %edx
	movl	-328(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -320(%ebp)
	cmpl	$0, -320(%ebp)
	jns	.L1733
	movl	$0, -324(%ebp)
	jmp	.L1734
.L1733:
	movl	-320(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -324(%ebp)
.L1734:
	movl	-328(%ebp), %edx
	movl	-324(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1300(%ebp), %eax
	movl	%eax, -476(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -316(%ebp)
	leal	-1312(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	-316(%ebp), %eax
	movl	(%eax), %edx
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -308(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-308(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-312(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-304(%ebp), %edx
	movl	-316(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1735
	movl	$_UI00000000, %eax
	movl	$11723, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1735:
	leal	-1336(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	-916(%ebp), %eax
	movl	%eax, -292(%ebp)
	movl	-292(%ebp), %eax
	movl	%eax, -1336(%ebp)
	leal	-1352(%ebp), %eax
	movl	%eax, -1332(%ebp)
	movl	-296(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -288(%ebp)
	leal	-1024(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-284(%ebp), %eax
	movl	(%eax), %edx
	movl	-288(%ebp), %eax
	movl	%edx, (%eax)
	movl	-284(%ebp), %eax
	movl	4(%eax), %edx
	movl	-288(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-284(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-288(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-284(%ebp), %eax
	movl	12(%eax), %edx
	movl	-288(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1336(%ebp), %eax
	movl	%eax, -300(%ebp)
.L1737:
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1300(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1736
	movl	-300(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-304(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-476(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1715
.L1736:
	movl	$_UI00000000, %eax
	movl	$11723, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1737
.L1715:
	leal	-976(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-268(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	-268(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-276(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -272(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1738
	movl	$_UI00000000, %eax
	movl	$11725, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1738:
	movl	-272(%ebp), %eax
	movl	%eax, -280(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
	movl	-956(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-260(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -244(%ebp)
	movl	-260(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1739
	movl	-244(%ebp), %eax
	movl	-248(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -252(%ebp)
	jmp	.L1740
.L1739:
	movl	-248(%ebp), %eax
	movl	-244(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -252(%ebp)
.L1740:
	movl	-252(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-252(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-260(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -256(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1741
	movl	$_UI00000000, %eax
	movl	$11725, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1741:
	movl	-256(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-280(%ebp), %ecx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-264(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movl	-948(%ebp), %eax
	movb	%dl, (%eax,%ecx)
	jmp	.L1742
.L1700:
	leal	-1072(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-240(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	-240(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-240(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-240(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -232(%ebp)
	cmpl	$0, -232(%ebp)
	jns	.L1743
	movl	$0, -236(%ebp)
	jmp	.L1744
.L1743:
	movl	-232(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -236(%ebp)
.L1744:
	movl	-240(%ebp), %edx
	movl	-236(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1060(%ebp), %eax
	movl	%eax, -776(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -228(%ebp)
	leal	-1072(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-228(%ebp), %eax
	movl	(%eax), %edx
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	-220(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-224(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-216(%ebp), %edx
	movl	-228(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1745
	movl	$_UI00000000, %eax
	movl	$11727, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1745:
	leal	-1368(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %edx
	movl	-956(%ebp), %eax
	movl	%eax, (%edx)
	movl	-208(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-208(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-208(%ebp), %eax
	movl	(%eax), %edx
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -200(%ebp)
	cmpl	$0, -200(%ebp)
	jns	.L1746
	movl	$0, -204(%ebp)
	jmp	.L1747
.L1746:
	movl	-200(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -204(%ebp)
.L1747:
	movl	-208(%ebp), %edx
	movl	-204(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1356(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -196(%ebp)
	leal	-1368(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-196(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-192(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L1748
	movl	$_UI00000000, %eax
	movl	$11727, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1748:
	movl	-196(%ebp), %eax
	movl	(%eax), %edx
	movl	-192(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-188(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-192(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-184(%ebp), %edx
	movl	-196(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1749
	movl	$_UI00000000, %eax
	movl	$11727, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1749:
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-184(%ebp), %eax
	movl	%eax, -180(%ebp)
.L1751:
	movl	-1356(%ebp), %edx
	movl	-1060(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1750
	movl	-180(%ebp), %ecx
	movl	-216(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-776(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1742
.L1750:
	movl	$_UI00000000, %eax
	movl	$11727, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1751
.L1742:
	movl	20(%ebp), %eax
	cmpl	-960(%ebp), %eax
	jle	.L1752
	leal	-1088(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %eax
	movl	$-1, (%eax)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-176(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-176(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-176(%ebp), %eax
	movl	(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -168(%ebp)
	cmpl	$0, -168(%ebp)
	jns	.L1753
	movl	$0, -172(%ebp)
	jmp	.L1754
.L1753:
	movl	-168(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -172(%ebp)
.L1754:
	movl	-176(%ebp), %edx
	movl	-172(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1076(%ebp), %eax
	movl	%eax, -772(%ebp)
	movl	%esp, %eax
	movl	%eax, -1416(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-1088(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-164(%ebp), %eax
	movl	(%eax), %edx
	movl	-160(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-156(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-152(%ebp), %edx
	movl	-164(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1755
	movl	$_UI00000000, %eax
	movl	$11730, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1755:
	movl	-772(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -1436(%ebp)
	movl	-1436(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1436(%ebp)
	movl	-1436(%ebp), %ecx
	movl	%ecx, -148(%ebp)
	movl	-1076(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	$0, -140(%ebp)
.L1757:
	movl	-140(%ebp), %eax
	cmpl	-144(%ebp), %eax
	je	.L1756
	movl	-140(%ebp), %edx
	movl	-148(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -140(%ebp)
	jmp	.L1757
.L1756:
	movl	-148(%ebp), %ecx
	movl	-152(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-772(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-1416(%ebp), %esp
	leal	-1104(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	movl	$-1, (%eax)
	movl	-960(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-136(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-136(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-136(%ebp), %eax
	movl	(%eax), %edx
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -128(%ebp)
	cmpl	$0, -128(%ebp)
	jns	.L1758
	movl	$0, -132(%ebp)
	jmp	.L1759
.L1758:
	movl	-128(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -132(%ebp)
.L1759:
	movl	-136(%ebp), %edx
	movl	-132(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1092(%ebp), %eax
	movl	%eax, -768(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -124(%ebp)
	leal	-1104(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-124(%ebp), %eax
	movl	(%eax), %edx
	movl	-120(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-116(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-120(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-112(%ebp), %edx
	movl	-124(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1760
	movl	$_UI00000000, %eax
	movl	$11731, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1760:
	leal	-1384(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	movl	$-1, (%eax)
	movl	-960(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-104(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-104(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	jns	.L1761
	movl	$0, -100(%ebp)
	jmp	.L1762
.L1761:
	movl	-96(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -100(%ebp)
.L1762:
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1372(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	leal	-1384(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-88(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L1763
	movl	$_UI00000000, %eax
	movl	$11732, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1763:
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-84(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-80(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1764
	movl	$_UI00000000, %eax
	movl	$11732, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1764:
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
.L1766:
	movl	-1372(%ebp), %edx
	movl	-1092(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1765
	movl	-76(%ebp), %ecx
	movl	-112(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-768(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1699
.L1765:
	movl	$_UI00000000, %eax
	movl	$11732, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1766
.L1752:
	leal	-1120(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	$-1, (%eax)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-72(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-72(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	cmpl	$0, -64(%ebp)
	jns	.L1767
	movl	$0, -68(%ebp)
	jmp	.L1768
.L1767:
	movl	-64(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -68(%ebp)
.L1768:
	movl	-72(%ebp), %edx
	movl	-68(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1108(%ebp), %eax
	movl	%eax, -764(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-1120(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-52(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-48(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1769
	movl	$_UI00000000, %eax
	movl	$11734, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1769:
	leal	-1400(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	$-1, (%eax)
	movl	-960(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-40(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-40(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	jns	.L1770
	movl	$0, -36(%ebp)
	jmp	.L1771
.L1770:
	movl	-32(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -36(%ebp)
.L1771:
	movl	-40(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1388(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	leal	-1400(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L1772
	movl	$_UI00000000, %eax
	movl	$11735, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1772:
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-16(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1773
	movl	$_UI00000000, %eax
	movl	$11735, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1773:
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-16(%ebp), %eax
	movl	%eax, -12(%ebp)
.L1775:
	movl	-1388(%ebp), %edx
	movl	-1108(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1774
	movl	-12(%ebp), %ecx
	movl	-48(%ebp), %edx
	movl	-948(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-764(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1699
.L1774:
	movl	$_UI00000000, %eax
	movl	$11735, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1775
.L1699:
	movl	-964(%ebp), %eax
	movl	%eax, -952(%ebp)
	movl	-948(%ebp), %eax
	movl	%eax, -1408(%ebp)
	leal	-976(%ebp), %eax
	movl	%eax, -1404(%ebp)
	leal	-1408(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__resizeO1, .-ahir_ieee_proposed__float_pkg__resizeO1
.globl ahir_ieee_proposed__float_pkg__resizeO2
	.type	ahir_ieee_proposed__float_pkg__resizeO2, @function
ahir_ieee_proposed__float_pkg__resizeO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L1780
	movl	$0, -48(%ebp)
	jmp	.L1781
.L1780:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L1781:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	32(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L1783:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L1782
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L1783
.L1782:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L1784
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1792
.L1784:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1786
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L1787
.L1786:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L1787:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L1788
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L1789
.L1788:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L1789:
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movzbl	32(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	28(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 20(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L1791:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1790
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1792
.L1790:
	movl	$_UI00000000, %eax
	movl	$11754, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1791
.L1792:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__resizeO2, .-ahir_ieee_proposed__float_pkg__resizeO2
.globl ahir_ieee_proposed__float_pkg__to_float32
	.type	ahir_ieee_proposed__float_pkg__to_float32, @function
ahir_ieee_proposed__float_pkg__to_float32:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 20(%esp)
	movzbl	16(%ebp), %eax
	movb	%al, 16(%esp)
	movl	$23, 12(%esp)
	movl	$8, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
.L1795:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$32, %eax
	jne	.L1794
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	8(%ebp), %edx
	movl	$32, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leave
	ret
.L1794:
	movl	$_UI00000000, %eax
	movl	$11773, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1795
	.size	ahir_ieee_proposed__float_pkg__to_float32, .-ahir_ieee_proposed__float_pkg__to_float32
.globl ahir_ieee_proposed__float_pkg__to_float64
	.type	ahir_ieee_proposed__float_pkg__to_float64, @function
ahir_ieee_proposed__float_pkg__to_float64:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 20(%esp)
	movzbl	16(%ebp), %eax
	movb	%al, 16(%esp)
	movl	$52, 12(%esp)
	movl	$11, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
.L1799:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$64, %eax
	jne	.L1798
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	8(%ebp), %edx
	movl	$64, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leave
	ret
.L1798:
	movl	$_UI00000000, %eax
	movl	$11790, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1799
	.size	ahir_ieee_proposed__float_pkg__to_float64, .-ahir_ieee_proposed__float_pkg__to_float64
.globl ahir_ieee_proposed__float_pkg__to_float128
	.type	ahir_ieee_proposed__float_pkg__to_float128, @function
ahir_ieee_proposed__float_pkg__to_float128:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 28(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 20(%esp)
	movzbl	16(%ebp), %eax
	movb	%al, 16(%esp)
	movl	$112, 12(%esp)
	movl	$15, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__resizeO1
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
.L1803:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$128, %eax
	jne	.L1802
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	8(%ebp), %edx
	movl	$128, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leave
	ret
.L1802:
	movl	$_UI00000000, %eax
	movl	$11807, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1803
	.size	ahir_ieee_proposed__float_pkg__to_float128, .-ahir_ieee_proposed__float_pkg__to_float128
.globl ahir_ieee_proposed__float_pkg__to_floatO3
	.type	ahir_ieee_proposed__float_pkg__to_floatO3, @function
ahir_ieee_proposed__float_pkg__to_floatO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$964, %esp
	movl	12(%ebp), %eax
	movl	%eax, -880(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -876(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -508(%ebp)
	movl	-508(%ebp), %edx
	movl	20(%ebp), %eax
	movl	%eax, (%edx)
	movl	24(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-508(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-508(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-508(%ebp), %eax
	movl	(%eax), %edx
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -500(%ebp)
	cmpl	$0, -500(%ebp)
	jns	.L1806
	movl	$0, -504(%ebp)
	jmp	.L1807
.L1806:
	movl	-500(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -504(%ebp)
.L1807:
	movl	-508(%ebp), %edx
	movl	-504(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-596(%ebp), %eax
	movl	%eax, -592(%ebp)
	movl	-592(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -928(%ebp)
	movl	-928(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -928(%ebp)
	movl	-928(%ebp), %edx
	movl	%edx, -588(%ebp)
	movl	-596(%ebp), %eax
	movl	%eax, -496(%ebp)
	movl	$0, -492(%ebp)
.L1809:
	movl	-492(%ebp), %eax
	cmpl	-496(%ebp), %eax
	je	.L1808
	movl	-492(%ebp), %edx
	movl	-588(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -492(%ebp)
	jmp	.L1809
.L1808:
	fldl	.LC0
	fstpl	-584(%ebp)
	movb	$0, -573(%ebp)
	movl	$-2147483648, -572(%ebp)
	leal	-624(%ebp), %eax
	movl	%eax, -488(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-488(%ebp), %eax
	movl	%edx, (%eax)
	movl	-488(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-488(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-488(%ebp), %eax
	movl	(%eax), %edx
	movl	-488(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -480(%ebp)
	cmpl	$0, -480(%ebp)
	jns	.L1810
	movl	$0, -484(%ebp)
	jmp	.L1811
.L1810:
	movl	-480(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -484(%ebp)
.L1811:
	movl	-488(%ebp), %edx
	movl	-484(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-612(%ebp), %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -924(%ebp)
	movl	-924(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -924(%ebp)
	movl	-924(%ebp), %edx
	movl	%edx, -564(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -476(%ebp)
	movl	$0, -472(%ebp)
.L1813:
	movl	-472(%ebp), %eax
	cmpl	-476(%ebp), %eax
	je	.L1812
	movl	-472(%ebp), %edx
	movl	-564(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -472(%ebp)
	jmp	.L1813
.L1812:
	leal	-640(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-468(%ebp), %eax
	movl	%edx, (%eax)
	movl	-468(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-468(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-468(%ebp), %eax
	movl	(%eax), %edx
	movl	-468(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -460(%ebp)
	cmpl	$0, -460(%ebp)
	jns	.L1814
	movl	$0, -464(%ebp)
	jmp	.L1815
.L1814:
	movl	-460(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -464(%ebp)
.L1815:
	movl	-468(%ebp), %edx
	movl	-464(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-628(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -920(%ebp)
	movl	-920(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -920(%ebp)
	movl	-920(%ebp), %edx
	movl	%edx, -556(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -456(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-712(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-712(%ebp), %eax
	movl	%eax, -452(%ebp)
.L1819:
	movl	-452(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-628(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1816
	movl	-452(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-556(%ebp), %ecx
	movl	-560(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-456(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-656(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	24(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-448(%ebp), %eax
	movl	%edx, (%eax)
	movl	-448(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-448(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-448(%ebp), %eax
	movl	(%eax), %edx
	movl	-448(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -440(%ebp)
	cmpl	$0, -440(%ebp)
	js	.L1817
	jmp	.L1897
.L1816:
	movl	$_UI00000000, %eax
	movl	$11832, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1819
.L1817:
	movl	$0, -444(%ebp)
	jmp	.L1820
.L1897:
	movl	-440(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -444(%ebp)
.L1820:
	movl	-448(%ebp), %edx
	movl	-444(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-644(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-552(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -916(%ebp)
	movl	-916(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -916(%ebp)
	movl	-916(%ebp), %edx
	movl	%edx, -548(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -436(%ebp)
	movl	$0, -432(%ebp)
.L1822:
	movl	-432(%ebp), %eax
	cmpl	-436(%ebp), %eax
	je	.L1821
	movl	-432(%ebp), %edx
	movl	-548(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -432(%ebp)
	jmp	.L1822
.L1821:
	fldl	.LC0
	fstpl	-544(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -424(%ebp)
	movl	-424(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1823
	movl	-424(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -428(%ebp)
	jmp	.L1824
.L1823:
	movl	-424(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -428(%ebp)
.L1824:
	movl	$-2, %eax
	subl	-428(%ebp), %eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fstpl	-536(%ebp)
	movb	$0, -521(%ebp)
	movl	%esp, %eax
	movl	%eax, -896(%ebp)
	movl	-592(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %ecx
	movl	%ecx, -912(%ebp)
	movl	-912(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -912(%ebp)
	movl	-912(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	-596(%ebp), %eax
	movl	%eax, -416(%ebp)
	movl	$0, -412(%ebp)
.L1826:
	movl	-412(%ebp), %eax
	cmpl	-416(%ebp), %eax
	je	.L1825
	movl	-412(%ebp), %edx
	movl	-420(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -412(%ebp)
	jmp	.L1826
.L1825:
	movl	-420(%ebp), %edx
	movl	-588(%ebp), %ecx
	movl	-592(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-896(%ebp), %esp
	fldl	-880(%ebp)
	fstpl	-584(%ebp)
	fldl	-584(%ebp)
	fldz
	fucompp
	fnstsw	%ax
	sahf
	jbe	.L1898
.L1895:
	leal	-608(%ebp), %eax
	movl	%eax, -404(%ebp)
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	subl	20(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-396(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	-396(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-404(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -400(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1829
	movl	$_UI00000000, %eax
	movl	$11841, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1829:
	movl	-400(%ebp), %eax
	movl	%eax, -408(%ebp)
	movl	-408(%ebp), %edx
	movl	-588(%ebp), %eax
	movb	$3, (%eax,%edx)
	fldl	-584(%ebp)
	fchs
	fstpl	-584(%ebp)
	jmp	.L1830
.L1898:
	leal	-608(%ebp), %eax
	movl	%eax, -388(%ebp)
	movl	-388(%ebp), %eax
	movl	(%eax), %eax
	subl	20(%ebp), %eax
	movl	%eax, -380(%ebp)
	movl	-380(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-380(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-388(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -384(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1831
	movl	$_UI00000000, %eax
	movl	$11844, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1831:
	movl	-384(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	-392(%ebp), %edx
	movl	-588(%ebp), %eax
	movb	$2, (%eax,%edx)
.L1830:
	movzbl	32(%ebp), %eax
	movb	%al, 20(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 16(%esp)
	movl	24(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-584(%ebp)
	fstpl	4(%esp)
	leal	-720(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__test_boundary
	movzbl	-720(%ebp), %eax
	movb	%al, -573(%ebp)
	movl	-716(%ebp), %eax
	movl	%eax, -572(%ebp)
	cmpb	$2, -573(%ebp)
	jne	.L1832
	movl	-596(%ebp), %eax
	movl	%eax, -592(%ebp)
	movl	-588(%ebp), %eax
	movl	%eax, -728(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -724(%ebp)
	leal	-728(%ebp), %eax
	movl	%eax, -376(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-376(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-376(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1894
.L1832:
	cmpb	$1, -573(%ebp)
	jne	.L1834
	leal	-672(%ebp), %eax
	movl	%eax, -372(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-372(%ebp), %eax
	movl	%edx, (%eax)
	movl	-372(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-372(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-372(%ebp), %eax
	movl	(%eax), %edx
	movl	-372(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -364(%ebp)
	cmpl	$0, -364(%ebp)
	jns	.L1835
	movl	$0, -368(%ebp)
	jmp	.L1836
.L1835:
	movl	-364(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -368(%ebp)
.L1836:
	movl	-372(%ebp), %edx
	movl	-368(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-660(%ebp), %eax
	movl	%eax, -520(%ebp)
	movl	%esp, %eax
	movl	%eax, -892(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -360(%ebp)
	leal	-672(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-360(%ebp), %eax
	movl	(%eax), %edx
	movl	-356(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -352(%ebp)
	movl	-352(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-352(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-356(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-348(%ebp), %edx
	movl	-360(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1837
	movl	$_UI00000000, %eax
	movl	$11855, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1837:
	movl	-520(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -908(%ebp)
	movl	-908(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -908(%ebp)
	movl	-908(%ebp), %edx
	movl	%edx, -344(%ebp)
	movl	-660(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	$0, -336(%ebp)
.L1839:
	movl	-336(%ebp), %eax
	cmpl	-340(%ebp), %eax
	je	.L1838
	movl	-336(%ebp), %edx
	movl	-344(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -336(%ebp)
	jmp	.L1839
.L1838:
	movl	-344(%ebp), %ecx
	movl	-348(%ebp), %edx
	movl	-588(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-520(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-892(%ebp), %esp
	movl	-596(%ebp), %eax
	movl	%eax, -592(%ebp)
	movl	-588(%ebp), %eax
	movl	%eax, -736(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -732(%ebp)
	leal	-736(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-332(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-332(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1894
.L1834:
	cmpb	$3, -573(%ebp)
	jne	.L1840
	movl	%esp, %eax
	movl	%eax, -888(%ebp)
	movl	-568(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %ecx
	movl	%ecx, -904(%ebp)
	movl	-904(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -904(%ebp)
	movl	-904(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	$0, -320(%ebp)
.L1842:
	movl	-320(%ebp), %eax
	cmpl	-324(%ebp), %eax
	je	.L1841
	movl	-320(%ebp), %edx
	movl	-328(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -320(%ebp)
	jmp	.L1842
.L1841:
	movl	-328(%ebp), %edx
	movl	-564(%ebp), %ecx
	movl	-568(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-888(%ebp), %esp
	movl	-628(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-556(%ebp), %eax
	movl	%eax, -744(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -740(%ebp)
	leal	-744(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	subl	$1, %eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fldl	-584(%ebp)
	fmulp	%st, %st(1)
	fstpl	-544(%ebp)
	jmp	.L1843
.L1840:
	call	__ghdl_stack2_mark
	movl	%eax, -316(%ebp)
	movl	-572(%ebp), %eax
	leal	-1(%eax), %edx
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	leal	-752(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_signed
	leal	-760(%ebp), %eax
	movl	%eax, -308(%ebp)
	leal	-752(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -760(%ebp)
	leal	-776(%ebp), %eax
	movl	%eax, -756(%ebp)
	movl	-308(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -300(%ebp)
	movl	-304(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -296(%ebp)
	movl	-296(%ebp), %eax
	movl	(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, (%eax)
	movl	-296(%ebp), %eax
	movl	4(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-296(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-300(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-296(%ebp), %eax
	movl	12(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-760(%ebp), %eax
	movl	%eax, -312(%ebp)
.L1847:
	movl	-312(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-612(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1844
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-564(%ebp), %ecx
	movl	-568(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-316(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-624(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %edx
	movl	20(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -280(%ebp)
	movl	-280(%ebp), %eax
	movl	%eax, -284(%ebp)
	movl	-280(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -284(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L1845
	jmp	.L1846
.L1844:
	movl	$_UI00000000, %eax
	movl	$11863, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1847
.L1845:
	movl	$_UI00000000, %eax
	movl	$11864, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1846:
	movl	-284(%ebp), %eax
	movl	%eax, -292(%ebp)
	leal	-624(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	-272(%ebp), %eax
	movl	(%eax), %edx
	movl	20(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-264(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-272(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -268(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1848
	movl	$_UI00000000, %eax
	movl	$11864, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1848:
	movl	-268(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-292(%ebp), %ebx
	movl	-276(%ebp), %edx
	movl	-564(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-564(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-572(%ebp), %eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fldl	-584(%ebp)
	fdivp	%st, %st(1)
	fld1
	fsubrp	%st, %st(1)
	fstpl	-544(%ebp)
.L1843:
	movl	$0, -260(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1849
	movl	-248(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -252(%ebp)
	jmp	.L1850
.L1849:
	movl	-248(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -252(%ebp)
.L1850:
	movl	-252(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-260(%ebp), %eax
	cmpl	-256(%ebp), %eax
	jg	.L1851
.L1861:
	movl	-260(%ebp), %eax
	notl	%eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fldl	-544(%ebp)
	fucompp
	fnstsw	%ax
	sahf
	jb	.L1899
.L1896:
	leal	-656(%ebp), %eax
	movl	%eax, -240(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1854
	movl	-228(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -236(%ebp)
	jmp	.L1855
.L1854:
	movl	-228(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -236(%ebp)
.L1855:
	movl	-240(%ebp), %eax
	movl	(%eax), %ecx
	movl	-260(%ebp), %edx
	movl	-236(%ebp), %eax
	subl	%edx, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-224(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-240(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -232(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1856
	movl	$_UI00000000, %eax
	movl	$11869, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1856:
	movl	-232(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-244(%ebp), %edx
	movl	-548(%ebp), %eax
	movb	$3, (%eax,%edx)
	movl	-260(%ebp), %eax
	notl	%eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fldl	-544(%ebp)
	fsubp	%st, %st(1)
	fstpl	-544(%ebp)
	jmp	.L1857
.L1899:
	leal	-656(%ebp), %eax
	movl	%eax, -216(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1858
	movl	-204(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
	jmp	.L1859
.L1858:
	movl	-204(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -212(%ebp)
.L1859:
	movl	-216(%ebp), %eax
	movl	(%eax), %ecx
	movl	-260(%ebp), %edx
	movl	-212(%ebp), %eax
	subl	%edx, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-200(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-216(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -208(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1860
	movl	$_UI00000000, %eax
	movl	$11872, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1860:
	movl	-208(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %edx
	movl	-548(%ebp), %eax
	movb	$2, (%eax,%edx)
.L1857:
	movl	-260(%ebp), %eax
	cmpl	-256(%ebp), %eax
	je	.L1851
	addl	$1, -260(%ebp)
	jmp	.L1861
.L1851:
	movb	$0, -521(%ebp)
	movzbl	28(%ebp), %ecx
	movb	%cl, -933(%ebp)
	cmpb	$1, -933(%ebp)
	je	.L1864
	cmpb	$1, -933(%ebp)
	jb	.L1863
	cmpb	$2, -933(%ebp)
	je	.L1865
	jmp	.L1862
.L1863:
	fldl	-544(%ebp)
	fldl	-536(%ebp)
	fxch	%st(1)
	fucompp
	fnstsw	%ax
	sahf
	seta	%al
	movb	%al, -194(%ebp)
	cmpb	$0, -194(%ebp)
	jne	.L1866
	fldl	-544(%ebp)
	fldl	-536(%ebp)
	fucompp
	fnstsw	%ax
	sahf
	sete	%al
	setnp	%dl
	andl	%edx, %eax
	movb	%al, -193(%ebp)
	cmpb	$1, -193(%ebp)
	jne	.L1867
	leal	-656(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-180(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-188(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -184(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1868
	movl	$_UI00000000, %eax
	movl	$11878, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1868:
	movl	-184(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %edx
	movl	-548(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	sete	%al
	movb	%al, -193(%ebp)
.L1867:
	movzbl	-193(%ebp), %eax
	movb	%al, -194(%ebp)
.L1866:
	cmpb	$0, -194(%ebp)
	je	.L1862
	movb	$1, -521(%ebp)
	jmp	.L1862
.L1864:
	fldl	-544(%ebp)
	fldz
	fucompp
	fnstsw	%ax
	sahf
	setne	%al
	setp	%dl
	orl	%edx, %eax
	movb	%al, -173(%ebp)
	cmpb	$1, -173(%ebp)
	jne	.L1870
	leal	-608(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movl	(%eax), %eax
	subl	20(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-160(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-160(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-168(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -164(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1871
	movl	$_UI00000000, %eax
	movl	$11882, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1871:
	movl	-164(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %edx
	movl	-588(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	sete	%al
	movb	%al, -173(%ebp)
.L1870:
	cmpb	$0, -173(%ebp)
	je	.L1862
	movb	$1, -521(%ebp)
	jmp	.L1862
.L1865:
	fldl	-544(%ebp)
	fldz
	fucompp
	fnstsw	%ax
	sahf
	setne	%al
	setp	%dl
	orl	%edx, %eax
	movb	%al, -153(%ebp)
	cmpb	$1, -153(%ebp)
	jne	.L1873
	leal	-608(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	(%eax), %eax
	subl	20(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-140(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-148(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -144(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1874
	movl	$_UI00000000, %eax
	movl	$11886, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1874:
	movl	-144(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %edx
	movl	-588(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	sete	%al
	movb	%al, -153(%ebp)
.L1873:
	cmpb	$0, -153(%ebp)
	je	.L1862
	movb	$1, -521(%ebp)
.L1862:
	cmpb	$0, -521(%ebp)
	je	.L1875
	movl	-644(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-548(%ebp), %eax
	movl	%eax, -784(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -780(%ebp)
	leal	-784(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO2
	cmpb	$3, %al
	jne	.L1876
	call	__ghdl_stack2_mark
	movl	%eax, -136(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -568(%ebp)
	movl	-564(%ebp), %eax
	movl	%eax, -800(%ebp)
	leal	-624(%ebp), %eax
	movl	%eax, -796(%ebp)
	movl	$1, 8(%esp)
	leal	-800(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-792(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO3
	leal	-792(%ebp), %eax
	movl	%eax, -132(%ebp)
.L1879:
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-612(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1877
	movl	-132(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-564(%ebp), %ecx
	movl	-568(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	%esp, %eax
	movl	%eax, -884(%ebp)
	movl	-552(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %edx
	movl	%edx, -900(%ebp)
	movl	-900(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -900(%ebp)
	movl	-900(%ebp), %ecx
	movl	%ecx, -128(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	$0, -120(%ebp)
	jmp	.L1878
.L1877:
	movl	$_UI00000000, %eax
	movl	$11894, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1879
.L1878:
	movl	-120(%ebp), %eax
	cmpl	-124(%ebp), %eax
	je	.L1880
	movl	-120(%ebp), %edx
	movl	-128(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -120(%ebp)
	jmp	.L1878
.L1880:
	movl	-128(%ebp), %eax
	movl	-548(%ebp), %ecx
	movl	-552(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-884(%ebp), %esp
	jmp	.L1875
.L1876:
	call	__ghdl_stack2_mark
	movl	%eax, -116(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-548(%ebp), %eax
	movl	%eax, -816(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	$1, 8(%esp)
	leal	-816(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-808(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO3
	leal	-808(%ebp), %eax
	movl	%eax, -112(%ebp)
.L1882:
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-644(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1881
	movl	-112(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-548(%ebp), %ecx
	movl	-552(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-116(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1875
.L1881:
	movl	$_UI00000000, %eax
	movl	$11897, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1882
.L1875:
	leal	-688(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-108(%ebp), %eax
	movl	%edx, (%eax)
	movl	-108(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-108(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-108(%ebp), %eax
	movl	(%eax), %edx
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -100(%ebp)
	cmpl	$0, -100(%ebp)
	jns	.L1883
	movl	$0, -104(%ebp)
	jmp	.L1884
.L1883:
	movl	-100(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -104(%ebp)
.L1884:
	movl	-108(%ebp), %edx
	movl	-104(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-676(%ebp), %eax
	movl	%eax, -516(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-688(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-88(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1885
	movl	$_UI00000000, %eax
	movl	$11900, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1885:
	leal	-824(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-564(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -824(%ebp)
	leal	-840(%ebp), %eax
	movl	%eax, -820(%ebp)
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	leal	-624(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, (%eax)
	movl	-64(%ebp), %eax
	movl	4(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-68(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-64(%ebp), %eax
	movl	12(%eax), %edx
	movl	-68(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-824(%ebp), %eax
	movl	%eax, -80(%ebp)
.L1889:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-676(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1886
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-84(%ebp), %edx
	movl	-588(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-516(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	leal	-704(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	$-1, (%eax)
	movl	24(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-60(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	cmpl	$0, -52(%ebp)
	js	.L1887
	jmp	.L1900
.L1886:
	movl	$_UI00000000, %eax
	movl	$11900, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1889
.L1887:
	movl	$0, -56(%ebp)
	jmp	.L1890
.L1900:
	movl	-52(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -56(%ebp)
.L1890:
	movl	-60(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-692(%ebp), %eax
	movl	%eax, -512(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -48(%ebp)
	leal	-704(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-40(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-36(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1891
	movl	$_UI00000000, %eax
	movl	$11901, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1891:
	leal	-848(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-548(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -848(%ebp)
	leal	-864(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, (%eax)
	movl	-16(%ebp), %eax
	movl	4(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-20(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-16(%ebp), %eax
	movl	12(%eax), %edx
	movl	-20(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-848(%ebp), %eax
	movl	%eax, -32(%ebp)
.L1893:
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-692(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1892
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-36(%ebp), %edx
	movl	-588(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-512(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-596(%ebp), %eax
	movl	%eax, -592(%ebp)
	movl	-588(%ebp), %eax
	movl	%eax, -872(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -868(%ebp)
	leal	-872(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L1894
.L1892:
	movl	$_UI00000000, %eax
	movl	$11901, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1893
.L1894:
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO3, .-ahir_ieee_proposed__float_pkg__to_floatO3
.globl ahir_ieee_proposed__float_pkg__to_floatO2
	.type	ahir_ieee_proposed__float_pkg__to_floatO2, @function
ahir_ieee_proposed__float_pkg__to_floatO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$884, %esp
	leal	-576(%ebp), %eax
	movl	%eax, -492(%ebp)
	movl	-492(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-492(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-492(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-492(%ebp), %eax
	movl	(%eax), %edx
	movl	-492(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -484(%ebp)
	cmpl	$0, -484(%ebp)
	jns	.L1902
	movl	$0, -488(%ebp)
	jmp	.L1903
.L1902:
	movl	-484(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -488(%ebp)
.L1903:
	movl	-492(%ebp), %edx
	movl	-488(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-564(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -860(%ebp)
	movl	-860(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -860(%ebp)
	movl	-860(%ebp), %ecx
	movl	%ecx, -556(%ebp)
	movl	-564(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	$0, -476(%ebp)
.L1905:
	movl	-476(%ebp), %eax
	cmpl	-480(%ebp), %eax
	je	.L1904
	movl	-476(%ebp), %edx
	movl	-556(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -476(%ebp)
	jmp	.L1905
.L1904:
	movl	$0, -552(%ebp)
	leal	-592(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-472(%ebp), %eax
	movl	%edx, (%eax)
	movl	-472(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-472(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-472(%ebp), %eax
	movl	(%eax), %edx
	movl	-472(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -464(%ebp)
	cmpl	$0, -464(%ebp)
	jns	.L1906
	movl	$0, -468(%ebp)
	jmp	.L1907
.L1906:
	movl	-464(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -468(%ebp)
.L1907:
	movl	-472(%ebp), %edx
	movl	-468(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-580(%ebp), %eax
	movl	%eax, -548(%ebp)
	movl	-548(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -856(%ebp)
	movl	-856(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -856(%ebp)
	movl	-856(%ebp), %ecx
	movl	%ecx, -544(%ebp)
	movl	-580(%ebp), %eax
	movl	%eax, -460(%ebp)
	movl	$0, -456(%ebp)
.L1909:
	movl	-456(%ebp), %eax
	cmpl	-460(%ebp), %eax
	je	.L1908
	movl	-456(%ebp), %edx
	movl	-544(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -456(%ebp)
	jmp	.L1909
.L1908:
	leal	-608(%ebp), %eax
	movl	%eax, -452(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-452(%ebp), %eax
	movl	%edx, (%eax)
	movl	-452(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-452(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-452(%ebp), %eax
	movl	(%eax), %edx
	movl	-452(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -444(%ebp)
	cmpl	$0, -444(%ebp)
	jns	.L1910
	movl	$0, -448(%ebp)
	jmp	.L1911
.L1910:
	movl	-444(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -448(%ebp)
.L1911:
	movl	-452(%ebp), %edx
	movl	-448(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-596(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-540(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -852(%ebp)
	movl	-852(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -852(%ebp)
	movl	-852(%ebp), %ecx
	movl	%ecx, -536(%ebp)
	movl	-596(%ebp), %eax
	movl	%eax, -440(%ebp)
	movl	$0, -436(%ebp)
.L1913:
	movl	-436(%ebp), %eax
	cmpl	-440(%ebp), %eax
	je	.L1912
	movl	-436(%ebp), %edx
	movl	-536(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -436(%ebp)
	jmp	.L1913
.L1912:
	leal	-624(%ebp), %eax
	movl	%eax, -432(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-432(%ebp), %eax
	movl	%edx, (%eax)
	movl	-432(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-432(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-432(%ebp), %eax
	movl	(%eax), %edx
	movl	-432(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -424(%ebp)
	cmpl	$0, -424(%ebp)
	jns	.L1914
	movl	$0, -428(%ebp)
	jmp	.L1915
.L1914:
	movl	-424(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -428(%ebp)
.L1915:
	movl	-432(%ebp), %edx
	movl	-428(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-612(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	-532(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -848(%ebp)
	movl	-848(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -848(%ebp)
	movl	-848(%ebp), %ecx
	movl	%ecx, -528(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -420(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-664(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-664(%ebp), %eax
	movl	%eax, -416(%ebp)
.L1919:
	movl	-416(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-612(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1916
	movl	-416(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-528(%ebp), %ecx
	movl	-532(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-420(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-640(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-412(%ebp), %eax
	movl	%edx, (%eax)
	movl	-412(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-412(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-412(%ebp), %eax
	movl	(%eax), %edx
	movl	-412(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -404(%ebp)
	cmpl	$0, -404(%ebp)
	js	.L1917
	jmp	.L1994
.L1916:
	movl	$_UI00000000, %eax
	movl	$11919, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1919
.L1917:
	movl	$0, -408(%ebp)
	jmp	.L1920
.L1994:
	movl	-404(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -408(%ebp)
.L1920:
	movl	-412(%ebp), %edx
	movl	-408(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-628(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	-524(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -844(%ebp)
	movl	-844(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -844(%ebp)
	movl	-844(%ebp), %ecx
	movl	%ecx, -520(%ebp)
	movl	-628(%ebp), %eax
	movl	%eax, -400(%ebp)
	movl	$0, -396(%ebp)
.L1922:
	movl	-396(%ebp), %eax
	cmpl	-400(%ebp), %eax
	je	.L1921
	movl	-396(%ebp), %edx
	movl	-520(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -396(%ebp)
	jmp	.L1922
.L1921:
	leal	-656(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-392(%ebp), %eax
	movl	%edx, (%eax)
	movl	-392(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-392(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-392(%ebp), %eax
	movl	(%eax), %edx
	movl	-392(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -384(%ebp)
	cmpl	$0, -384(%ebp)
	jns	.L1923
	movl	$0, -388(%ebp)
	jmp	.L1924
.L1923:
	movl	-384(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -388(%ebp)
.L1924:
	movl	-392(%ebp), %edx
	movl	-388(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-644(%ebp), %eax
	movl	%eax, -516(%ebp)
	movl	-516(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -840(%ebp)
	movl	-840(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -840(%ebp)
	movl	-840(%ebp), %ecx
	movl	%ecx, -512(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -380(%ebp)
	movl	$0, -376(%ebp)
.L1926:
	movl	-376(%ebp), %eax
	cmpl	-380(%ebp), %eax
	je	.L1925
	movl	-376(%ebp), %edx
	movl	-512(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -376(%ebp)
	jmp	.L1926
.L1925:
	movb	$0, -505(%ebp)
	movl	$0, -504(%ebp)
	movl	$0, -500(%ebp)
	movl	$0, -496(%ebp)
	cmpl	$0, 12(%ebp)
	jns	.L1927
	leal	-576(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	-368(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -360(%ebp)
	movl	-360(%ebp), %eax
	movl	%eax, -364(%ebp)
	movl	-360(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-368(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -364(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1928
	movl	$_UI00000000, %eax
	movl	$11928, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1928:
	movl	-364(%ebp), %eax
	movl	%eax, -372(%ebp)
	movl	-372(%ebp), %edx
	movl	-556(%ebp), %eax
	movb	$3, (%eax,%edx)
	movl	12(%ebp), %eax
	negl	%eax
	movl	%eax, -356(%ebp)
	cmpl	$0, -356(%ebp)
	jns	.L1929
	movl	$10, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1929:
	movl	-356(%ebp), %eax
	movl	%eax, -552(%ebp)
	jmp	.L1930
.L1927:
	leal	-576(%ebp), %eax
	movl	%eax, -348(%ebp)
	movl	-348(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	-340(%ebp), %eax
	movl	%eax, -344(%ebp)
	movl	-340(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-348(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -344(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1931
	movl	$_UI00000000, %eax
	movl	$11931, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1931:
	movl	-344(%ebp), %eax
	movl	%eax, -352(%ebp)
	movl	-352(%ebp), %edx
	movl	-556(%ebp), %eax
	movb	$2, (%eax,%edx)
	movl	12(%ebp), %eax
	movl	%eax, -336(%ebp)
	cmpl	$0, -336(%ebp)
	jns	.L1932
	movl	$11, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1932:
	movl	-336(%ebp), %eax
	movl	%eax, -552(%ebp)
.L1930:
	cmpl	$0, -552(%ebp)
	jne	.L1933
	call	__ghdl_stack2_mark
	movl	%eax, -332(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-672(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__zerofpO1
	leal	-672(%ebp), %eax
	movl	%eax, -328(%ebp)
.L1936:
	movl	-328(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-564(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1934
	movl	-328(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-556(%ebp), %ecx
	movl	-560(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-332(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1935
.L1934:
	movl	$_UI00000000, %eax
	movl	$11935, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1936
.L1933:
	movl	-552(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__log2O1
	movl	%eax, -504(%ebp)
	movl	-612(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	-528(%ebp), %eax
	movl	%eax, -680(%ebp)
	leal	-624(%ebp), %eax
	movl	%eax, -676(%ebp)
	leal	-680(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	cmpl	%eax, -504(%ebp)
	jle	.L1937
	leal	-576(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-304(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-312(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -308(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1938
	movl	$_UI00000000, %eax
	movl	$11943, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1938:
	movl	-308(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-316(%ebp), %edx
	movl	-556(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	jne	.L1939
	call	__ghdl_stack2_mark
	movl	%eax, -300(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-720(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-720(%ebp), %eax
	movl	%eax, -296(%ebp)
.L1942:
	movl	-296(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-564(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1940
	movl	-296(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-556(%ebp), %ecx
	movl	-560(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-300(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1935
.L1940:
	movl	$_UI00000000, %eax
	movl	$11944, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1942
.L1939:
	call	__ghdl_stack2_mark
	movl	%eax, -292(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-728(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_inffpO1
	leal	-728(%ebp), %eax
	movl	%eax, -288(%ebp)
.L1944:
	movl	-288(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-564(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1943
	movl	-288(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-556(%ebp), %ecx
	movl	-560(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-292(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L1935
.L1943:
	movl	$_UI00000000, %eax
	movl	$11948, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1944
.L1937:
	call	__ghdl_stack2_mark
	movl	%eax, -284(%ebp)
	movl	-580(%ebp), %eax
	movl	%eax, %edx
	movl	-504(%ebp), %eax
	subl	$1, %eax
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-736(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_signed
	leal	-736(%ebp), %eax
	movl	%eax, -280(%ebp)
.L1948:
	movl	-280(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-580(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1945
	movl	-280(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-544(%ebp), %ecx
	movl	-548(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-284(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	movl	%eax, %edx
	movl	-552(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -276(%ebp)
	cmpl	$0, -276(%ebp)
	js	.L1946
	jmp	.L1947
.L1945:
	movl	$_UI00000000, %eax
	movl	$11953, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1948
.L1946:
	movl	$12, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1947:
	movl	-276(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-504(%ebp), %eax
	movl	%eax, -500(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-256(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1949
	movl	-256(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -268(%ebp)
	jmp	.L1950
.L1949:
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -268(%ebp)
.L1950:
	movl	-268(%ebp), %eax
	movl	%eax, -272(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-252(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L1951
	movl	-252(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -260(%ebp)
	jmp	.L1952
.L1951:
	movl	-252(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
.L1952:
	movl	-504(%ebp), %edx
	movl	-260(%ebp), %eax
	subl	%edx, %eax
	addl	$1, %eax
	movl	$0, 4(%esp)
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO6
	movl	%eax, -264(%ebp)
	movl	-272(%ebp), %eax
	cmpl	-264(%ebp), %eax
	jl	.L1953
.L1960:
	movl	-500(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -248(%ebp)
	cmpl	$0, -248(%ebp)
	jns	.L1954
	movl	$13, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1954:
	movl	-248(%ebp), %eax
	movl	%eax, -500(%ebp)
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	cmpl	%eax, -552(%ebp)
	jl	.L1955
	movl	-500(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	movl	%eax, %edx
	movl	-552(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, -244(%ebp)
	cmpl	$0, -244(%ebp)
	jns	.L1956
	movl	$14, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1956:
	movl	-244(%ebp), %eax
	movl	%eax, -552(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movl	(%eax), %eax
	subl	-272(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-228(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-236(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -232(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1957
	movl	$_UI00000000, %eax
	movl	$11961, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1957:
	movl	-232(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-240(%ebp), %edx
	movl	-520(%ebp), %eax
	movb	$3, (%eax,%edx)
	jmp	.L1958
.L1955:
	leal	-640(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %eax
	movl	(%eax), %eax
	subl	-272(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	-212(%ebp), %eax
	movl	%eax, -216(%ebp)
	movl	-212(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-220(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -216(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1959
	movl	$_UI00000000, %eax
	movl	$11963, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1959:
	movl	-216(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %edx
	movl	-520(%ebp), %eax
	movb	$2, (%eax,%edx)
.L1958:
	movl	-272(%ebp), %eax
	cmpl	-264(%ebp), %eax
	je	.L1953
	subl	$1, -272(%ebp)
	jmp	.L1960
.L1953:
	movb	$0, -505(%ebp)
	cmpl	$0, -552(%ebp)
	jle	.L1961
	movl	-500(%ebp), %eax
	subl	$1, %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	movl	%eax, -208(%ebp)
	cmpl	$0, -208(%ebp)
	jns	.L1962
	movl	$15, (%esp)
	call	__ghdl_bound_check_failed_l0
.L1962:
	movl	-208(%ebp), %eax
	movl	%eax, -496(%ebp)
	movzbl	24(%ebp), %eax
	movb	%al, -861(%ebp)
	cmpb	$1, -861(%ebp)
	je	.L1964
	cmpb	$1, -861(%ebp)
	jb	.L1963
	cmpb	$2, -861(%ebp)
	je	.L1965
	jmp	.L1961
.L1963:
	movl	-552(%ebp), %eax
	cmpl	-496(%ebp), %eax
	setg	%al
	movb	%al, -202(%ebp)
	cmpb	$0, -202(%ebp)
	jne	.L1966
	movl	-552(%ebp), %eax
	cmpl	-496(%ebp), %eax
	sete	%al
	movb	%al, -201(%ebp)
	cmpb	$1, -201(%ebp)
	jne	.L1967
	leal	-640(%ebp), %eax
	movl	%eax, -196(%ebp)
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-188(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-196(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -192(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1968
	movl	$_UI00000000, %eax
	movl	$11973, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1968:
	movl	-192(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	-200(%ebp), %edx
	movl	-520(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	sete	%al
	movb	%al, -201(%ebp)
.L1967:
	movzbl	-201(%ebp), %eax
	movb	%al, -202(%ebp)
.L1966:
	cmpb	$0, -202(%ebp)
	je	.L1961
	movb	$1, -505(%ebp)
	jmp	.L1961
.L1964:
	cmpl	$0, -552(%ebp)
	setne	%al
	movb	%al, -181(%ebp)
	cmpb	$1, -181(%ebp)
	jne	.L1970
	leal	-576(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-168(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-176(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -172(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1971
	movl	$_UI00000000, %eax
	movl	$11977, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1971:
	movl	-172(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %edx
	movl	-556(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$2, %al
	sete	%al
	movb	%al, -181(%ebp)
.L1970:
	cmpb	$0, -181(%ebp)
	je	.L1961
	movb	$1, -505(%ebp)
	jmp	.L1961
.L1965:
	cmpl	$0, -552(%ebp)
	setne	%al
	movb	%al, -161(%ebp)
	cmpb	$1, -161(%ebp)
	jne	.L1973
	leal	-576(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-148(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-156(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -152(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1974
	movl	$_UI00000000, %eax
	movl	$11981, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1974:
	movl	-152(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-160(%ebp), %edx
	movl	-556(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	sete	%al
	movb	%al, -161(%ebp)
.L1973:
	cmpb	$0, -161(%ebp)
	je	.L1961
	movb	$1, -505(%ebp)
.L1961:
	cmpb	$0, -505(%ebp)
	je	.L1975
	movl	-628(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -744(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -740(%ebp)
	movl	-580(%ebp), %eax
	movl	%eax, -548(%ebp)
	movl	-544(%ebp), %eax
	movl	%eax, -752(%ebp)
	leal	-592(%ebp), %eax
	movl	%eax, -748(%ebp)
	movl	-644(%ebp), %eax
	movl	%eax, -516(%ebp)
	movl	-512(%ebp), %eax
	movl	%eax, -760(%ebp)
	leal	-656(%ebp), %eax
	movl	%eax, -756(%ebp)
	movl	-596(%ebp), %eax
	movl	%eax, -540(%ebp)
	movl	-536(%ebp), %eax
	movl	%eax, -768(%ebp)
	leal	-608(%ebp), %eax
	movl	%eax, -764(%ebp)
	leal	-768(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-760(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-752(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-744(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__fp_round
	movl	-512(%ebp), %eax
	movl	%eax, -144(%ebp)
.L1978:
	movl	-644(%ebp), %edx
	movl	-628(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1976
	movl	-144(%ebp), %edx
	movl	-520(%ebp), %ecx
	movl	-524(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-536(%ebp), %eax
	movl	%eax, -140(%ebp)
	jmp	.L1977
.L1976:
	movl	$_UI00000000, %eax
	movl	$11921, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1978
.L1977:
	movl	-596(%ebp), %edx
	movl	-580(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1979
	movl	-140(%ebp), %eax
	movl	-544(%ebp), %ecx
	movl	-548(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1975
.L1979:
	movl	$_UI00000000, %eax
	movl	$11916, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1977
.L1975:
	leal	-592(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-124(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-132(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -128(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1980
	movl	$_UI00000000, %eax
	movl	$11997, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1980:
	movl	-128(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-592(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-108(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-116(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -112(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L1981
	movl	$_UI00000000, %eax
	movl	$11997, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1981:
	movl	-112(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-136(%ebp), %ebx
	movl	-120(%ebp), %edx
	movl	-544(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-544(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	leal	-696(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-104(%ebp), %eax
	movl	%edx, (%eax)
	movl	-104(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	jns	.L1982
	movl	$0, -100(%ebp)
	jmp	.L1983
.L1982:
	movl	-96(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -100(%ebp)
.L1983:
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-684(%ebp), %eax
	movl	%eax, -324(%ebp)
	leal	-576(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-696(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-84(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-80(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1984
	movl	$_UI00000000, %eax
	movl	$11998, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1984:
	leal	-776(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-544(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -776(%ebp)
	leal	-792(%ebp), %eax
	movl	%eax, -772(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	leal	-592(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	4(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-64(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-60(%ebp), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-776(%ebp), %eax
	movl	%eax, -76(%ebp)
.L1988:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-684(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1985
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-80(%ebp), %edx
	movl	-556(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-324(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	leal	-712(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	$-1, (%eax)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-56(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-56(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-56(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	js	.L1986
	jmp	.L1995
.L1985:
	movl	$_UI00000000, %eax
	movl	$11998, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1988
.L1986:
	movl	$0, -52(%ebp)
	jmp	.L1989
.L1995:
	movl	-48(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -52(%ebp)
.L1989:
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-700(%ebp), %eax
	movl	%eax, -320(%ebp)
	leal	-576(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-712(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-32(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L1990
	movl	$_UI00000000, %eax
	movl	$11999, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L1990:
	leal	-800(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -800(%ebp)
	leal	-816(%ebp), %eax
	movl	%eax, -796(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	leal	-640(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, (%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-16(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-12(%ebp), %eax
	movl	12(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-800(%ebp), %eax
	movl	%eax, -28(%ebp)
.L1992:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-700(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L1991
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %edx
	movl	-556(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-320(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L1935
.L1991:
	movl	$_UI00000000, %eax
	movl	$11999, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L1992
.L1935:
	movl	-564(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	-556(%ebp), %eax
	movl	%eax, -824(%ebp)
	leal	-576(%ebp), %eax
	movl	%eax, -820(%ebp)
	leal	-824(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO2, .-ahir_ieee_proposed__float_pkg__to_floatO2
.globl ahir_ieee_proposed__float_pkg__to_floatO4
	.type	ahir_ieee_proposed__float_pkg__to_floatO4, @function
ahir_ieee_proposed__float_pkg__to_floatO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$328, %esp
	leal	-184(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-136(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-136(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-136(%ebp), %eax
	movl	(%eax), %edx
	movl	-136(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -128(%ebp)
	cmpl	$0, -128(%ebp)
	jns	.L1997
	movl	$0, -132(%ebp)
	jmp	.L1998
.L1997:
	movl	-128(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -132(%ebp)
.L1998:
	movl	-136(%ebp), %edx
	movl	-132(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-172(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -296(%ebp)
	movl	-296(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -296(%ebp)
	movl	-296(%ebp), %ecx
	movl	%ecx, -164(%ebp)
	movl	-172(%ebp), %eax
	movl	%eax, -124(%ebp)
	movl	$0, -120(%ebp)
.L2000:
	movl	-120(%ebp), %eax
	cmpl	-124(%ebp), %eax
	je	.L1999
	movl	-120(%ebp), %edx
	movl	-164(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -120(%ebp)
	jmp	.L2000
.L1999:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	subl	$1, %eax
	movl	%eax, -160(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %edx
	movl	-160(%ebp), %eax
	movl	%eax, (%edx)
	movl	-116(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-116(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-116(%ebp), %eax
	movl	(%eax), %edx
	movl	-116(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -108(%ebp)
	cmpl	$0, -108(%ebp)
	jns	.L2001
	movl	$0, -112(%ebp)
	jmp	.L2002
.L2001:
	movl	-108(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -112(%ebp)
.L2002:
	movl	-116(%ebp), %edx
	movl	-112(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-188(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -152(%ebp)
	movl	-188(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L2003
	movl	$_UI00000000, %eax
	movl	$12014, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2003:
	leal	-216(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-160(%ebp), %eax
	leal	1(%eax), %edx
	movl	-104(%ebp), %eax
	movl	%edx, (%eax)
	movl	-104(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	jns	.L2004
	movl	$0, -100(%ebp)
	jmp	.L2005
.L2004:
	movl	-96(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -100(%ebp)
.L2005:
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-204(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -292(%ebp)
	movl	-292(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -292(%ebp)
	movl	-292(%ebp), %ecx
	movl	%ecx, -144(%ebp)
	movl	-204(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	$0, -88(%ebp)
.L2007:
	movl	-88(%ebp), %eax
	cmpl	-92(%ebp), %eax
	je	.L2006
	movl	-88(%ebp), %edx
	movl	-144(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -88(%ebp)
	jmp	.L2007
.L2006:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2008
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -240(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -236(%ebp)
	leal	-240(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-84(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-84(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2021
.L2008:
	leal	-232(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-220(%ebp), %eax
	movl	%eax, -140(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -72(%ebp)
	leal	-232(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-72(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L2010
	movl	$_UI00000000, %eax
	movl	$12020, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2010:
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2011
	movl	-68(%ebp), %eax
	movl	(%eax), %edx
	movl	-72(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
	jmp	.L2012
.L2011:
	movl	-72(%ebp), %eax
	movl	(%eax), %edx
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -64(%ebp)
.L2012:
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-64(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-68(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-60(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2013
	movl	$_UI00000000, %eax
	movl	$12020, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2013:
	leal	-248(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-152(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -248(%ebp)
	leal	-264(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	leal	-200(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, (%eax)
	movl	-40(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-44(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-40(%ebp), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-248(%ebp), %eax
	movl	%eax, -56(%ebp)
.L2017:
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-220(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2014
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-60(%ebp), %edx
	movl	-144(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	leal	-216(%ebp), %eax
	movl	%eax, -32(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2015
	jmp	.L2022
.L2014:
	movl	$_UI00000000, %eax
	movl	$12020, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2017
.L2015:
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2018
.L2022:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2018:
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	subl	-28(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %edx
	movl	-144(%ebp), %eax
	movb	$2, (%eax,%edx)
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	-204(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-144(%ebp), %eax
	movl	%eax, -280(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -276(%ebp)
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-280(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-272(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO5
	leal	-272(%ebp), %eax
	movl	%eax, -8(%ebp)
.L2020:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-172(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2019
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-164(%ebp), %ecx
	movl	-168(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-172(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-164(%ebp), %eax
	movl	%eax, -288(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -284(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2021
.L2019:
	movl	$_UI00000000, %eax
	movl	$12022, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2020
.L2021:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO4, .-ahir_ieee_proposed__float_pkg__to_floatO4
.globl ahir_ieee_proposed__float_pkg__to_floatO5
	.type	ahir_ieee_proposed__float_pkg__to_floatO5, @function
ahir_ieee_proposed__float_pkg__to_floatO5:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$1540, %esp
	leal	-872(%ebp), %eax
	movl	%eax, -764(%ebp)
	movl	-764(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-764(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-764(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-764(%ebp), %eax
	movl	(%eax), %edx
	movl	-764(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -756(%ebp)
	cmpl	$0, -756(%ebp)
	jns	.L2024
	movl	$0, -760(%ebp)
	jmp	.L2025
.L2024:
	movl	-756(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -760(%ebp)
.L2025:
	movl	-764(%ebp), %edx
	movl	-760(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-860(%ebp), %eax
	movl	%eax, -856(%ebp)
	movl	-856(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1512(%ebp)
	movl	-1512(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1512(%ebp)
	movl	-1512(%ebp), %ecx
	movl	%ecx, -852(%ebp)
	movl	-860(%ebp), %eax
	movl	%eax, -752(%ebp)
	movl	$0, -748(%ebp)
.L2027:
	movl	-748(%ebp), %eax
	cmpl	-752(%ebp), %eax
	je	.L2026
	movl	-748(%ebp), %edx
	movl	-852(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -748(%ebp)
	jmp	.L2027
.L2026:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	subl	$1, %eax
	movl	%eax, -848(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -744(%ebp)
	movl	-744(%ebp), %edx
	movl	-848(%ebp), %eax
	movl	%eax, (%edx)
	movl	-744(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-744(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-744(%ebp), %eax
	movl	(%eax), %edx
	movl	-744(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -736(%ebp)
	cmpl	$0, -736(%ebp)
	jns	.L2028
	movl	$0, -740(%ebp)
	jmp	.L2029
.L2028:
	movl	-736(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -740(%ebp)
.L2029:
	movl	-744(%ebp), %edx
	movl	-740(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-876(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -840(%ebp)
	movl	-876(%ebp), %edx
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	je	.L2030
	movl	$_UI00000000, %eax
	movl	$12038, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2030:
	leal	-904(%ebp), %eax
	movl	%eax, -732(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -728(%ebp)
	movl	-728(%ebp), %eax
	movl	(%eax), %edx
	movl	-732(%ebp), %eax
	movl	%edx, (%eax)
	movl	-728(%ebp), %eax
	movl	4(%eax), %edx
	movl	-732(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-728(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-732(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-728(%ebp), %eax
	movl	12(%eax), %edx
	movl	-732(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-892(%ebp), %eax
	movl	%eax, -836(%ebp)
	movl	-836(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1508(%ebp)
	movl	-1508(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1508(%ebp)
	movl	-1508(%ebp), %ecx
	movl	%ecx, -832(%ebp)
	movl	-892(%ebp), %eax
	movl	%eax, -724(%ebp)
	movl	$0, -720(%ebp)
.L2032:
	movl	-720(%ebp), %eax
	cmpl	-724(%ebp), %eax
	je	.L2031
	movl	-720(%ebp), %edx
	movl	-832(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -720(%ebp)
	jmp	.L2032
.L2031:
	leal	-920(%ebp), %eax
	movl	%eax, -716(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -708(%ebp)
	movl	-708(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2033
	movl	-708(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -712(%ebp)
	jmp	.L2034
.L2033:
	movl	-708(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -712(%ebp)
.L2034:
	movl	-712(%ebp), %edx
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, %edx
	movl	-716(%ebp), %eax
	movl	%edx, (%eax)
	movl	-716(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-716(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-716(%ebp), %eax
	movl	(%eax), %edx
	movl	-716(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -700(%ebp)
	cmpl	$0, -700(%ebp)
	jns	.L2035
	movl	$0, -704(%ebp)
	jmp	.L2036
.L2035:
	movl	-700(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -704(%ebp)
.L2036:
	movl	-716(%ebp), %edx
	movl	-704(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-908(%ebp), %eax
	movl	%eax, -828(%ebp)
	movl	-828(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1504(%ebp)
	movl	-1504(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1504(%ebp)
	movl	-1504(%ebp), %ecx
	movl	%ecx, -824(%ebp)
	movl	-908(%ebp), %eax
	movl	%eax, -696(%ebp)
	movl	$0, -692(%ebp)
.L2038:
	movl	-692(%ebp), %eax
	cmpl	-696(%ebp), %eax
	je	.L2037
	movl	-692(%ebp), %edx
	movl	-824(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -692(%ebp)
	jmp	.L2038
.L2037:
	leal	-936(%ebp), %eax
	movl	%eax, -688(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-688(%ebp), %eax
	movl	%edx, (%eax)
	movl	-688(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-688(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-688(%ebp), %eax
	movl	(%eax), %edx
	movl	-688(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -680(%ebp)
	cmpl	$0, -680(%ebp)
	jns	.L2039
	movl	$0, -684(%ebp)
	jmp	.L2040
.L2039:
	movl	-680(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -684(%ebp)
.L2040:
	movl	-688(%ebp), %edx
	movl	-684(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-924(%ebp), %eax
	movl	%eax, -820(%ebp)
	movl	-820(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1500(%ebp)
	movl	-1500(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1500(%ebp)
	movl	-1500(%ebp), %ecx
	movl	%ecx, -816(%ebp)
	movl	-924(%ebp), %eax
	movl	%eax, -676(%ebp)
	movl	$0, -672(%ebp)
.L2042:
	movl	-672(%ebp), %eax
	cmpl	-676(%ebp), %eax
	je	.L2041
	movl	-672(%ebp), %edx
	movl	-816(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -672(%ebp)
	jmp	.L2042
.L2041:
	leal	-952(%ebp), %eax
	movl	%eax, -668(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-668(%ebp), %eax
	movl	%edx, (%eax)
	movl	-668(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-668(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-668(%ebp), %eax
	movl	(%eax), %edx
	movl	-668(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -660(%ebp)
	cmpl	$0, -660(%ebp)
	jns	.L2043
	movl	$0, -664(%ebp)
	jmp	.L2044
.L2043:
	movl	-660(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -664(%ebp)
.L2044:
	movl	-668(%ebp), %edx
	movl	-664(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-940(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	-812(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1496(%ebp)
	movl	-1496(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1496(%ebp)
	movl	-1496(%ebp), %ecx
	movl	%ecx, -808(%ebp)
	movl	-940(%ebp), %eax
	movl	%eax, -656(%ebp)
	movl	$0, -652(%ebp)
.L2046:
	movl	-652(%ebp), %eax
	cmpl	-656(%ebp), %eax
	je	.L2045
	movl	-652(%ebp), %edx
	movl	-808(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -652(%ebp)
	jmp	.L2046
.L2045:
	leal	-968(%ebp), %eax
	movl	%eax, -648(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-648(%ebp), %eax
	movl	%edx, (%eax)
	movl	-648(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-648(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-648(%ebp), %eax
	movl	(%eax), %edx
	movl	-648(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -640(%ebp)
	cmpl	$0, -640(%ebp)
	jns	.L2047
	movl	$0, -644(%ebp)
	jmp	.L2048
.L2047:
	movl	-640(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -644(%ebp)
.L2048:
	movl	-648(%ebp), %edx
	movl	-644(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-956(%ebp), %eax
	movl	%eax, -804(%ebp)
	movl	-804(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1492(%ebp)
	movl	-1492(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1492(%ebp)
	movl	-1492(%ebp), %ecx
	movl	%ecx, -800(%ebp)
	movl	-956(%ebp), %eax
	movl	%eax, -636(%ebp)
	movl	$0, -632(%ebp)
.L2050:
	movl	-632(%ebp), %eax
	cmpl	-636(%ebp), %eax
	je	.L2049
	movl	-632(%ebp), %edx
	movl	-800(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -632(%ebp)
	jmp	.L2050
.L2049:
	leal	-984(%ebp), %eax
	movl	%eax, -628(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-628(%ebp), %eax
	movl	%edx, (%eax)
	movl	-628(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-628(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-628(%ebp), %eax
	movl	(%eax), %edx
	movl	-628(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -620(%ebp)
	cmpl	$0, -620(%ebp)
	jns	.L2051
	movl	$0, -624(%ebp)
	jmp	.L2052
.L2051:
	movl	-620(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -624(%ebp)
.L2052:
	movl	-628(%ebp), %edx
	movl	-624(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-972(%ebp), %eax
	movl	%eax, -796(%ebp)
	movl	-796(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1488(%ebp)
	movl	-1488(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1488(%ebp)
	movl	-1488(%ebp), %ecx
	movl	%ecx, -792(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -616(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1024(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-1024(%ebp), %eax
	movl	%eax, -612(%ebp)
.L2056:
	movl	-612(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-972(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2053
	movl	-612(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-792(%ebp), %ecx
	movl	-796(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-616(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$0, -785(%ebp)
	leal	-1000(%ebp), %eax
	movl	%eax, -608(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-608(%ebp), %eax
	movl	%edx, (%eax)
	movl	-608(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-608(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-608(%ebp), %eax
	movl	(%eax), %edx
	movl	-608(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -600(%ebp)
	cmpl	$0, -600(%ebp)
	js	.L2054
	jmp	.L2153
.L2053:
	movl	$_UI00000000, %eax
	movl	$12047, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2056
.L2054:
	movl	$0, -604(%ebp)
	jmp	.L2057
.L2153:
	movl	-600(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -604(%ebp)
.L2057:
	movl	-608(%ebp), %edx
	movl	-604(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-988(%ebp), %eax
	movl	%eax, -784(%ebp)
	movl	-784(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1484(%ebp)
	movl	-1484(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1484(%ebp)
	movl	-1484(%ebp), %ecx
	movl	%ecx, -780(%ebp)
	movl	-988(%ebp), %eax
	movl	%eax, -596(%ebp)
	movl	$0, -592(%ebp)
.L2059:
	movl	-592(%ebp), %eax
	cmpl	-596(%ebp), %eax
	je	.L2058
	movl	-592(%ebp), %edx
	movl	-780(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -592(%ebp)
	jmp	.L2059
.L2058:
	leal	-1016(%ebp), %eax
	movl	%eax, -588(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-588(%ebp), %eax
	movl	%edx, (%eax)
	movl	-588(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-588(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-588(%ebp), %eax
	movl	(%eax), %edx
	movl	-588(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -580(%ebp)
	cmpl	$0, -580(%ebp)
	jns	.L2060
	movl	$0, -584(%ebp)
	jmp	.L2061
.L2060:
	movl	-580(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -584(%ebp)
.L2061:
	movl	-588(%ebp), %edx
	movl	-584(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1004(%ebp), %eax
	movl	%eax, -776(%ebp)
	movl	-776(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1480(%ebp)
	movl	-1480(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1480(%ebp)
	movl	-1480(%ebp), %ecx
	movl	%ecx, -772(%ebp)
	movl	-1004(%ebp), %eax
	movl	%eax, -576(%ebp)
	movl	$0, -572(%ebp)
.L2063:
	movl	-572(%ebp), %eax
	cmpl	-576(%ebp), %eax
	je	.L2062
	movl	-572(%ebp), %edx
	movl	-772(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -572(%ebp)
	jmp	.L2063
.L2062:
	movb	$0, -765(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2064
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -1032(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -1028(%ebp)
	leal	-1032(%ebp), %eax
	movl	%eax, -568(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-568(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-568(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2152
.L2064:
	movl	-876(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	-840(%ebp), %eax
	movl	%eax, -1040(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -1036(%ebp)
	leal	-1040(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__is_xO2
	testb	%al, %al
	je	.L2066
	movl	%esp, %eax
	movl	%eax, -1468(%ebp)
	movl	-856(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1476(%ebp)
	movl	-1476(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1476(%ebp)
	movl	-1476(%ebp), %ecx
	movl	%ecx, -564(%ebp)
	movl	-860(%ebp), %eax
	movl	%eax, -560(%ebp)
	movl	$0, -556(%ebp)
.L2068:
	movl	-556(%ebp), %eax
	cmpl	-560(%ebp), %eax
	je	.L2067
	movl	-556(%ebp), %edx
	movl	-564(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -556(%ebp)
	jmp	.L2068
.L2067:
	movl	-564(%ebp), %eax
	movl	-852(%ebp), %ecx
	movl	-856(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1468(%ebp), %esp
	jmp	.L2069
.L2066:
	movl	-876(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	-840(%ebp), %eax
	movl	%eax, -1048(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -1044(%ebp)
	movl	$0, 4(%esp)
	leal	-1048(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPEqO6
	testb	%al, %al
	je	.L2070
	call	__ghdl_stack2_mark
	movl	%eax, -552(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1056(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__zerofpO1
	leal	-1056(%ebp), %eax
	movl	%eax, -548(%ebp)
.L2072:
	movl	-548(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-860(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2071
	movl	-548(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-852(%ebp), %ecx
	movl	-856(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-552(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L2069
.L2071:
	movl	$_UI00000000, %eax
	movl	$12059, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2072
.L2070:
	leal	-888(%ebp), %eax
	movl	%eax, -540(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -528(%ebp)
	movl	-528(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2073
	movl	-528(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -536(%ebp)
	jmp	.L2074
.L2073:
	movl	-528(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -536(%ebp)
.L2074:
	movl	-540(%ebp), %eax
	movl	(%eax), %eax
	subl	-536(%ebp), %eax
	movl	%eax, -524(%ebp)
	movl	-524(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	-532(%ebp), %eax
	movl	%eax, -544(%ebp)
	movl	-544(%ebp), %edx
	movl	-840(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movb	%al, -765(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -520(%ebp)
	movl	-876(%ebp), %eax
	movl	%eax, -844(%ebp)
	movl	-840(%ebp), %eax
	movl	%eax, -1080(%ebp)
	leal	-888(%ebp), %eax
	movl	%eax, -1076(%ebp)
	movb	$2, 8(%esp)
	leal	-1080(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1072(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_01O2
	leal	-1072(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1064(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__abs
	leal	-1088(%ebp), %eax
	movl	%eax, -512(%ebp)
	leal	-1064(%ebp), %eax
	movl	%eax, -508(%ebp)
	movl	-508(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -1088(%ebp)
	leal	-1104(%ebp), %eax
	movl	%eax, -1084(%ebp)
	movl	-512(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -504(%ebp)
	movl	-508(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -500(%ebp)
	movl	-500(%ebp), %eax
	movl	(%eax), %edx
	movl	-504(%ebp), %eax
	movl	%edx, (%eax)
	movl	-500(%ebp), %eax
	movl	4(%eax), %edx
	movl	-504(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-500(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-504(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-500(%ebp), %eax
	movl	12(%eax), %edx
	movl	-504(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1088(%ebp), %eax
	movl	%eax, -516(%ebp)
.L2077:
	movl	-516(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-892(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2075
	movl	-516(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-832(%ebp), %ecx
	movl	-836(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-520(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -496(%ebp)
	movl	-892(%ebp), %eax
	movl	%eax, -836(%ebp)
	movl	-832(%ebp), %eax
	movl	%eax, -1120(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -1116(%ebp)
	movl	-908(%ebp), %eax
	movl	%eax, %ebx
	movb	$3, 4(%esp)
	leal	-1120(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__find_leftmostO2
	movl	%ebx, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-1112(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_unsigned
	leal	-1112(%ebp), %eax
	movl	%eax, -492(%ebp)
	jmp	.L2076
.L2075:
	movl	$_UI00000000, %eax
	movl	$12063, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2077
.L2076:
	movl	-492(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-908(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2078
	movl	-492(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-824(%ebp), %ecx
	movl	-828(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-496(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-908(%ebp), %eax
	movl	%eax, -828(%ebp)
	movl	-824(%ebp), %eax
	movl	%eax, -1128(%ebp)
	leal	-920(%ebp), %eax
	movl	%eax, -1124(%ebp)
	leal	-1136(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-792(%ebp), %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %eax
	movl	%eax, -1136(%ebp)
	leal	-1152(%ebp), %eax
	movl	%eax, -1132(%ebp)
	movl	-480(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -472(%ebp)
	leal	-984(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	-468(%ebp), %eax
	movl	(%eax), %edx
	movl	-472(%ebp), %eax
	movl	%edx, (%eax)
	movl	-468(%ebp), %eax
	movl	4(%eax), %edx
	movl	-472(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-468(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-472(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-468(%ebp), %eax
	movl	12(%eax), %edx
	movl	-472(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1136(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1128(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPGtO1
	testb	%al, %al
	jne	.L2079
	jmp	.L2154
.L2078:
	movl	$_UI00000000, %eax
	movl	$12065, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2076
.L2079:
	call	__ghdl_stack2_mark
	movl	%eax, -464(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1192(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-1192(%ebp), %eax
	movl	%eax, -460(%ebp)
.L2084:
	movl	-460(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-860(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2081
	movl	-460(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-852(%ebp), %ecx
	movl	-856(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-464(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-872(%ebp), %eax
	movl	%eax, -452(%ebp)
	movl	-452(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -444(%ebp)
	movl	-444(%ebp), %eax
	movl	%eax, -448(%ebp)
	movl	-444(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-452(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -448(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L2082
	jmp	.L2083
.L2081:
	movl	$_UI00000000, %eax
	movl	$12067, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2084
.L2082:
	movl	$_UI00000000, %eax
	movl	$12069, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2083:
	movl	-448(%ebp), %eax
	movl	%eax, -456(%ebp)
	movl	-456(%ebp), %ecx
	movl	-852(%ebp), %edx
	movzbl	-765(%ebp), %eax
	movb	%al, (%edx,%ecx)
	jmp	.L2069
.L2154:
	call	__ghdl_stack2_mark
	movl	%eax, -440(%ebp)
	movl	-908(%ebp), %eax
	movl	%eax, -828(%ebp)
	movl	-824(%ebp), %eax
	movl	%eax, -1208(%ebp)
	leal	-920(%ebp), %eax
	movl	%eax, -1204(%ebp)
	movl	-940(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1208(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1200(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO2
	leal	-1216(%ebp), %eax
	movl	%eax, -432(%ebp)
	leal	-1200(%ebp), %eax
	movl	%eax, -428(%ebp)
	movl	-428(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -1216(%ebp)
	leal	-1232(%ebp), %eax
	movl	%eax, -1212(%ebp)
	movl	-432(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -424(%ebp)
	movl	-428(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -420(%ebp)
	movl	-420(%ebp), %eax
	movl	(%eax), %edx
	movl	-424(%ebp), %eax
	movl	%edx, (%eax)
	movl	-420(%ebp), %eax
	movl	4(%eax), %edx
	movl	-424(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-420(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-424(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-420(%ebp), %eax
	movl	12(%eax), %edx
	movl	-424(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1216(%ebp), %eax
	movl	%eax, -436(%ebp)
.L2088:
	movl	-436(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-940(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2085
	movl	-436(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-808(%ebp), %ecx
	movl	-812(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-440(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -416(%ebp)
	movl	-892(%ebp), %eax
	movl	%eax, -836(%ebp)
	movl	-832(%ebp), %eax
	movl	%eax, -1248(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -1244(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -404(%ebp)
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2086
	jmp	.L2155
.L2085:
	movl	$_UI00000000, %eax
	movl	$12071, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2088
.L2086:
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -412(%ebp)
	jmp	.L2089
.L2155:
	movl	-404(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -412(%ebp)
.L2089:
	movl	-940(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	-808(%ebp), %eax
	movl	%eax, -1256(%ebp)
	leal	-952(%ebp), %eax
	movl	%eax, -1252(%ebp)
	leal	-1256(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, %edx
	movl	-412(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, 8(%esp)
	leal	-1248(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1240(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__shift_leftO1
	leal	-1240(%ebp), %eax
	movl	%eax, -408(%ebp)
.L2093:
	movl	-408(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-892(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2090
	movl	-408(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-832(%ebp), %ecx
	movl	-836(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-416(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-904(%ebp), %eax
	movl	%eax, -388(%ebp)
	movl	-388(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2091
	jmp	.L2156
.L2090:
	movl	$_UI00000000, %eax
	movl	$12072, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2093
.L2091:
	movl	-388(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -400(%ebp)
	jmp	.L2094
.L2156:
	movl	-388(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -400(%ebp)
.L2094:
	movl	-400(%ebp), %eax
	cmpl	20(%ebp), %eax
	jle	.L2095
	leal	-1272(%ebp), %eax
	movl	%eax, -384(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -372(%ebp)
	movl	-372(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2096
	movl	-372(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -380(%ebp)
	jmp	.L2097
.L2096:
	movl	-372(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -380(%ebp)
.L2097:
	movl	-380(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-384(%ebp), %eax
	movl	%edx, (%eax)
	leal	-904(%ebp), %eax
	movl	%eax, -368(%ebp)
	movl	-368(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2098
	movl	-368(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -376(%ebp)
	jmp	.L2099
.L2098:
	movl	-368(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
.L2099:
	movl	20(%ebp), %edx
	movl	-376(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-384(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-384(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-384(%ebp), %eax
	movl	(%eax), %edx
	movl	-384(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -360(%ebp)
	cmpl	$0, -360(%ebp)
	jns	.L2100
	movl	$0, -364(%ebp)
	jmp	.L2101
.L2100:
	movl	-360(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -364(%ebp)
.L2101:
	movl	-384(%ebp), %edx
	movl	-364(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1260(%ebp), %eax
	movl	%eax, -396(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -356(%ebp)
	leal	-1272(%ebp), %eax
	movl	%eax, -352(%ebp)
	movl	-356(%ebp), %eax
	movl	(%eax), %edx
	movl	-352(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -348(%ebp)
	movl	-348(%ebp), %eax
	movl	%eax, -344(%ebp)
	movl	-348(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-352(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-344(%ebp), %edx
	movl	-356(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2102
	movl	$_UI00000000, %eax
	movl	$12074, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2102:
	movl	-344(%ebp), %eax
	movl	-832(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -340(%ebp)
.L2106:
	movl	-1260(%ebp), %edx
	movl	-988(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2103
	movl	-340(%ebp), %edx
	movl	-780(%ebp), %ecx
	movl	-784(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-1000(%ebp), %eax
	movl	%eax, -312(%ebp)
	movl	-312(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-304(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-312(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -308(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L2104
	jmp	.L2105
.L2103:
	movl	$_UI00000000, %eax
	movl	$12074, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2106
.L2104:
	movl	$_UI00000000, %eax
	movl	$12076, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2105:
	movl	-308(%ebp), %eax
	movl	%eax, -336(%ebp)
	leal	-1304(%ebp), %eax
	movl	%eax, -300(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -292(%ebp)
	movl	-292(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2107
	movl	-292(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -296(%ebp)
	jmp	.L2108
.L2107:
	movl	-292(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -296(%ebp)
.L2108:
	movl	20(%ebp), %edx
	movl	-296(%ebp), %eax
	subl	%edx, %eax
	leal	-1(%eax), %edx
	movl	-300(%ebp), %eax
	movl	%edx, (%eax)
	movl	-300(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-300(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-300(%ebp), %eax
	movl	(%eax), %edx
	movl	-300(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -284(%ebp)
	cmpl	$0, -284(%ebp)
	jns	.L2109
	movl	$0, -288(%ebp)
	jmp	.L2110
.L2109:
	movl	-284(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -288(%ebp)
.L2110:
	movl	-300(%ebp), %edx
	movl	-288(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1292(%ebp), %eax
	movl	%eax, -332(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -328(%ebp)
	leal	-1304(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-328(%ebp), %eax
	movl	(%eax), %edx
	movl	-324(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -320(%ebp)
	movl	-320(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-320(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-324(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-316(%ebp), %edx
	movl	-328(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2111
	movl	$_UI00000000, %eax
	movl	$12078, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2111:
	movl	-1292(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	-316(%ebp), %edx
	movl	-832(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -1312(%ebp)
	leal	-1304(%ebp), %eax
	movl	%eax, -1308(%ebp)
	movl	-336(%ebp), %edx
	movl	-780(%ebp), %eax
	movzbl	(%eax,%edx), %edx
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movb	$2, 12(%esp)
	leal	-1312(%ebp), %eax
	movl	%eax, 8(%esp)
	movzbl	-765(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ahir_ieee_proposed__float_pkg__check_round
	movb	%al, -785(%ebp)
	cmpb	$0, -785(%ebp)
	je	.L2112
	movl	-988(%ebp), %eax
	movl	%eax, -784(%ebp)
	movl	-780(%ebp), %eax
	movl	%eax, -1320(%ebp)
	leal	-1000(%ebp), %eax
	movl	%eax, -1316(%ebp)
	movl	-940(%ebp), %eax
	movl	%eax, -812(%ebp)
	movl	-808(%ebp), %eax
	movl	%eax, -1328(%ebp)
	leal	-952(%ebp), %eax
	movl	%eax, -1324(%ebp)
	movl	-1004(%ebp), %eax
	movl	%eax, -776(%ebp)
	movl	-772(%ebp), %eax
	movl	%eax, -1336(%ebp)
	leal	-1016(%ebp), %eax
	movl	%eax, -1332(%ebp)
	movl	-924(%ebp), %eax
	movl	%eax, -820(%ebp)
	movl	-816(%ebp), %eax
	movl	%eax, -1344(%ebp)
	leal	-936(%ebp), %eax
	movl	%eax, -1340(%ebp)
	leal	-1344(%ebp), %eax
	movl	%eax, 12(%esp)
	leal	-1336(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-1328(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1320(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__fp_round
	jmp	.L2118
.L2112:
	movl	-780(%ebp), %eax
	movl	%eax, -280(%ebp)
.L2116:
	movl	-988(%ebp), %edx
	movl	-1004(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2114
	movl	-280(%ebp), %edx
	movl	-772(%ebp), %ecx
	movl	-776(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-808(%ebp), %eax
	movl	%eax, -276(%ebp)
	jmp	.L2115
.L2114:
	movl	$_UI00000000, %eax
	movl	$12049, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2116
.L2115:
	movl	-940(%ebp), %edx
	movl	-924(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2117
	movl	-276(%ebp), %eax
	movl	-816(%ebp), %ecx
	movl	-820(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	jmp	.L2118
.L2117:
	movl	$_UI00000000, %eax
	movl	$12042, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2115
.L2095:
	movl	-808(%ebp), %eax
	movl	%eax, -272(%ebp)
.L2121:
	movl	-940(%ebp), %edx
	movl	-924(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2119
	movl	-272(%ebp), %edx
	movl	-816(%ebp), %ecx
	movl	-820(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	%esp, %eax
	movl	%eax, -1464(%ebp)
	movl	-776(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -1472(%ebp)
	movl	-1472(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -1472(%ebp)
	movl	-1472(%ebp), %ecx
	movl	%ecx, -268(%ebp)
	movl	-1004(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	$0, -260(%ebp)
	jmp	.L2120
.L2119:
	movl	$_UI00000000, %eax
	movl	$12042, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2121
.L2120:
	movl	-260(%ebp), %eax
	cmpl	-264(%ebp), %eax
	je	.L2122
	movl	-260(%ebp), %edx
	movl	-268(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -260(%ebp)
	jmp	.L2120
.L2122:
	movl	-268(%ebp), %edx
	movl	-772(%ebp), %ecx
	movl	-776(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-1464(%ebp), %esp
	leal	-1288(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-256(%ebp), %eax
	movl	%edx, (%eax)
	leal	-904(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2123
	movl	-248(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -252(%ebp)
	jmp	.L2124
.L2123:
	movl	-248(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -252(%ebp)
.L2124:
	movl	20(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-252(%ebp), %eax
	subl	$1, %eax
	subl	%eax, %edx
	movl	-256(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-256(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-256(%ebp), %eax
	movl	(%eax), %edx
	movl	-256(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -240(%ebp)
	cmpl	$0, -240(%ebp)
	jns	.L2125
	movl	$0, -244(%ebp)
	jmp	.L2126
.L2125:
	movl	-240(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -244(%ebp)
.L2126:
	movl	-256(%ebp), %edx
	movl	-244(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1276(%ebp), %eax
	movl	%eax, -392(%ebp)
	leal	-1016(%ebp), %eax
	movl	%eax, -236(%ebp)
	leal	-1288(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-236(%ebp), %eax
	movl	(%eax), %edx
	movl	-232(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-228(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-232(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-224(%ebp), %edx
	movl	-236(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2127
	movl	$_UI00000000, %eax
	movl	$12093, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2127:
	leal	-1360(%ebp), %eax
	movl	%eax, -216(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2128
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
	jmp	.L2129
.L2128:
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -212(%ebp)
.L2129:
	movl	-212(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-216(%ebp), %eax
	movl	%edx, (%eax)
	movl	-216(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-216(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-216(%ebp), %eax
	movl	(%eax), %edx
	movl	-216(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -200(%ebp)
	cmpl	$0, -200(%ebp)
	jns	.L2130
	movl	$0, -204(%ebp)
	jmp	.L2131
.L2130:
	movl	-200(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -204(%ebp)
.L2131:
	movl	-216(%ebp), %edx
	movl	-204(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1348(%ebp), %eax
	movl	%eax, -220(%ebp)
	leal	-904(%ebp), %eax
	movl	%eax, -196(%ebp)
	leal	-1360(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-196(%ebp), %eax
	movl	(%eax), %edx
	movl	-192(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-188(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-192(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-184(%ebp), %edx
	movl	-196(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2132
	movl	$_UI00000000, %eax
	movl	$12094, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2132:
	movl	-184(%ebp), %eax
	movl	-832(%ebp), %edx
	leal	(%edx,%eax), %eax
	movl	%eax, -180(%ebp)
.L2134:
	movl	-1348(%ebp), %edx
	movl	-1276(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2133
	movl	-180(%ebp), %ecx
	movl	-224(%ebp), %edx
	movl	-772(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-392(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L2118
.L2133:
	movl	$_UI00000000, %eax
	movl	$12094, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2134
.L2118:
	leal	-872(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %eax
	movl	(%eax), %eax
	subl	16(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-164(%ebp), %eax
	movl	%eax, -168(%ebp)
	movl	-164(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-172(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -168(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2135
	movl	$_UI00000000, %eax
	movl	$12096, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2135:
	movl	-168(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-176(%ebp), %ecx
	movl	-852(%ebp), %edx
	movzbl	-765(%ebp), %eax
	movb	%al, (%edx,%ecx)
	call	__ghdl_stack2_mark
	movl	%eax, -160(%ebp)
	movl	-924(%ebp), %eax
	movl	%eax, -820(%ebp)
	movl	-816(%ebp), %eax
	movl	%eax, -1376(%ebp)
	leal	-936(%ebp), %eax
	movl	%eax, -1372(%ebp)
	movl	$1, 8(%esp)
	leal	-1376(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-1368(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO6
	leal	-1384(%ebp), %eax
	movl	%eax, -152(%ebp)
	leal	-1368(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -1384(%ebp)
	leal	-1400(%ebp), %eax
	movl	%eax, -1380(%ebp)
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -144(%ebp)
	movl	-148(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	movl	(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, (%eax)
	movl	-140(%ebp), %eax
	movl	4(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-140(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-144(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-140(%ebp), %eax
	movl	12(%eax), %edx
	movl	-144(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1384(%ebp), %eax
	movl	%eax, -156(%ebp)
.L2139:
	movl	-156(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-956(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2136
	movl	-156(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-800(%ebp), %ecx
	movl	-804(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-160(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-968(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-124(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-132(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -128(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L2137
	jmp	.L2138
.L2136:
	movl	$_UI00000000, %eax
	movl	$12097, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2139
.L2137:
	movl	$_UI00000000, %eax
	movl	$12098, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2138:
	movl	-128(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-968(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-108(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-116(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -112(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2140
	movl	$_UI00000000, %eax
	movl	$12098, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2140:
	movl	-112(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-136(%ebp), %ebx
	movl	-120(%ebp), %edx
	movl	-800(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-800(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	leal	-1168(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-104(%ebp), %eax
	movl	%edx, (%eax)
	movl	-104(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	jns	.L2141
	movl	$0, -100(%ebp)
	jmp	.L2142
.L2141:
	movl	-96(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -100(%ebp)
.L2142:
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1156(%ebp), %eax
	movl	%eax, -488(%ebp)
	leal	-872(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-1168(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-84(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-80(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2143
	movl	$_UI00000000, %eax
	movl	$12099, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2143:
	leal	-1408(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-800(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -1408(%ebp)
	leal	-1424(%ebp), %eax
	movl	%eax, -1404(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	leal	-968(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	4(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-64(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-60(%ebp), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1408(%ebp), %eax
	movl	%eax, -76(%ebp)
.L2147:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1156(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2144
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-80(%ebp), %edx
	movl	-852(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-488(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	leal	-1184(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	$-1, (%eax)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-56(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-56(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-56(%ebp), %eax
	movl	(%eax), %edx
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -48(%ebp)
	cmpl	$0, -48(%ebp)
	js	.L2145
	jmp	.L2157
.L2144:
	movl	$_UI00000000, %eax
	movl	$12099, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2147
.L2145:
	movl	$0, -52(%ebp)
	jmp	.L2148
.L2157:
	movl	-48(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -52(%ebp)
.L2148:
	movl	-56(%ebp), %edx
	movl	-52(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-1172(%ebp), %eax
	movl	%eax, -484(%ebp)
	leal	-872(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-1184(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-36(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-32(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2149
	movl	$_UI00000000, %eax
	movl	$12100, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2149:
	leal	-1432(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-772(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -1432(%ebp)
	leal	-1448(%ebp), %eax
	movl	%eax, -1428(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	leal	-1016(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, (%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-16(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-12(%ebp), %eax
	movl	12(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-1432(%ebp), %eax
	movl	%eax, -28(%ebp)
.L2151:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-1172(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2150
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %edx
	movl	-852(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-484(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	jmp	.L2069
.L2150:
	movl	$_UI00000000, %eax
	movl	$12100, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2151
.L2069:
	movl	-860(%ebp), %eax
	movl	%eax, -856(%ebp)
	movl	-852(%ebp), %eax
	movl	%eax, -1456(%ebp)
	leal	-872(%ebp), %eax
	movl	%eax, -1452(%ebp)
	leal	-1456(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
.L2152:
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO5, .-ahir_ieee_proposed__float_pkg__to_floatO5
.globl ahir_ieee_proposed__float_pkg__to_floatO1
	.type	ahir_ieee_proposed__float_pkg__to_floatO1, @function
ahir_ieee_proposed__float_pkg__to_floatO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %edx
	movl	16(%ebp), %eax
	movl	%eax, (%edx)
	movl	20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-48(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -40(%ebp)
	cmpl	$0, -40(%ebp)
	jns	.L2159
	movl	$0, -44(%ebp)
	jmp	.L2160
.L2159:
	movl	-40(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -44(%ebp)
.L2160:
	movl	-48(%ebp), %edx
	movl	-44(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	$0, -32(%ebp)
.L2162:
	movl	-32(%ebp), %eax
	cmpl	-36(%ebp), %eax
	je	.L2161
	movl	-32(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -32(%ebp)
	jmp	.L2162
.L2161:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2163
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -80(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2167
.L2163:
	leal	-88(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-88(%ebp), %eax
	movl	%eax, -24(%ebp)
.L2166:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2165
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2167
.L2165:
	movl	$_UI00000000, %eax
	movl	$12117, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2166
.L2167:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO1, .-ahir_ieee_proposed__float_pkg__to_floatO1
.globl ahir_ieee_proposed__float_pkg__to_floatO6
	.type	ahir_ieee_proposed__float_pkg__to_floatO6, @function
ahir_ieee_proposed__float_pkg__to_floatO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L2169
	movl	$0, -48(%ebp)
	jmp	.L2170
.L2169:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L2170:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2172:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2171
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2172
.L2171:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L2173
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2181
.L2173:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2175
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2176
.L2175:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2176:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2177
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2178
.L2177:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2178:
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movzbl	20(%ebp), %eax
	movb	%al, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L2180:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2179
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2181
.L2179:
	movl	$_UI00000000, %eax
	movl	$12134, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2180
.L2181:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO6, .-ahir_ieee_proposed__float_pkg__to_floatO6
.globl ahir_ieee_proposed__float_pkg__to_floatO7
	.type	ahir_ieee_proposed__float_pkg__to_floatO7, @function
ahir_ieee_proposed__float_pkg__to_floatO7:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	movl	12(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -116(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L2183
	movl	$0, -48(%ebp)
	jmp	.L2184
.L2183:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L2184:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2186:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2185
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2186
.L2185:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L2187
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2195
.L2187:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2189
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2190
.L2189:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2190:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2191
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2192
.L2191:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2192:
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movzbl	28(%ebp), %eax
	movb	%al, 24(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 20(%esp)
	movl	%edx, 16(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-120(%ebp)
	fstpl	4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L2194:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2193
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2195
.L2193:
	movl	$_UI00000000, %eax
	movl	$12154, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2194
.L2195:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO7, .-ahir_ieee_proposed__float_pkg__to_floatO7
.globl ahir_ieee_proposed__float_pkg__to_floatO8
	.type	ahir_ieee_proposed__float_pkg__to_floatO8, @function
ahir_ieee_proposed__float_pkg__to_floatO8:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L2197
	movl	$0, -48(%ebp)
	jmp	.L2198
.L2197:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L2198:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2200:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2199
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2200
.L2199:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L2201
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2209
.L2201:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2203
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2204
.L2203:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2204:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2205
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2206
.L2205:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2206:
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movzbl	20(%ebp), %eax
	movb	%al, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO4
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L2208:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2207
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2209
.L2207:
	movl	$_UI00000000, %eax
	movl	$12174, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2208
.L2209:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO8, .-ahir_ieee_proposed__float_pkg__to_floatO8
.globl ahir_ieee_proposed__float_pkg__to_floatO9
	.type	ahir_ieee_proposed__float_pkg__to_floatO9, @function
ahir_ieee_proposed__float_pkg__to_floatO9:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L2211
	movl	$0, -48(%ebp)
	jmp	.L2212
.L2211:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L2212:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2214:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2213
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2214
.L2213:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L2215
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2223
.L2215:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2217
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2218
.L2217:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2218:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2219
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2220
.L2219:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2220:
	movl	-20(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movzbl	20(%ebp), %eax
	movb	%al, 16(%esp)
	movl	%edx, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO5
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L2222:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2221
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2223
.L2221:
	movl	$_UI00000000, %eax
	movl	$12193, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2222
.L2223:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO9, .-ahir_ieee_proposed__float_pkg__to_floatO9
.globl ahir_ieee_proposed__float_pkg__to_floatO10
	.type	ahir_ieee_proposed__float_pkg__to_floatO10, @function
ahir_ieee_proposed__float_pkg__to_floatO10:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-76(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-52(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	cmpl	$0, -44(%ebp)
	jns	.L2225
	movl	$0, -48(%ebp)
	jmp	.L2226
.L2225:
	movl	-44(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -48(%ebp)
.L2226:
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %ecx
	movl	%ecx, -56(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2228:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2227
	movl	-36(%ebp), %edx
	movl	-56(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2228
.L2227:
	movl	-64(%ebp), %eax
	testl	%eax, %eax
	jg	.L2229
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2237
.L2229:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2231
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2232
.L2231:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2232:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2233
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2234
.L2233:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2234:
	movl	-20(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-24(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-92(%ebp), %eax
	movl	%eax, -16(%ebp)
.L2236:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2235
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-56(%ebp), %ecx
	movl	-60(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-64(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-76(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2237
.L2235:
	movl	$_UI00000000, %eax
	movl	$12211, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2236
.L2237:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO10, .-ahir_ieee_proposed__float_pkg__to_floatO10
.globl ahir_ieee_proposed__float_pkg__to_integer
	.type	ahir_ieee_proposed__float_pkg__to_integer, @function
ahir_ieee_proposed__float_pkg__to_integer:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$676, %esp
	movb	$0, -481(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -440(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -432(%ebp)
	movl	-432(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2239
	movl	-432(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -436(%ebp)
	jmp	.L2240
.L2239:
	movl	-432(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -436(%ebp)
.L2240:
	movl	-436(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-440(%ebp), %eax
	movl	%edx, (%eax)
	movl	-440(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-440(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-440(%ebp), %eax
	movl	(%eax), %edx
	movl	-440(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -424(%ebp)
	cmpl	$0, -424(%ebp)
	jns	.L2241
	movl	$0, -428(%ebp)
	jmp	.L2242
.L2241:
	movl	-424(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -428(%ebp)
.L2242:
	movl	-440(%ebp), %edx
	movl	-428(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-488(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-480(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -640(%ebp)
	movl	-640(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -640(%ebp)
	movl	-640(%ebp), %edx
	movl	%edx, -476(%ebp)
	movl	-488(%ebp), %eax
	movl	%eax, -420(%ebp)
	movl	$0, -416(%ebp)
.L2244:
	movl	-416(%ebp), %eax
	cmpl	-420(%ebp), %eax
	je	.L2243
	movl	-416(%ebp), %edx
	movl	-476(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -416(%ebp)
	jmp	.L2244
.L2243:
	leal	-516(%ebp), %eax
	movl	%eax, -412(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -404(%ebp)
	movl	-404(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2245
	movl	-404(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -408(%ebp)
	jmp	.L2246
.L2245:
	movl	-404(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -408(%ebp)
.L2246:
	movl	$1, %eax
	movl	%eax, %edx
	subl	-408(%ebp), %edx
	movl	-412(%ebp), %eax
	movl	%edx, (%eax)
	movl	-412(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-412(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-412(%ebp), %eax
	movl	(%eax), %edx
	movl	-412(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -396(%ebp)
	cmpl	$0, -396(%ebp)
	jns	.L2247
	movl	$0, -400(%ebp)
	jmp	.L2248
.L2247:
	movl	-396(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -400(%ebp)
.L2248:
	movl	-412(%ebp), %edx
	movl	-400(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-504(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	-472(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -636(%ebp)
	movl	-636(%ebp), %edx
	movl	%edx, -468(%ebp)
	movl	-504(%ebp), %eax
	movl	%eax, -392(%ebp)
	movl	$0, -388(%ebp)
.L2250:
	movl	-388(%ebp), %eax
	cmpl	-392(%ebp), %eax
	je	.L2249
	movl	-388(%ebp), %edx
	movl	-468(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -388(%ebp)
	jmp	.L2250
.L2249:
	leal	-532(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -376(%ebp)
	movl	-376(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2251
	movl	-376(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -380(%ebp)
	jmp	.L2252
.L2251:
	movl	-376(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -380(%ebp)
.L2252:
	movl	-380(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-384(%ebp), %eax
	movl	%edx, (%eax)
	movl	-384(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-384(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-384(%ebp), %eax
	movl	(%eax), %edx
	movl	-384(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -368(%ebp)
	cmpl	$0, -368(%ebp)
	jns	.L2253
	movl	$0, -372(%ebp)
	jmp	.L2254
.L2253:
	movl	-368(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -372(%ebp)
.L2254:
	movl	-384(%ebp), %edx
	movl	-372(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-520(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-464(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -632(%ebp)
	movl	-632(%ebp), %edx
	movl	%edx, -460(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -364(%ebp)
	movl	$0, -360(%ebp)
.L2256:
	movl	-360(%ebp), %eax
	cmpl	-364(%ebp), %eax
	je	.L2255
	movl	-360(%ebp), %edx
	movl	-460(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -360(%ebp)
	jmp	.L2256
.L2255:
	movb	$0, -454(%ebp)
	movb	$0, -453(%ebp)
	movl	$-2147483648, -452(%ebp)
	movl	$-2147483648, -448(%ebp)
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -481(%ebp)
	cmpb	$10, -481(%ebp)
	ja	.L2257
	movsbl	-481(%ebp),%ecx
	movl	$1, %eax
	movl	%eax, %edx
	sall	%cl, %edx
	movl	%edx, -644(%ebp)
	movl	-644(%ebp), %eax
	andl	$1267, %eax
	testl	%eax, %eax
	jne	.L2258
	movl	-644(%ebp), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L2260
	movl	-644(%ebp), %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L2259
	jmp	.L2257
.L2258:
	movl	$0, -452(%ebp)
	jmp	.L2261
.L2260:
	movl	$2147483647, -452(%ebp)
	jmp	.L2261
.L2259:
	movl	$-2147483648, -452(%ebp)
	jmp	.L2261
.L2257:
	movl	-488(%ebp), %eax
	movl	%eax, -480(%ebp)
	movl	-476(%ebp), %eax
	movl	%eax, -556(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -552(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-460(%ebp), %eax
	movl	%eax, -564(%ebp)
	leal	-532(%ebp), %eax
	movl	%eax, -560(%ebp)
	leal	-564(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-556(%ebp), %eax
	movl	%eax, 12(%esp)
	movb	$0, 8(%esp)
	movzbl	-481(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	leal	-516(%ebp), %eax
	movl	%eax, -352(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -340(%ebp)
	movl	-340(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2262
	movl	-340(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -348(%ebp)
	jmp	.L2263
.L2262:
	movl	-340(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -348(%ebp)
.L2263:
	movl	-352(%ebp), %eax
	movl	(%eax), %eax
	subl	-348(%ebp), %eax
	movl	%eax, -336(%ebp)
	movl	-336(%ebp), %eax
	movl	%eax, -344(%ebp)
	movl	-344(%ebp), %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %edx
	movl	-468(%ebp), %eax
	movb	$2, (%eax,%edx)
	leal	-548(%ebp), %eax
	movl	%eax, -332(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-324(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2264
	movl	-324(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -328(%ebp)
	jmp	.L2265
.L2264:
	movl	-324(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -328(%ebp)
.L2265:
	movl	-328(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-332(%ebp), %eax
	movl	%edx, (%eax)
	movl	-332(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-332(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-332(%ebp), %eax
	movl	(%eax), %edx
	movl	-332(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -316(%ebp)
	cmpl	$0, -316(%ebp)
	jns	.L2266
	movl	$0, -320(%ebp)
	jmp	.L2267
.L2266:
	movl	-316(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -320(%ebp)
.L2267:
	movl	-332(%ebp), %edx
	movl	-320(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-536(%ebp), %eax
	movl	%eax, -444(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -312(%ebp)
	leal	-548(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-312(%ebp), %eax
	movl	(%eax), %edx
	movl	-308(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -304(%ebp)
	movl	-304(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-304(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-308(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-300(%ebp), %edx
	movl	-312(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2268
	movl	$_UI00000000, %eax
	movl	$12250, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2268:
	movl	-476(%ebp), %eax
	movl	%eax, -296(%ebp)
.L2272:
	movl	-488(%ebp), %edx
	movl	-536(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2269
	movl	-296(%ebp), %ecx
	movl	-300(%ebp), %edx
	movl	-468(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-444(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -288(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -276(%ebp)
	movl	-276(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2270
	jmp	.L2326
.L2269:
	movl	$_UI00000000, %eax
	movl	$12226, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2272
.L2270:
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -284(%ebp)
	jmp	.L2273
.L2326:
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -284(%ebp)
.L2273:
	movl	-284(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-288(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -264(%ebp)
	movl	-288(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2274
	movl	-264(%ebp), %eax
	movl	-268(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
	jmp	.L2275
.L2274:
	movl	-268(%ebp), %eax
	movl	-264(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -272(%ebp)
.L2275:
	movl	-272(%ebp), %eax
	movl	%eax, -280(%ebp)
	movl	-272(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-288(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -280(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2276
	movl	$_UI00000000, %eax
	movl	$12251, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2276:
	movl	-280(%ebp), %eax
	movl	%eax, -292(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-292(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movb	%al, -454(%ebp)
	movl	-520(%ebp), %eax
	movl	%eax, -464(%ebp)
	movl	-460(%ebp), %eax
	movl	%eax, -572(%ebp)
	leal	-532(%ebp), %eax
	movl	%eax, -568(%ebp)
	leal	-572(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	addl	$1, %eax
	movl	%eax, -448(%ebp)
	cmpl	$-1, -448(%ebp)
	jge	.L2277
	movl	$0, -452(%ebp)
	jmp	.L2278
.L2277:
	leal	-500(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-252(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2279
	movl	-252(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -260(%ebp)
	jmp	.L2280
.L2279:
	movl	-252(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -260(%ebp)
.L2280:
	movl	-448(%ebp), %eax
	cmpl	-260(%ebp), %eax
	jl	.L2281
	movl	-504(%ebp), %eax
	movl	%eax, -472(%ebp)
	movl	-468(%ebp), %eax
	movl	%eax, -596(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -592(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-244(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2282
	movl	-244(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -248(%ebp)
	jmp	.L2283
.L2282:
	movl	-244(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -248(%ebp)
.L2283:
	leal	-596(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO1
	movl	%eax, %ebx
	movl	-248(%ebp), %edx
	movl	-448(%ebp), %eax
	subl	%edx, %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	imull	%ebx, %eax
	movl	%eax, -452(%ebp)
	jmp	.L2278
.L2281:
	cmpl	$-1, -448(%ebp)
	jne	.L2284
	movl	$0, -452(%ebp)
	jmp	.L2285
.L2284:
	leal	-588(%ebp), %eax
	movl	%eax, -240(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2286
	movl	-228(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -236(%ebp)
	jmp	.L2287
.L2286:
	movl	-228(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -236(%ebp)
.L2287:
	movl	-240(%ebp), %edx
	movl	-236(%ebp), %eax
	movl	%eax, (%edx)
	leal	-500(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2288
	movl	-224(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -232(%ebp)
	jmp	.L2289
.L2288:
	movl	-224(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -232(%ebp)
.L2289:
	movl	-448(%ebp), %edx
	movl	-232(%ebp), %eax
	movl	%eax, %ecx
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	-240(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-240(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-240(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -216(%ebp)
	cmpl	$0, -216(%ebp)
	jns	.L2290
	movl	$0, -220(%ebp)
	jmp	.L2291
.L2290:
	movl	-216(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -220(%ebp)
.L2291:
	movl	-240(%ebp), %edx
	movl	-220(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-576(%ebp), %eax
	movl	%eax, -256(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-588(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	-212(%ebp), %eax
	movl	(%eax), %edx
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	movl	%eax, -200(%ebp)
	movl	-204(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-208(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-200(%ebp), %edx
	movl	-212(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2292
	movl	$_UI00000000, %eax
	movl	$12261, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2292:
	movl	-576(%ebp), %eax
	movl	%eax, -256(%ebp)
	movl	-200(%ebp), %edx
	movl	-468(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -604(%ebp)
	leal	-588(%ebp), %eax
	movl	%eax, -600(%ebp)
	leal	-604(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO1
	movl	%eax, -452(%ebp)
.L2285:
	movzbl	12(%ebp), %eax
	movb	%al, -645(%ebp)
	cmpb	$1, -645(%ebp)
	je	.L2295
	cmpb	$1, -645(%ebp)
	jb	.L2294
	cmpb	$2, -645(%ebp)
	je	.L2296
	jmp	.L2327
.L2294:
	leal	-500(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2297
	movl	-192(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -196(%ebp)
	jmp	.L2298
.L2297:
	movl	-192(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -196(%ebp)
.L2298:
	movl	-448(%ebp), %eax
	movl	-196(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	cmpl	$1, %eax
	jle	.L2299
	leal	-516(%ebp), %eax
	movl	%eax, -160(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2300
	movl	-148(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -156(%ebp)
	jmp	.L2301
.L2300:
	movl	-148(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -156(%ebp)
.L2301:
	movl	-160(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-156(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-144(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -152(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2302
	movl	$_UI00000000, %eax
	movl	$12267, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2302:
	movl	-152(%ebp), %eax
	movl	%eax, -188(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -140(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2303
	movl	-128(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -136(%ebp)
	jmp	.L2304
.L2303:
	movl	-128(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
.L2304:
	movl	-140(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-136(%ebp), %eax
	subl	%edx, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -124(%ebp)
	movl	-124(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-124(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -132(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2305
	movl	$_UI00000000, %eax
	movl	$12268, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2305:
	movl	-132(%ebp), %eax
	movl	%eax, -184(%ebp)
	leal	-620(%ebp), %eax
	movl	%eax, -120(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2306
	movl	-112(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -116(%ebp)
	jmp	.L2307
.L2306:
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -116(%ebp)
.L2307:
	movl	-448(%ebp), %edx
	movl	-116(%ebp), %eax
	subl	%edx, %eax
	leal	-2(%eax), %edx
	movl	-120(%ebp), %eax
	movl	%edx, (%eax)
	movl	-120(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-120(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-120(%ebp), %eax
	movl	(%eax), %edx
	movl	-120(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -104(%ebp)
	cmpl	$0, -104(%ebp)
	jns	.L2308
	movl	$0, -108(%ebp)
	jmp	.L2309
.L2308:
	movl	-104(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -108(%ebp)
.L2309:
	movl	-120(%ebp), %edx
	movl	-108(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-608(%ebp), %eax
	movl	%eax, -180(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -176(%ebp)
	leal	-620(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-176(%ebp), %eax
	movl	(%eax), %edx
	movl	-172(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-168(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-172(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-164(%ebp), %edx
	movl	-176(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2310
	movl	$_UI00000000, %eax
	movl	$12269, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2310:
	movl	-608(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-164(%ebp), %edx
	movl	-468(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -628(%ebp)
	leal	-620(%ebp), %eax
	movl	%eax, -624(%ebp)
	leal	-628(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO2
	movl	%eax, %ecx
	movl	-184(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movl	%eax, %ecx
	movl	-188(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -453(%ebp)
	jmp	.L2318
.L2299:
	leal	-516(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2312
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L2313
.L2312:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L2313:
	movl	-92(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-88(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-76(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -84(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2314
	movl	$_UI00000000, %eax
	movl	$12271, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2314:
	movl	-84(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-516(%ebp), %eax
	movl	%eax, -72(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2315
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -68(%ebp)
	jmp	.L2316
.L2315:
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
.L2316:
	movl	-72(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-68(%ebp), %eax
	subl	%edx, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-56(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-72(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -64(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2317
	movl	$_UI00000000, %eax
	movl	$12272, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2317:
	movl	-64(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %ecx
	movl	-100(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -453(%ebp)
	jmp	.L2318
.L2295:
	leal	-516(%ebp), %eax
	movl	%eax, -48(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2319
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -44(%ebp)
	jmp	.L2320
.L2319:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
.L2320:
	movl	-48(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-44(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-32(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -40(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2321
	movl	$_UI00000000, %eax
	movl	$12275, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2321:
	movl	-40(%ebp), %eax
	movl	%eax, -52(%ebp)
	movzbl	-454(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %ecx
	movl	-52(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%cl, 4(%esp)
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -453(%ebp)
	jmp	.L2318
.L2296:
	leal	-516(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	-500(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2322
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2323
.L2322:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2323:
	movl	-24(%ebp), %eax
	movl	(%eax), %ecx
	movl	-448(%ebp), %edx
	movl	-20(%ebp), %eax
	subl	%edx, %eax
	subl	$1, %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -16(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2324
	movl	$_UI00000000, %eax
	movl	$12277, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2324:
	movl	-16(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %edx
	movl	-468(%ebp), %eax
	movzbl	(%eax,%edx), %edx
	movzbl	-454(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__andO1
	movb	%al, -453(%ebp)
	jmp	.L2318
.L2327:
	movb	$2, -453(%ebp)
.L2318:
	cmpb	$3, -453(%ebp)
	jne	.L2278
	addl	$1, -452(%ebp)
.L2278:
	cmpb	$3, -454(%ebp)
	jne	.L2261
	negl	-452(%ebp)
.L2261:
	movl	-452(%ebp), %eax
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_integer, .-ahir_ieee_proposed__float_pkg__to_integer
.globl ahir_ieee_proposed__float_pkg__to_unsignedO1
	.type	ahir_ieee_proposed__float_pkg__to_unsignedO1, @function
ahir_ieee_proposed__float_pkg__to_unsignedO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	movb	$0, -73(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	cmpl	$0, -52(%ebp)
	jns	.L2329
	movl	$0, -56(%ebp)
	jmp	.L2330
.L2329:
	movl	-52(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -56(%ebp)
.L2330:
	movl	-60(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-80(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %edx
	movl	%edx, -68(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	$0, -44(%ebp)
.L2332:
	movl	-44(%ebp), %eax
	cmpl	-48(%ebp), %eax
	je	.L2331
	movl	-44(%ebp), %edx
	movl	-68(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -44(%ebp)
	jmp	.L2332
.L2331:
	movb	$0, -61(%ebp)
	movzbl	24(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -73(%ebp)
	cmpb	$10, -73(%ebp)
	ja	.L2333
	movsbl	-73(%ebp),%ecx
	movl	$1, %eax
	movl	%eax, %edx
	sall	%cl, %edx
	movl	%edx, -144(%ebp)
	movl	-144(%ebp), %eax
	andl	$1027, %eax
	testl	%eax, %eax
	jne	.L2334
	movl	-144(%ebp), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L2336
	movl	-144(%ebp), %eax
	andl	$252, %eax
	testl	%eax, %eax
	jne	.L2335
	jmp	.L2333
.L2334:
	movl	%esp, %eax
	movl	%eax, -124(%ebp)
	movl	-72(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %ecx
	movl	%ecx, -136(%ebp)
	movl	-136(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	$0, -32(%ebp)
.L2338:
	movl	-32(%ebp), %eax
	cmpl	-36(%ebp), %eax
	je	.L2337
	movl	-32(%ebp), %edx
	movl	-40(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -32(%ebp)
	jmp	.L2338
.L2337:
	movl	-40(%ebp), %eax
	movl	-68(%ebp), %ecx
	movl	-72(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-124(%ebp), %esp
	jmp	.L2339
.L2335:
	movl	%esp, %eax
	movl	%eax, -120(%ebp)
	movl	-72(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %edx
	movl	%edx, -132(%ebp)
	movl	-132(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %ecx
	movl	%ecx, -28(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$0, -20(%ebp)
.L2341:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L2340
	movl	-20(%ebp), %edx
	movl	-28(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -20(%ebp)
	jmp	.L2341
.L2340:
	movl	-28(%ebp), %eax
	movl	-68(%ebp), %ecx
	movl	-72(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-120(%ebp), %esp
	jmp	.L2339
.L2336:
	movl	%esp, %eax
	movl	%eax, -116(%ebp)
	movl	-72(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -128(%ebp)
	movl	-128(%ebp), %edx
	movl	%edx, -16(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$0, -8(%ebp)
.L2343:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L2342
	movl	-8(%ebp), %edx
	movl	-16(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -8(%ebp)
	jmp	.L2343
.L2342:
	movl	-16(%ebp), %eax
	movl	-68(%ebp), %ecx
	movl	-72(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-116(%ebp), %esp
	jmp	.L2339
.L2333:
	movl	-80(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -104(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -100(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 20(%esp)
	movl	$0, 16(%esp)
	movb	$0, 12(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-93(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__float_to_unsigned
	movzbl	-93(%ebp), %eax
	movb	%al, -61(%ebp)
.L2339:
	movl	-80(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_unsignedO1, .-ahir_ieee_proposed__float_pkg__to_unsignedO1
.globl ahir_ieee_proposed__float_pkg__to_signedO1
	.type	ahir_ieee_proposed__float_pkg__to_signedO1, @function
ahir_ieee_proposed__float_pkg__to_signedO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$600, %esp
	movb	$0, -386(%ebp)
	movb	$0, -385(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -364(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-364(%ebp), %eax
	movl	%edx, (%eax)
	movl	-364(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-364(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-364(%ebp), %eax
	movl	(%eax), %edx
	movl	-364(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -356(%ebp)
	cmpl	$0, -356(%ebp)
	jns	.L2346
	movl	$0, -360(%ebp)
	jmp	.L2347
.L2346:
	movl	-356(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -360(%ebp)
.L2347:
	movl	-364(%ebp), %edx
	movl	-360(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-392(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-384(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -568(%ebp)
	movl	-568(%ebp), %ecx
	movl	%ecx, -380(%ebp)
	movl	-392(%ebp), %eax
	movl	%eax, -352(%ebp)
	movl	$0, -348(%ebp)
.L2349:
	movl	-348(%ebp), %eax
	cmpl	-352(%ebp), %eax
	je	.L2348
	movl	-348(%ebp), %edx
	movl	-380(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -348(%ebp)
	jmp	.L2349
.L2348:
	leal	-420(%ebp), %eax
	movl	%eax, -344(%ebp)
	movl	16(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-344(%ebp), %eax
	movl	%edx, (%eax)
	movl	-344(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-344(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-344(%ebp), %eax
	movl	(%eax), %edx
	movl	-344(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -336(%ebp)
	cmpl	$0, -336(%ebp)
	jns	.L2350
	movl	$0, -340(%ebp)
	jmp	.L2351
.L2350:
	movl	-336(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -340(%ebp)
.L2351:
	movl	-344(%ebp), %edx
	movl	-340(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-408(%ebp), %eax
	movl	%eax, -376(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -564(%ebp)
	movl	-564(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -564(%ebp)
	movl	-564(%ebp), %ecx
	movl	%ecx, -372(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	$0, -328(%ebp)
.L2353:
	movl	-328(%ebp), %eax
	cmpl	-332(%ebp), %eax
	je	.L2352
	movl	-328(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -328(%ebp)
	jmp	.L2353
.L2352:
	movzbl	24(%ebp), %eax
	movb	%al, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -385(%ebp)
	cmpb	$10, -385(%ebp)
	ja	.L2354
	movzbl	-385(%ebp), %eax
	movl	.L2359(,%eax,4), %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L2359:
	.long	.L2355
	.long	.L2355
	.long	.L2356
	.long	.L2354
	.long	.L2357
	.long	.L2357
	.long	.L2357
	.long	.L2357
	.long	.L2354
	.long	.L2358
	.long	.L2355
	.text
.L2355:
	movl	%esp, %eax
	movl	%eax, -536(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %ecx
	movl	%ecx, -324(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -320(%ebp)
	movl	$0, -316(%ebp)
.L2361:
	movl	-316(%ebp), %eax
	cmpl	-320(%ebp), %eax
	je	.L2360
	movl	-316(%ebp), %edx
	movl	-324(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -316(%ebp)
	jmp	.L2361
.L2360:
	movl	-324(%ebp), %eax
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-536(%ebp), %esp
	jmp	.L2362
.L2357:
	movl	%esp, %eax
	movl	%eax, -532(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -556(%ebp)
	movl	-556(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -556(%ebp)
	movl	-556(%ebp), %ecx
	movl	%ecx, -312(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	$0, -304(%ebp)
.L2364:
	movl	-304(%ebp), %eax
	cmpl	-308(%ebp), %eax
	je	.L2363
	movl	-304(%ebp), %edx
	movl	-312(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -304(%ebp)
	jmp	.L2364
.L2363:
	movl	-312(%ebp), %eax
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-532(%ebp), %esp
	jmp	.L2362
.L2358:
	movl	%esp, %eax
	movl	%eax, -528(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -552(%ebp)
	movl	-552(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -552(%ebp)
	movl	-552(%ebp), %ecx
	movl	%ecx, -300(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -296(%ebp)
	movl	$0, -292(%ebp)
.L2366:
	movl	-292(%ebp), %eax
	cmpl	-296(%ebp), %eax
	je	.L2365
	movl	-292(%ebp), %edx
	movl	-300(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -292(%ebp)
	jmp	.L2366
.L2365:
	movl	-300(%ebp), %edx
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-528(%ebp), %esp
	leal	-420(%ebp), %eax
	movl	%eax, -284(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -272(%ebp)
	movl	-272(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2367
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -280(%ebp)
	jmp	.L2368
.L2367:
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -280(%ebp)
.L2368:
	movl	-284(%ebp), %eax
	movl	(%eax), %eax
	subl	-280(%ebp), %eax
	movl	%eax, -268(%ebp)
	movl	-268(%ebp), %eax
	movl	%eax, -276(%ebp)
	movl	-276(%ebp), %eax
	movl	%eax, -288(%ebp)
	movl	-288(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$2, (%eax,%edx)
	jmp	.L2362
.L2356:
	movl	%esp, %eax
	movl	%eax, -524(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -548(%ebp)
	movl	-548(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -548(%ebp)
	movl	-548(%ebp), %ecx
	movl	%ecx, -264(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -260(%ebp)
	movl	$0, -256(%ebp)
.L2370:
	movl	-256(%ebp), %eax
	cmpl	-260(%ebp), %eax
	je	.L2369
	movl	-256(%ebp), %edx
	movl	-264(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -256(%ebp)
	jmp	.L2370
.L2369:
	movl	-264(%ebp), %edx
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-524(%ebp), %esp
	leal	-420(%ebp), %eax
	movl	%eax, -248(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2371
	movl	-236(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -244(%ebp)
	jmp	.L2372
.L2371:
	movl	-236(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -244(%ebp)
.L2372:
	movl	-248(%ebp), %eax
	movl	(%eax), %eax
	subl	-244(%ebp), %eax
	movl	%eax, -232(%ebp)
	movl	-232(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-240(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-252(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$3, (%eax,%edx)
	jmp	.L2362
.L2354:
	movl	-392(%ebp), %eax
	movl	%eax, -384(%ebp)
	movl	-380(%ebp), %eax
	movl	%eax, -448(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -444(%ebp)
	movzbl	20(%ebp), %eax
	movb	%al, 20(%esp)
	movl	$0, 16(%esp)
	movb	$0, 12(%esp)
	leal	-448(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-437(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__float_to_unsigned
	movzbl	-437(%ebp), %eax
	movb	%al, -386(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -216(%ebp)
	movl	-216(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-216(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-224(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -220(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2373
	movl	$_UI00000000, %eax
	movl	$12355, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2373:
	movl	-220(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$2, (%eax,%edx)
	leal	-436(%ebp), %eax
	movl	%eax, -212(%ebp)
	movl	16(%ebp), %eax
	leal	-2(%eax), %edx
	movl	-212(%ebp), %eax
	movl	%edx, (%eax)
	movl	-212(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-212(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-212(%ebp), %eax
	movl	(%eax), %edx
	movl	-212(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -204(%ebp)
	cmpl	$0, -204(%ebp)
	jns	.L2374
	movl	$0, -208(%ebp)
	jmp	.L2375
.L2374:
	movl	-204(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -208(%ebp)
.L2375:
	movl	-212(%ebp), %edx
	movl	-208(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-424(%ebp), %eax
	movl	%eax, -368(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -200(%ebp)
	leal	-436(%ebp), %eax
	movl	%eax, -196(%ebp)
	movl	-200(%ebp), %eax
	movl	(%eax), %edx
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	-192(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-196(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-188(%ebp), %edx
	movl	-200(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2376
	movl	$_UI00000000, %eax
	movl	$12356, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2376:
	leal	-464(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	16(%ebp), %eax
	leal	-2(%eax), %edx
	movl	-180(%ebp), %eax
	movl	%edx, (%eax)
	movl	-180(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-180(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-180(%ebp), %eax
	movl	(%eax), %edx
	movl	-180(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -172(%ebp)
	cmpl	$0, -172(%ebp)
	jns	.L2377
	movl	$0, -176(%ebp)
	jmp	.L2378
.L2377:
	movl	-172(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -176(%ebp)
.L2378:
	movl	-180(%ebp), %edx
	movl	-176(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-452(%ebp), %eax
	movl	%eax, -184(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -168(%ebp)
	leal	-464(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-168(%ebp), %eax
	movl	(%eax), %edx
	movl	-164(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -160(%ebp)
	movl	-160(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	-160(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-164(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-156(%ebp), %edx
	movl	-168(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2379
	movl	$_UI00000000, %eax
	movl	$12356, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2379:
	leal	-472(%ebp), %eax
	movl	%eax, -148(%ebp)
	movl	-156(%ebp), %edx
	movl	-380(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -144(%ebp)
	movl	-144(%ebp), %eax
	movl	%eax, -472(%ebp)
	leal	-488(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	-148(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -140(%ebp)
	leal	-464(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%edx, (%eax)
	movl	-136(%ebp), %eax
	movl	4(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-136(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-140(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-136(%ebp), %eax
	movl	12(%eax), %edx
	movl	-140(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-472(%ebp), %eax
	movl	%eax, -152(%ebp)
.L2383:
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-424(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2380
	movl	-152(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-188(%ebp), %edx
	movl	-372(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-368(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	cmpb	$3, -386(%ebp)
	je	.L2381
	jmp	.L2401
.L2380:
	movl	$_UI00000000, %eax
	movl	$12356, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2383
.L2381:
	leal	-404(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2384
	movl	-116(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -124(%ebp)
	jmp	.L2385
.L2384:
	movl	-116(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -124(%ebp)
.L2385:
	movl	-128(%ebp), %eax
	movl	(%eax), %eax
	subl	-124(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %edx
	movl	-380(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	jne	.L2386
	movl	%esp, %eax
	movl	%eax, -520(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -544(%ebp)
	movl	-544(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -544(%ebp)
	movl	-544(%ebp), %ecx
	movl	%ecx, -108(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	$0, -100(%ebp)
.L2388:
	movl	-100(%ebp), %eax
	cmpl	-104(%ebp), %eax
	je	.L2387
	movl	-100(%ebp), %edx
	movl	-108(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -100(%ebp)
	jmp	.L2388
.L2387:
	movl	-108(%ebp), %edx
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-520(%ebp), %esp
	leal	-420(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2389
	movl	-80(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -88(%ebp)
	jmp	.L2390
.L2389:
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -88(%ebp)
.L2390:
	movl	-92(%ebp), %eax
	movl	(%eax), %eax
	subl	-88(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$3, (%eax,%edx)
	jmp	.L2362
.L2386:
	call	__ghdl_stack2_mark
	movl	%eax, -72(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -376(%ebp)
	movl	-372(%ebp), %eax
	movl	%eax, -504(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -500(%ebp)
	leal	-504(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-496(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPMiO1
	leal	-496(%ebp), %eax
	movl	%eax, -68(%ebp)
.L2393:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-408(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2392
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L2362
.L2392:
	movl	$_UI00000000, %eax
	movl	$12364, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2393
.L2401:
	leal	-404(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-404(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2394
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L2395
.L2394:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L2395:
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	subl	-56(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %edx
	movl	-380(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	cmpb	$3, %al
	jne	.L2362
	movl	%esp, %eax
	movl	%eax, -516(%ebp)
	movl	-376(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	24(%esp), %eax
	movl	%eax, -540(%ebp)
	movl	-540(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -540(%ebp)
	movl	-540(%ebp), %ecx
	movl	%ecx, -40(%ebp)
	movl	-408(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	$0, -32(%ebp)
.L2397:
	movl	-32(%ebp), %eax
	cmpl	-36(%ebp), %eax
	je	.L2396
	movl	-32(%ebp), %edx
	movl	-40(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -32(%ebp)
	jmp	.L2397
.L2396:
	movl	-40(%ebp), %edx
	movl	-372(%ebp), %ecx
	movl	-376(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-516(%ebp), %esp
	leal	-420(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2398
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2399
.L2398:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2399:
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	subl	-20(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %edx
	movl	-372(%ebp), %eax
	movb	$2, (%eax,%edx)
.L2362:
	movl	-408(%ebp), %eax
	movl	%eax, -376(%ebp)
	movl	-372(%ebp), %eax
	movl	%eax, -512(%ebp)
	leal	-420(%ebp), %eax
	movl	%eax, -508(%ebp)
	leal	-512(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_signedO1, .-ahir_ieee_proposed__float_pkg__to_signedO1
.globl ahir_ieee_proposed__float_pkg__to_unsignedO2
	.type	ahir_ieee_proposed__float_pkg__to_unsignedO2, @function
ahir_ieee_proposed__float_pkg__to_unsignedO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-56(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-32(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$0, -20(%ebp)
.L2404:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L2403
	movl	-20(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -20(%ebp)
	jmp	.L2404
.L2403:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L2405
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -64(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2409
.L2405:
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movl	%edx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_unsignedO1
	leal	-72(%ebp), %eax
	movl	%eax, -8(%ebp)
.L2408:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2407
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-36(%ebp), %ecx
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2409
.L2407:
	movl	$_UI00000000, %eax
	movl	$12389, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2408
.L2409:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_unsignedO2, .-ahir_ieee_proposed__float_pkg__to_unsignedO2
.globl ahir_ieee_proposed__float_pkg__to_signedO2
	.type	ahir_ieee_proposed__float_pkg__to_signedO2, @function
ahir_ieee_proposed__float_pkg__to_signedO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-56(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	movl	-28(%ebp), %eax
	movl	4(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-32(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-28(%ebp), %eax
	movl	12(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	$0, -20(%ebp)
.L2412:
	movl	-20(%ebp), %eax
	cmpl	-24(%ebp), %eax
	je	.L2411
	movl	-20(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -20(%ebp)
	jmp	.L2412
.L2411:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jne	.L2413
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -64(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -60(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2417
.L2413:
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movl	%edx, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_signedO1
	leal	-72(%ebp), %eax
	movl	%eax, -8(%ebp)
.L2416:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2415
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-36(%ebp), %ecx
	movl	-40(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-44(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2417
.L2415:
	movl	$_UI00000000, %eax
	movl	$12410, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2416
.L2417:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_signedO2, .-ahir_ieee_proposed__float_pkg__to_signedO2
.globl ahir_ieee_proposed__float_pkg__to_real
	.type	ahir_ieee_proposed__float_pkg__to_real, @function
ahir_ieee_proposed__float_pkg__to_real:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$372, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2419
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -216(%ebp)
	jmp	.L2420
.L2419:
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -216(%ebp)
.L2420:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2421
	movl	-204(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
	jmp	.L2422
.L2421:
	movl	-204(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -212(%ebp)
.L2422:
	movl	-212(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -264(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -196(%ebp)
	movl	-196(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2423
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -200(%ebp)
	jmp	.L2424
.L2423:
	movl	-196(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -200(%ebp)
.L2424:
	movl	-200(%ebp), %eax
	movl	%eax, -260(%ebp)
	fldl	.LC0
	fstpl	-256(%ebp)
	movl	$-2147483648, -248(%ebp)
	movl	$-2147483648, -244(%ebp)
	fldz
	fstpl	-240(%ebp)
	movb	$0, -225(%ebp)
	leal	-280(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-260(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-192(%ebp), %eax
	movl	%edx, (%eax)
	movl	-192(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-192(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-192(%ebp), %eax
	movl	(%eax), %edx
	movl	-192(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -184(%ebp)
	cmpl	$0, -184(%ebp)
	jns	.L2425
	movl	$0, -188(%ebp)
	jmp	.L2426
.L2425:
	movl	-184(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -188(%ebp)
.L2426:
	movl	-192(%ebp), %edx
	movl	-188(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-268(%ebp), %eax
	movl	%eax, -224(%ebp)
	movl	-224(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -356(%ebp)
	movl	-356(%ebp), %edx
	movl	%edx, -220(%ebp)
	movl	-268(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	$0, -176(%ebp)
.L2428:
	movl	-176(%ebp), %eax
	cmpl	-180(%ebp), %eax
	je	.L2427
	movl	-176(%ebp), %edx
	movl	-220(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -176(%ebp)
	jmp	.L2428
.L2427:
	movzbl	12(%ebp), %eax
	movb	%al, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -225(%ebp)
	cmpb	$10, -225(%ebp)
	ja	.L2429
	movsbl	-225(%ebp),%ecx
	movl	$1, %eax
	movl	%eax, %edx
	sall	%cl, %edx
	movl	%edx, -360(%ebp)
	movl	-360(%ebp), %eax
	andl	$1123, %eax
	testl	%eax, %eax
	jne	.L2430
	movl	-360(%ebp), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L2432
	movl	-360(%ebp), %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L2431
	jmp	.L2429
.L2430:
	fldz
	fstpl	-352(%ebp)
	jmp	.L2433
.L2431:
	fldl	.LC0
	fstpl	-352(%ebp)
	jmp	.L2433
.L2432:
	fldl	.LC5
	fstpl	-352(%ebp)
	jmp	.L2433
.L2429:
	movl	-260(%ebp), %eax
	subl	$1, %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	subl	$1, %eax
	movl	%eax, -244(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -168(%ebp)
	movl	-260(%ebp), %eax
	movl	%eax, -156(%ebp)
	movl	-168(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -152(%ebp)
	movl	-168(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2434
	movl	-152(%ebp), %eax
	movl	-156(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -160(%ebp)
	jmp	.L2435
.L2434:
	movl	-156(%ebp), %eax
	movl	-152(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -160(%ebp)
.L2435:
	movl	-160(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-160(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-168(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -164(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2436
	movl	$_UI00000000, %eax
	movl	$12446, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2436:
	movl	-164(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-172(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$2, %al
	jne	.L2437
	fld1
	fstpl	-256(%ebp)
	jmp	.L2438
.L2437:
	fld1
	fchs
	fstpl	-256(%ebp)
.L2438:
	movl	$0, -148(%ebp)
	movl	-264(%ebp), %eax
	subl	$1, %eax
	movl	%eax, -144(%ebp)
	movl	-148(%ebp), %eax
	cmpl	-144(%ebp), %eax
	jg	.L2439
.L2444:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -136(%ebp)
	movl	-148(%ebp), %eax
	notl	%eax
	movl	%eax, -124(%ebp)
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -120(%ebp)
	movl	-136(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2440
	movl	-120(%ebp), %eax
	movl	-124(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -128(%ebp)
	jmp	.L2441
.L2440:
	movl	-124(%ebp), %eax
	movl	-120(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -128(%ebp)
.L2441:
	movl	-128(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-128(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-136(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -132(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2442
	movl	$_UI00000000, %eax
	movl	$12453, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2442:
	movl	-132(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %edx
	movl	-140(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	cmpb	$3, %al
	jne	.L2443
	movl	-148(%ebp), %eax
	notl	%eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fldl	-240(%ebp)
	faddp	%st, %st(1)
	fstpl	-240(%ebp)
.L2443:
	movl	-148(%ebp), %eax
	cmpl	-144(%ebp), %eax
	je	.L2439
	addl	$1, -148(%ebp)
	jmp	.L2444
.L2439:
	cmpb	$8, -225(%ebp)
	sete	%al
	movb	%al, -105(%ebp)
	cmpb	$0, -105(%ebp)
	jne	.L2445
	cmpb	$3, -225(%ebp)
	sete	%al
	movb	%al, -105(%ebp)
.L2445:
	movzbl	-105(%ebp), %eax
	movb	%al, -113(%ebp)
	cmpb	$0, -113(%ebp)
	jne	.L2446
	movzbl	16(%ebp), %eax
	xorl	$1, %eax
	movb	%al, -113(%ebp)
.L2446:
	cmpb	$0, -113(%ebp)
	je	.L2447
	leal	-296(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-260(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-104(%ebp), %eax
	movl	%edx, (%eax)
	movl	-104(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-104(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-104(%ebp), %eax
	movl	(%eax), %edx
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -96(%ebp)
	cmpl	$0, -96(%ebp)
	jns	.L2448
	movl	$0, -100(%ebp)
	jmp	.L2449
.L2448:
	movl	-96(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -100(%ebp)
.L2449:
	movl	-104(%ebp), %edx
	movl	-100(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-284(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -92(%ebp)
	leal	-296(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-92(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-88(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L2450
	movl	$_UI00000000, %eax
	movl	$12459, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2450:
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-84(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-88(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-80(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L2451
	movl	$_UI00000000, %eax
	movl	$12459, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2451:
	leal	-304(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	addl	-80(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, -304(%ebp)
	leal	-320(%ebp), %eax
	movl	%eax, -300(%ebp)
	movl	-72(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	leal	-296(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	4(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-64(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-60(%ebp), %eax
	movl	12(%eax), %edx
	movl	-64(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-304(%ebp), %eax
	movl	%eax, -76(%ebp)
.L2455:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-268(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2452
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-220(%ebp), %ecx
	movl	-224(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-280(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -48(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L2453
	jmp	.L2454
.L2452:
	movl	$_UI00000000, %eax
	movl	$12459, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2455
.L2453:
	movl	$_UI00000000, %eax
	movl	$12460, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2454:
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	leal	-280(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -28(%ebp)
	movl	-28(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-36(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -32(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L2456
	movl	$_UI00000000, %eax
	movl	$12460, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L2456:
	movl	-32(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-56(%ebp), %ebx
	movl	-40(%ebp), %edx
	movl	-220(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-220(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	leal	-328(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-220(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %eax
	movl	%eax, -328(%ebp)
	leal	-344(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	leal	-280(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, (%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-16(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-12(%ebp), %eax
	movl	12(%eax), %edx
	movl	-16(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-328(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	addl	$1, %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fmull	-256(%ebp)
	fldl	-240(%ebp)
	fld1
	faddp	%st, %st(1)
	fmulp	%st, %st(1)
	fstpl	-256(%ebp)
	jmp	.L2457
.L2447:
	movl	$1, %eax
	subl	-244(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	-248(%ebp), %eax
	movl	%eax, 8(%esp)
	fldl	.LC3
	fstpl	(%esp)
	call	__ghdl_real_exp
	fmull	-256(%ebp)
	fmull	-240(%ebp)
	fstpl	-256(%ebp)
.L2457:
	fldl	-256(%ebp)
	fstpl	-352(%ebp)
.L2433:
	fldl	-352(%ebp)
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_real, .-ahir_ieee_proposed__float_pkg__to_real
.globl ahir_ieee_proposed__float_pkg__realtobitsO1
	.type	ahir_ieee_proposed__float_pkg__realtobitsO1, @function
ahir_ieee_proposed__float_pkg__realtobitsO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	$0, -20(%ebp)
.L2461:
	cmpl	$64, -20(%ebp)
	je	.L2460
	movl	-20(%ebp), %eax
	movb	$0, -84(%ebp,%eax)
	addl	$1, -20(%ebp)
	jmp	.L2461
.L2460:
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	$52, 16(%esp)
	movl	$11, 12(%esp)
	fldl	-120(%ebp)
	fstpl	4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-92(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2463:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$64, %eax
	jne	.L2462
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	$64, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float64__STB, -104(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2462:
	movl	$_UI00000000, %eax
	movl	$12475, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2463
	.size	ahir_ieee_proposed__float_pkg__realtobitsO1, .-ahir_ieee_proposed__float_pkg__realtobitsO1
.globl ahir_ieee_proposed__float_pkg__bitstorealO1
	.type	ahir_ieee_proposed__float_pkg__bitstorealO1, @function
ahir_ieee_proposed__float_pkg__bitstorealO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	movl	$0, -12(%ebp)
.L2467:
	cmpl	$64, -12(%ebp)
	je	.L2466
	movl	-12(%ebp), %eax
	movb	$0, -76(%ebp,%eax)
	addl	$1, -12(%ebp)
	jmp	.L2467
.L2466:
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	$52, 12(%esp)
	movl	$11, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-84(%ebp), %eax
	movl	%eax, -4(%ebp)
.L2469:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$64, %eax
	jne	.L2468
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	$64, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-76(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float64__STB, -88(%ebp)
	movb	$1, 8(%esp)
	movb	$1, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_real
	leave
	ret
.L2468:
	movl	$_UI00000000, %eax
	movl	$12484, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2469
	.size	ahir_ieee_proposed__float_pkg__bitstorealO1, .-ahir_ieee_proposed__float_pkg__bitstorealO1
	.section	.rodata
	.align 4
	.type	_UI00000016.18284, @object
	.size	_UI00000016.18284, 12
_UI00000016.18284:
	.long	_UI00000000
	.long	12498
	.long	7
	.align 32
	.type	_UI00000017.18286, @object
	.size	_UI00000017.18286, 46
_UI00000017.18286:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	84
	.byte	79
	.byte	95
	.byte	48
	.byte	49
	.byte	58
	.byte	32
	.byte	110
	.byte	117
	.byte	108
	.byte	108
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	78
	.byte	85
	.byte	76
	.byte	76
	.align 4
	.type	ahir_ieee_proposed__float_pkg__to_01__U1__STB.18287, @object
	.size	ahir_ieee_proposed__float_pkg__to_01__U1__STB.18287, 16
ahir_ieee_proposed__float_pkg__to_01__U1__STB.18287:
	.long	1
	.long	46
	.byte	0
	.zero	3
	.long	46
	.text
.globl ahir_ieee_proposed__float_pkg__to_01
	.type	ahir_ieee_proposed__float_pkg__to_01, @function
ahir_ieee_proposed__float_pkg__to_01:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$248, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L2473:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L2472
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L2473
.L2472:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2474
	movl	$_UI00000017.18286, %eax
	movl	%eax, -112(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__to_01__U1__STB.18287, -108(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000016.18284, 8(%esp)
	movb	$1, 4(%esp)
	leal	-112(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -120(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -116(%ebp)
	leal	-120(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2478
.L2474:
	call	__ghdl_stack2_mark
	movl	%eax, -60(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-136(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-144(%ebp), %eax
	movl	%eax, -52(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -144(%ebp)
	leal	-160(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, (%eax)
	movl	-40(%ebp), %eax
	movl	4(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-40(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-44(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-40(%ebp), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 12(%eax)
	movzbl	16(%ebp), %eax
	movb	%al, 8(%esp)
	leal	-144(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-128(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_01O1
	leal	-168(%ebp), %eax
	movl	%eax, -36(%ebp)
	leal	-128(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -168(%ebp)
	leal	-184(%ebp), %eax
	movl	%eax, -164(%ebp)
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, (%eax)
	movl	-24(%ebp), %eax
	movl	4(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-24(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-28(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-24(%ebp), %eax
	movl	12(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-192(%ebp), %eax
	movl	%eax, -20(%ebp)
	leal	-168(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -192(%ebp)
	leal	-208(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-192(%ebp), %eax
	movl	%eax, -56(%ebp)
.L2477:
	movl	-56(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2476
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-84(%ebp), %ecx
	movl	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-60(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -216(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -212(%ebp)
	leal	-216(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2478
.L2476:
	movl	$_UI00000000, %eax
	movl	$12504, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2477
.L2478:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_01, .-ahir_ieee_proposed__float_pkg__to_01
.globl ahir_ieee_proposed__float_pkg__is_x
	.type	ahir_ieee_proposed__float_pkg__is_x, @function
ahir_ieee_proposed__float_pkg__is_x:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__is_xO2
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__is_x, .-ahir_ieee_proposed__float_pkg__is_x
	.section	.rodata
	.align 4
	.type	_UI00000018.18419, @object
	.size	_UI00000018.18419, 12
_UI00000018.18419:
	.long	_UI00000000
	.long	12519
	.long	7
	.align 32
	.type	_UI00000019.18421, @object
	.size	_UI00000019.18421, 47
_UI00000019.18421:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	84
	.byte	79
	.byte	95
	.byte	88
	.byte	48
	.byte	49
	.byte	58
	.byte	32
	.byte	110
	.byte	117
	.byte	108
	.byte	108
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	78
	.byte	85
	.byte	76
	.byte	76
	.align 4
	.type	ahir_ieee_proposed__float_pkg__to_x01__U1__STB.18422, @object
	.size	ahir_ieee_proposed__float_pkg__to_x01__U1__STB.18422, 16
ahir_ieee_proposed__float_pkg__to_x01__U1__STB.18422:
	.long	1
	.long	47
	.byte	0
	.zero	3
	.long	47
	.text
.globl ahir_ieee_proposed__float_pkg__to_x01
	.type	ahir_ieee_proposed__float_pkg__to_x01, @function
ahir_ieee_proposed__float_pkg__to_x01:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2483:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2482
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2483
.L2482:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2484
	movl	$_UI00000019.18421, %eax
	movl	%eax, -80(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__to_x01__U1__STB.18422, -76(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000018.18419, 8(%esp)
	movb	$1, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -88(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -84(%ebp)
	leal	-88(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2488
.L2484:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_x01O1
	leal	-112(%ebp), %eax
	movl	%eax, -20(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	leal	-128(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-112(%ebp), %eax
	movl	%eax, -24(%ebp)
.L2487:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2486
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2488
.L2486:
	movl	$_UI00000000, %eax
	movl	$12525, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2487
.L2488:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_x01, .-ahir_ieee_proposed__float_pkg__to_x01
	.section	.rodata
	.align 4
	.type	_UI0000001a.18522, @object
	.size	_UI0000001a.18522, 12
_UI0000001a.18522:
	.long	_UI00000000
	.long	12534
	.long	7
	.align 32
	.type	_UI0000001b.18524, @object
	.size	_UI0000001b.18524, 48
_UI0000001b.18524:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	84
	.byte	79
	.byte	95
	.byte	88
	.byte	48
	.byte	49
	.byte	90
	.byte	58
	.byte	32
	.byte	110
	.byte	117
	.byte	108
	.byte	108
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	78
	.byte	85
	.byte	76
	.byte	76
	.align 4
	.type	ahir_ieee_proposed__float_pkg__to_x01z__U1__STB.18525, @object
	.size	ahir_ieee_proposed__float_pkg__to_x01z__U1__STB.18525, 16
ahir_ieee_proposed__float_pkg__to_x01z__U1__STB.18525:
	.long	1
	.long	48
	.byte	0
	.zero	3
	.long	48
	.text
.globl ahir_ieee_proposed__float_pkg__to_x01z
	.type	ahir_ieee_proposed__float_pkg__to_x01z, @function
ahir_ieee_proposed__float_pkg__to_x01z:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2491:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2490
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2491
.L2490:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2492
	movl	$_UI0000001b.18524, %eax
	movl	%eax, -80(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__to_x01z__U1__STB.18525, -76(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000001a.18522, 8(%esp)
	movb	$1, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -88(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -84(%ebp)
	leal	-88(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2496
.L2492:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_x01zO1
	leal	-112(%ebp), %eax
	movl	%eax, -20(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	leal	-128(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-112(%ebp), %eax
	movl	%eax, -24(%ebp)
.L2495:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2494
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2496
.L2494:
	movl	$_UI00000000, %eax
	movl	$12540, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2495
.L2496:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_x01z, .-ahir_ieee_proposed__float_pkg__to_x01z
	.section	.rodata
	.align 4
	.type	_UI0000001c.18625, @object
	.size	_UI0000001c.18625, 12
_UI0000001c.18625:
	.long	_UI00000000
	.long	12549
	.long	7
	.align 32
	.type	_UI0000001d.18627, @object
	.size	_UI0000001d.18627, 48
_UI0000001d.18627:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	84
	.byte	79
	.byte	95
	.byte	85
	.byte	88
	.byte	48
	.byte	49
	.byte	58
	.byte	32
	.byte	110
	.byte	117
	.byte	108
	.byte	108
	.byte	32
	.byte	100
	.byte	101
	.byte	116
	.byte	101
	.byte	99
	.byte	116
	.byte	101
	.byte	100
	.byte	44
	.byte	32
	.byte	114
	.byte	101
	.byte	116
	.byte	117
	.byte	114
	.byte	110
	.byte	105
	.byte	110
	.byte	103
	.byte	32
	.byte	78
	.byte	85
	.byte	76
	.byte	76
	.align 4
	.type	ahir_ieee_proposed__float_pkg__to_ux01__U1__STB.18628, @object
	.size	ahir_ieee_proposed__float_pkg__to_ux01__U1__STB.18628, 16
ahir_ieee_proposed__float_pkg__to_ux01__U1__STB.18628:
	.long	1
	.long	48
	.byte	0
	.zero	3
	.long	48
	.text
.globl ahir_ieee_proposed__float_pkg__to_ux01
	.type	ahir_ieee_proposed__float_pkg__to_ux01, @function
ahir_ieee_proposed__float_pkg__to_ux01:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -148(%ebp)
	movl	-148(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2499:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2498
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2499
.L2498:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	jg	.L2500
	movl	$_UI0000001d.18627, %eax
	movl	%eax, -80(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__to_ux01__U1__STB.18628, -76(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000001c.18625, 8(%esp)
	movb	$1, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	$ahir_ieee_proposed__float_pkg__nafp, %eax
	movl	%eax, -88(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nafp__OT__STB, -84(%ebp)
	leal	-88(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2504
.L2500:
	call	__ghdl_stack2_mark
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-104(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-104(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__to_ux01O1
	leal	-112(%ebp), %eax
	movl	%eax, -20(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -112(%ebp)
	leal	-128(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, (%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-12(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-8(%ebp), %eax
	movl	12(%eax), %edx
	movl	-12(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-112(%ebp), %eax
	movl	%eax, -24(%ebp)
.L2503:
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2502
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -136(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-136(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	jmp	.L2504
.L2502:
	movl	$_UI00000000, %eax
	movl	$12555, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2503
.L2504:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_ux01, .-ahir_ieee_proposed__float_pkg__to_ux01
.globl ahir_ieee_proposed__float_pkg__OPPlO1
	.type	ahir_ieee_proposed__float_pkg__OPPlO1, @function
ahir_ieee_proposed__float_pkg__OPPlO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPPlO1, .-ahir_ieee_proposed__float_pkg__OPPlO1
.globl ahir_ieee_proposed__float_pkg__OPMiO2
	.type	ahir_ieee_proposed__float_pkg__OPMiO2, @function
ahir_ieee_proposed__float_pkg__OPMiO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__subtract
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPMiO2, .-ahir_ieee_proposed__float_pkg__OPMiO2
.globl ahir_ieee_proposed__float_pkg__OPMuO1
	.type	ahir_ieee_proposed__float_pkg__OPMuO1, @function
ahir_ieee_proposed__float_pkg__OPMuO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__multiply
	leal	-16(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__OPMuO1, .-ahir_ieee_proposed__float_pkg__OPMuO1
.globl ahir_ieee_proposed__float_pkg__OPPlO2
	.type	ahir_ieee_proposed__float_pkg__OPPlO2, @function
ahir_ieee_proposed__float_pkg__OPPlO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2513:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2512
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2513
.L2512:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2514
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2515
.L2514:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2515:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2516
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2517
.L2516:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2517:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2519:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2518
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2518:
	movl	$_UI00000000, %eax
	movl	$12581, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2519
	.size	ahir_ieee_proposed__float_pkg__OPPlO2, .-ahir_ieee_proposed__float_pkg__OPPlO2
.globl ahir_ieee_proposed__float_pkg__OPPlO3
	.type	ahir_ieee_proposed__float_pkg__OPPlO3, @function
ahir_ieee_proposed__float_pkg__OPPlO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2523:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2522
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2523
.L2522:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2524
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2525
.L2524:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2525:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2526
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2527
.L2526:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2527:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2529:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2528
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2528:
	movl	$_UI00000000, %eax
	movl	$12588, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2529
	.size	ahir_ieee_proposed__float_pkg__OPPlO3, .-ahir_ieee_proposed__float_pkg__OPPlO3
.globl ahir_ieee_proposed__float_pkg__OPPlO4
	.type	ahir_ieee_proposed__float_pkg__OPPlO4, @function
ahir_ieee_proposed__float_pkg__OPPlO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2533:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2532
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2533
.L2532:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2534
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2535
.L2534:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2535:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2536
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2537
.L2536:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2537:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2539:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2538
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2538:
	movl	$_UI00000000, %eax
	movl	$12595, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2539
	.size	ahir_ieee_proposed__float_pkg__OPPlO4, .-ahir_ieee_proposed__float_pkg__OPPlO4
.globl ahir_ieee_proposed__float_pkg__OPPlO5
	.type	ahir_ieee_proposed__float_pkg__OPPlO5, @function
ahir_ieee_proposed__float_pkg__OPPlO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2543:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2542
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2543
.L2542:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2544
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2545
.L2544:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2545:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2546
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2547
.L2546:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2547:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2549:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2548
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__add
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2548:
	movl	$_UI00000000, %eax
	movl	$12602, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2549
	.size	ahir_ieee_proposed__float_pkg__OPPlO5, .-ahir_ieee_proposed__float_pkg__OPPlO5
.globl ahir_ieee_proposed__float_pkg__OPMiO3
	.type	ahir_ieee_proposed__float_pkg__OPMiO3, @function
ahir_ieee_proposed__float_pkg__OPMiO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2553:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2552
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2553
.L2552:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2554
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2555
.L2554:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2555:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2556
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2557
.L2556:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2557:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2559:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2558
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__subtract
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2558:
	movl	$_UI00000000, %eax
	movl	$12609, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2559
	.size	ahir_ieee_proposed__float_pkg__OPMiO3, .-ahir_ieee_proposed__float_pkg__OPMiO3
.globl ahir_ieee_proposed__float_pkg__OPMiO4
	.type	ahir_ieee_proposed__float_pkg__OPMiO4, @function
ahir_ieee_proposed__float_pkg__OPMiO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2563:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2562
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2563
.L2562:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2564
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2565
.L2564:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2565:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2566
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2567
.L2566:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2567:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2569:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2568
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__subtract
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2568:
	movl	$_UI00000000, %eax
	movl	$12616, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2569
	.size	ahir_ieee_proposed__float_pkg__OPMiO4, .-ahir_ieee_proposed__float_pkg__OPMiO4
.globl ahir_ieee_proposed__float_pkg__OPMiO5
	.type	ahir_ieee_proposed__float_pkg__OPMiO5, @function
ahir_ieee_proposed__float_pkg__OPMiO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2573:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2572
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2573
.L2572:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2574
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2575
.L2574:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2575:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2576
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2577
.L2576:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2577:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2579:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2578
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__subtract
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2578:
	movl	$_UI00000000, %eax
	movl	$12623, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2579
	.size	ahir_ieee_proposed__float_pkg__OPMiO5, .-ahir_ieee_proposed__float_pkg__OPMiO5
.globl ahir_ieee_proposed__float_pkg__OPMiO6
	.type	ahir_ieee_proposed__float_pkg__OPMiO6, @function
ahir_ieee_proposed__float_pkg__OPMiO6:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2583:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2582
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2583
.L2582:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2584
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2585
.L2584:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2585:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2586
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2587
.L2586:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2587:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2589:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2588
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__subtract
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2588:
	movl	$_UI00000000, %eax
	movl	$12630, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2589
	.size	ahir_ieee_proposed__float_pkg__OPMiO6, .-ahir_ieee_proposed__float_pkg__OPMiO6
.globl ahir_ieee_proposed__float_pkg__OPMuO2
	.type	ahir_ieee_proposed__float_pkg__OPMuO2, @function
ahir_ieee_proposed__float_pkg__OPMuO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2593:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2592
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2593
.L2592:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2594
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2595
.L2594:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2595:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2596
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2597
.L2596:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2597:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2599:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2598
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__multiply
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2598:
	movl	$_UI00000000, %eax
	movl	$12637, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2599
	.size	ahir_ieee_proposed__float_pkg__OPMuO2, .-ahir_ieee_proposed__float_pkg__OPMuO2
.globl ahir_ieee_proposed__float_pkg__OPMuO3
	.type	ahir_ieee_proposed__float_pkg__OPMuO3, @function
ahir_ieee_proposed__float_pkg__OPMuO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2603:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2602
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2603
.L2602:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2604
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2605
.L2604:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2605:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2606
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2607
.L2606:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2607:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2609:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2608
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__multiply
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2608:
	movl	$_UI00000000, %eax
	movl	$12644, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2609
	.size	ahir_ieee_proposed__float_pkg__OPMuO3, .-ahir_ieee_proposed__float_pkg__OPMuO3
.globl ahir_ieee_proposed__float_pkg__OPMuO4
	.type	ahir_ieee_proposed__float_pkg__OPMuO4, @function
ahir_ieee_proposed__float_pkg__OPMuO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2613:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2612
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2613
.L2612:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2614
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2615
.L2614:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2615:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2616
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2617
.L2616:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2617:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2619:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2618
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__multiply
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2618:
	movl	$_UI00000000, %eax
	movl	$12651, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2619
	.size	ahir_ieee_proposed__float_pkg__OPMuO4, .-ahir_ieee_proposed__float_pkg__OPMuO4
.globl ahir_ieee_proposed__float_pkg__OPMuO5
	.type	ahir_ieee_proposed__float_pkg__OPMuO5, @function
ahir_ieee_proposed__float_pkg__OPMuO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L2623:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L2622
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L2623
.L2622:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2624
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L2625
.L2624:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L2625:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2626
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L2627
.L2626:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L2627:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L2629:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2628
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movb	$1, 24(%esp)
	movb	$1, 20(%esp)
	movl	$3, 16(%esp)
	movb	$0, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__multiply
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L2628:
	movl	$_UI00000000, %eax
	movl	$12658, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2629
	.size	ahir_ieee_proposed__float_pkg__OPMuO5, .-ahir_ieee_proposed__float_pkg__OPMuO5
.globl ahir_ieee_proposed__float_pkg__OPEqO2
	.type	ahir_ieee_proposed__float_pkg__OPEqO2, @function
ahir_ieee_proposed__float_pkg__OPEqO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2633:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2632
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2633
.L2632:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2634
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2635
.L2634:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2635:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2636
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2637
.L2636:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2637:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2639:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2638
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	leave
	ret
.L2638:
	movl	$_UI00000000, %eax
	movl	$12665, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2639
	.size	ahir_ieee_proposed__float_pkg__OPEqO2, .-ahir_ieee_proposed__float_pkg__OPEqO2
.globl ahir_ieee_proposed__float_pkg__OPNeO2
	.type	ahir_ieee_proposed__float_pkg__OPNeO2, @function
ahir_ieee_proposed__float_pkg__OPNeO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2643:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2642
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2643
.L2642:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2644
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2645
.L2644:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2645:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2646
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2647
.L2646:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2647:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2649:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2648
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ne
	leave
	ret
.L2648:
	movl	$_UI00000000, %eax
	movl	$12672, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2649
	.size	ahir_ieee_proposed__float_pkg__OPNeO2, .-ahir_ieee_proposed__float_pkg__OPNeO2
.globl ahir_ieee_proposed__float_pkg__OPGeO2
	.type	ahir_ieee_proposed__float_pkg__OPGeO2, @function
ahir_ieee_proposed__float_pkg__OPGeO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2653:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2652
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2653
.L2652:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2654
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2655
.L2654:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2655:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2656
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2657
.L2656:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2657:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2659:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2658
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ge
	leave
	ret
.L2658:
	movl	$_UI00000000, %eax
	movl	$12679, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2659
	.size	ahir_ieee_proposed__float_pkg__OPGeO2, .-ahir_ieee_proposed__float_pkg__OPGeO2
.globl ahir_ieee_proposed__float_pkg__OPLeO2
	.type	ahir_ieee_proposed__float_pkg__OPLeO2, @function
ahir_ieee_proposed__float_pkg__OPLeO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2663:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2662
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2663
.L2662:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2664
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2665
.L2664:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2665:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2666
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2667
.L2666:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2667:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2669:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2668
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__le
	leave
	ret
.L2668:
	movl	$_UI00000000, %eax
	movl	$12686, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2669
	.size	ahir_ieee_proposed__float_pkg__OPLeO2, .-ahir_ieee_proposed__float_pkg__OPLeO2
.globl ahir_ieee_proposed__float_pkg__OPGtO2
	.type	ahir_ieee_proposed__float_pkg__OPGtO2, @function
ahir_ieee_proposed__float_pkg__OPGtO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2673:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2672
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2673
.L2672:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2674
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2675
.L2674:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2675:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2676
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2677
.L2676:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2677:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2679:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2678
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	leave
	ret
.L2678:
	movl	$_UI00000000, %eax
	movl	$12693, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2679
	.size	ahir_ieee_proposed__float_pkg__OPGtO2, .-ahir_ieee_proposed__float_pkg__OPGtO2
.globl ahir_ieee_proposed__float_pkg__OPLtO2
	.type	ahir_ieee_proposed__float_pkg__OPLtO2, @function
ahir_ieee_proposed__float_pkg__OPLtO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2683:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2682
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2683
.L2682:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2684
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2685
.L2684:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2685:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2686
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2687
.L2686:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2687:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2689:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2688
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	leave
	ret
.L2688:
	movl	$_UI00000000, %eax
	movl	$12700, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2689
	.size	ahir_ieee_proposed__float_pkg__OPLtO2, .-ahir_ieee_proposed__float_pkg__OPLtO2
.globl ahir_ieee_proposed__float_pkg__OPEqO3
	.type	ahir_ieee_proposed__float_pkg__OPEqO3, @function
ahir_ieee_proposed__float_pkg__OPEqO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2693:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2692
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2693
.L2692:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2694
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2695
.L2694:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2695:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2696
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2697
.L2696:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2697:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2699:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2698
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	leave
	ret
.L2698:
	movl	$_UI00000000, %eax
	movl	$12707, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2699
	.size	ahir_ieee_proposed__float_pkg__OPEqO3, .-ahir_ieee_proposed__float_pkg__OPEqO3
.globl ahir_ieee_proposed__float_pkg__OPNeO3
	.type	ahir_ieee_proposed__float_pkg__OPNeO3, @function
ahir_ieee_proposed__float_pkg__OPNeO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2703:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2702
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2703
.L2702:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2704
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2705
.L2704:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2705:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2706
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2707
.L2706:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2707:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2709:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2708
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ne
	leave
	ret
.L2708:
	movl	$_UI00000000, %eax
	movl	$12714, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2709
	.size	ahir_ieee_proposed__float_pkg__OPNeO3, .-ahir_ieee_proposed__float_pkg__OPNeO3
.globl ahir_ieee_proposed__float_pkg__OPGeO3
	.type	ahir_ieee_proposed__float_pkg__OPGeO3, @function
ahir_ieee_proposed__float_pkg__OPGeO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2713:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2712
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2713
.L2712:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2714
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2715
.L2714:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2715:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2716
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2717
.L2716:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2717:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2719:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2718
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ge
	leave
	ret
.L2718:
	movl	$_UI00000000, %eax
	movl	$12721, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2719
	.size	ahir_ieee_proposed__float_pkg__OPGeO3, .-ahir_ieee_proposed__float_pkg__OPGeO3
.globl ahir_ieee_proposed__float_pkg__OPLeO3
	.type	ahir_ieee_proposed__float_pkg__OPLeO3, @function
ahir_ieee_proposed__float_pkg__OPLeO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2723:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2722
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2723
.L2722:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2724
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2725
.L2724:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2725:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2726
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2727
.L2726:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2727:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2729:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2728
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__le
	leave
	ret
.L2728:
	movl	$_UI00000000, %eax
	movl	$12728, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2729
	.size	ahir_ieee_proposed__float_pkg__OPLeO3, .-ahir_ieee_proposed__float_pkg__OPLeO3
.globl ahir_ieee_proposed__float_pkg__OPGtO3
	.type	ahir_ieee_proposed__float_pkg__OPGtO3, @function
ahir_ieee_proposed__float_pkg__OPGtO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2733:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2732
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2733
.L2732:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2734
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2735
.L2734:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2735:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2736
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2737
.L2736:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2737:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2739:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2738
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	leave
	ret
.L2738:
	movl	$_UI00000000, %eax
	movl	$12735, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2739
	.size	ahir_ieee_proposed__float_pkg__OPGtO3, .-ahir_ieee_proposed__float_pkg__OPGtO3
.globl ahir_ieee_proposed__float_pkg__OPLtO3
	.type	ahir_ieee_proposed__float_pkg__OPLtO3, @function
ahir_ieee_proposed__float_pkg__OPLtO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2743:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2742
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2743
.L2742:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2744
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2745
.L2744:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2745:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2746
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2747
.L2746:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2747:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2749:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2748
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	leave
	ret
.L2748:
	movl	$_UI00000000, %eax
	movl	$12742, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2749
	.size	ahir_ieee_proposed__float_pkg__OPLtO3, .-ahir_ieee_proposed__float_pkg__OPLtO3
.globl ahir_ieee_proposed__float_pkg__OPEqO4
	.type	ahir_ieee_proposed__float_pkg__OPEqO4, @function
ahir_ieee_proposed__float_pkg__OPEqO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2753:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2752
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2753
.L2752:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2754
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2755
.L2754:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2755:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2756
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2757
.L2756:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2757:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2759:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2758
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	leave
	ret
.L2758:
	movl	$_UI00000000, %eax
	movl	$12749, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2759
	.size	ahir_ieee_proposed__float_pkg__OPEqO4, .-ahir_ieee_proposed__float_pkg__OPEqO4
.globl ahir_ieee_proposed__float_pkg__OPNeO4
	.type	ahir_ieee_proposed__float_pkg__OPNeO4, @function
ahir_ieee_proposed__float_pkg__OPNeO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2763:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2762
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2763
.L2762:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2764
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2765
.L2764:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2765:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2766
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2767
.L2766:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2767:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2769:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2768
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ne
	leave
	ret
.L2768:
	movl	$_UI00000000, %eax
	movl	$12756, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2769
	.size	ahir_ieee_proposed__float_pkg__OPNeO4, .-ahir_ieee_proposed__float_pkg__OPNeO4
.globl ahir_ieee_proposed__float_pkg__OPGeO4
	.type	ahir_ieee_proposed__float_pkg__OPGeO4, @function
ahir_ieee_proposed__float_pkg__OPGeO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2773:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2772
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2773
.L2772:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2774
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2775
.L2774:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2775:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2776
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2777
.L2776:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2777:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2779:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2778
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ge
	leave
	ret
.L2778:
	movl	$_UI00000000, %eax
	movl	$12763, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2779
	.size	ahir_ieee_proposed__float_pkg__OPGeO4, .-ahir_ieee_proposed__float_pkg__OPGeO4
.globl ahir_ieee_proposed__float_pkg__OPLeO4
	.type	ahir_ieee_proposed__float_pkg__OPLeO4, @function
ahir_ieee_proposed__float_pkg__OPLeO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2783:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2782
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2783
.L2782:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2784
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2785
.L2784:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2785:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2786
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2787
.L2786:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2787:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2789:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2788
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__le
	leave
	ret
.L2788:
	movl	$_UI00000000, %eax
	movl	$12770, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2789
	.size	ahir_ieee_proposed__float_pkg__OPLeO4, .-ahir_ieee_proposed__float_pkg__OPLeO4
.globl ahir_ieee_proposed__float_pkg__OPGtO4
	.type	ahir_ieee_proposed__float_pkg__OPGtO4, @function
ahir_ieee_proposed__float_pkg__OPGtO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2793:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2792
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2793
.L2792:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2794
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2795
.L2794:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2795:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2796
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2797
.L2796:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2797:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2799:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2798
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	leave
	ret
.L2798:
	movl	$_UI00000000, %eax
	movl	$12777, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2799
	.size	ahir_ieee_proposed__float_pkg__OPGtO4, .-ahir_ieee_proposed__float_pkg__OPGtO4
.globl ahir_ieee_proposed__float_pkg__OPLtO4
	.type	ahir_ieee_proposed__float_pkg__OPLtO4, @function
ahir_ieee_proposed__float_pkg__OPLtO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2803:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2802
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2803
.L2802:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2804
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2805
.L2804:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2805:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2806
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2807
.L2806:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2807:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2809:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2808
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	leave
	ret
.L2808:
	movl	$_UI00000000, %eax
	movl	$12784, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2809
	.size	ahir_ieee_proposed__float_pkg__OPLtO4, .-ahir_ieee_proposed__float_pkg__OPLtO4
.globl ahir_ieee_proposed__float_pkg__OPEqO5
	.type	ahir_ieee_proposed__float_pkg__OPEqO5, @function
ahir_ieee_proposed__float_pkg__OPEqO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2813:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2812
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2813
.L2812:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2814
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2815
.L2814:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2815:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2816
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2817
.L2816:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2817:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2819:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2818
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__eq
	leave
	ret
.L2818:
	movl	$_UI00000000, %eax
	movl	$12791, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2819
	.size	ahir_ieee_proposed__float_pkg__OPEqO5, .-ahir_ieee_proposed__float_pkg__OPEqO5
.globl ahir_ieee_proposed__float_pkg__OPNeO5
	.type	ahir_ieee_proposed__float_pkg__OPNeO5, @function
ahir_ieee_proposed__float_pkg__OPNeO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2823:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2822
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2823
.L2822:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2824
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2825
.L2824:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2825:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2826
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2827
.L2826:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2827:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2829:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2828
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ne
	leave
	ret
.L2828:
	movl	$_UI00000000, %eax
	movl	$12798, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2829
	.size	ahir_ieee_proposed__float_pkg__OPNeO5, .-ahir_ieee_proposed__float_pkg__OPNeO5
.globl ahir_ieee_proposed__float_pkg__OPGeO5
	.type	ahir_ieee_proposed__float_pkg__OPGeO5, @function
ahir_ieee_proposed__float_pkg__OPGeO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2833:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2832
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2833
.L2832:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2834
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2835
.L2834:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2835:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2836
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2837
.L2836:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2837:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2839:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2838
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__ge
	leave
	ret
.L2838:
	movl	$_UI00000000, %eax
	movl	$12805, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2839
	.size	ahir_ieee_proposed__float_pkg__OPGeO5, .-ahir_ieee_proposed__float_pkg__OPGeO5
.globl ahir_ieee_proposed__float_pkg__OPLeO5
	.type	ahir_ieee_proposed__float_pkg__OPLeO5, @function
ahir_ieee_proposed__float_pkg__OPLeO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2843:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2842
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2843
.L2842:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2844
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2845
.L2844:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2845:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2846
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2847
.L2846:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2847:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2849:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2848
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__le
	leave
	ret
.L2848:
	movl	$_UI00000000, %eax
	movl	$12812, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2849
	.size	ahir_ieee_proposed__float_pkg__OPLeO5, .-ahir_ieee_proposed__float_pkg__OPLeO5
.globl ahir_ieee_proposed__float_pkg__OPGtO5
	.type	ahir_ieee_proposed__float_pkg__OPGtO5, @function
ahir_ieee_proposed__float_pkg__OPGtO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2853:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2852
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2853
.L2852:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2854
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2855
.L2854:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2855:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2856
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2857
.L2856:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2857:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2859:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2858
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gt
	leave
	ret
.L2858:
	movl	$_UI00000000, %eax
	movl	$12819, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2859
	.size	ahir_ieee_proposed__float_pkg__OPGtO5, .-ahir_ieee_proposed__float_pkg__OPGtO5
.globl ahir_ieee_proposed__float_pkg__OPLtO5
	.type	ahir_ieee_proposed__float_pkg__OPLtO5, @function
ahir_ieee_proposed__float_pkg__OPLtO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2863:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2862
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2863
.L2862:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2864
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2865
.L2864:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2865:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2866
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2867
.L2866:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2867:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2869:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2868
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movb	$1, 12(%esp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__lt
	leave
	ret
.L2868:
	movl	$_UI00000000, %eax
	movl	$12826, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2869
	.size	ahir_ieee_proposed__float_pkg__OPLtO5, .-ahir_ieee_proposed__float_pkg__OPLtO5
.globl ahir_ieee_proposed__float_pkg__qeqO2
	.type	ahir_ieee_proposed__float_pkg__qeqO2, @function
ahir_ieee_proposed__float_pkg__qeqO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2873:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2872
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2873
.L2872:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2874
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2875
.L2874:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2875:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2876
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2877
.L2876:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2877:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2879:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2878
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO1
	leave
	ret
.L2878:
	movl	$_UI00000000, %eax
	movl	$12834, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2879
	.size	ahir_ieee_proposed__float_pkg__qeqO2, .-ahir_ieee_proposed__float_pkg__qeqO2
.globl ahir_ieee_proposed__float_pkg__qnoteqO2
	.type	ahir_ieee_proposed__float_pkg__qnoteqO2, @function
ahir_ieee_proposed__float_pkg__qnoteqO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2883:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2882
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2883
.L2882:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2884
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2885
.L2884:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2885:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2886
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2887
.L2886:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2887:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2889:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2888
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnoteqO1
	leave
	ret
.L2888:
	movl	$_UI00000000, %eax
	movl	$12841, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2889
	.size	ahir_ieee_proposed__float_pkg__qnoteqO2, .-ahir_ieee_proposed__float_pkg__qnoteqO2
.globl ahir_ieee_proposed__float_pkg__qgtO2
	.type	ahir_ieee_proposed__float_pkg__qgtO2, @function
ahir_ieee_proposed__float_pkg__qgtO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2893:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2892
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2893
.L2892:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2894
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2895
.L2894:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2895:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2896
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2897
.L2896:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2897:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2899:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2898
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgtO1
	leave
	ret
.L2898:
	movl	$_UI00000000, %eax
	movl	$12848, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2899
	.size	ahir_ieee_proposed__float_pkg__qgtO2, .-ahir_ieee_proposed__float_pkg__qgtO2
.globl ahir_ieee_proposed__float_pkg__qgteqO2
	.type	ahir_ieee_proposed__float_pkg__qgteqO2, @function
ahir_ieee_proposed__float_pkg__qgteqO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2903:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2902
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2903
.L2902:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2904
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2905
.L2904:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2905:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2906
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2907
.L2906:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2907:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2909:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2908
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgteqO1
	leave
	ret
.L2908:
	movl	$_UI00000000, %eax
	movl	$12855, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2909
	.size	ahir_ieee_proposed__float_pkg__qgteqO2, .-ahir_ieee_proposed__float_pkg__qgteqO2
.globl ahir_ieee_proposed__float_pkg__qltO2
	.type	ahir_ieee_proposed__float_pkg__qltO2, @function
ahir_ieee_proposed__float_pkg__qltO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2913:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2912
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2913
.L2912:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2914
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2915
.L2914:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2915:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2916
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2917
.L2916:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2917:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2919:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2918
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qltO1
	leave
	ret
.L2918:
	movl	$_UI00000000, %eax
	movl	$12862, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2919
	.size	ahir_ieee_proposed__float_pkg__qltO2, .-ahir_ieee_proposed__float_pkg__qltO2
.globl ahir_ieee_proposed__float_pkg__qlteqO2
	.type	ahir_ieee_proposed__float_pkg__qlteqO2, @function
ahir_ieee_proposed__float_pkg__qlteqO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	12(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2923:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2922
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2923
.L2922:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2924
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2925
.L2924:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2925:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2926
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2927
.L2926:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2927:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2929:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2928
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qlteqO1
	leave
	ret
.L2928:
	movl	$_UI00000000, %eax
	movl	$12869, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2929
	.size	ahir_ieee_proposed__float_pkg__qlteqO2, .-ahir_ieee_proposed__float_pkg__qlteqO2
.globl ahir_ieee_proposed__float_pkg__qeqO3
	.type	ahir_ieee_proposed__float_pkg__qeqO3, @function
ahir_ieee_proposed__float_pkg__qeqO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2933:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2932
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2933
.L2932:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2934
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2935
.L2934:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2935:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2936
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2937
.L2936:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2937:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2939:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2938
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO1
	leave
	ret
.L2938:
	movl	$_UI00000000, %eax
	movl	$12877, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2939
	.size	ahir_ieee_proposed__float_pkg__qeqO3, .-ahir_ieee_proposed__float_pkg__qeqO3
.globl ahir_ieee_proposed__float_pkg__qnoteqO3
	.type	ahir_ieee_proposed__float_pkg__qnoteqO3, @function
ahir_ieee_proposed__float_pkg__qnoteqO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2943:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2942
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2943
.L2942:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2944
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2945
.L2944:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2945:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2946
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2947
.L2946:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2947:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2949:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2948
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnoteqO1
	leave
	ret
.L2948:
	movl	$_UI00000000, %eax
	movl	$12884, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2949
	.size	ahir_ieee_proposed__float_pkg__qnoteqO3, .-ahir_ieee_proposed__float_pkg__qnoteqO3
.globl ahir_ieee_proposed__float_pkg__qgtO3
	.type	ahir_ieee_proposed__float_pkg__qgtO3, @function
ahir_ieee_proposed__float_pkg__qgtO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2953:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2952
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2953
.L2952:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2954
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2955
.L2954:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2955:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2956
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2957
.L2956:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2957:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2959:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2958
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgtO1
	leave
	ret
.L2958:
	movl	$_UI00000000, %eax
	movl	$12891, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2959
	.size	ahir_ieee_proposed__float_pkg__qgtO3, .-ahir_ieee_proposed__float_pkg__qgtO3
.globl ahir_ieee_proposed__float_pkg__qgteqO3
	.type	ahir_ieee_proposed__float_pkg__qgteqO3, @function
ahir_ieee_proposed__float_pkg__qgteqO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2963:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2962
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2963
.L2962:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2964
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2965
.L2964:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2965:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2966
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2967
.L2966:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2967:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2969:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2968
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgteqO1
	leave
	ret
.L2968:
	movl	$_UI00000000, %eax
	movl	$12898, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2969
	.size	ahir_ieee_proposed__float_pkg__qgteqO3, .-ahir_ieee_proposed__float_pkg__qgteqO3
.globl ahir_ieee_proposed__float_pkg__qltO3
	.type	ahir_ieee_proposed__float_pkg__qltO3, @function
ahir_ieee_proposed__float_pkg__qltO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2973:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2972
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2973
.L2972:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2974
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2975
.L2974:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2975:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2976
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2977
.L2976:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2977:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2979:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2978
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qltO1
	leave
	ret
.L2978:
	movl	$_UI00000000, %eax
	movl	$12905, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2979
	.size	ahir_ieee_proposed__float_pkg__qltO3, .-ahir_ieee_proposed__float_pkg__qltO3
.globl ahir_ieee_proposed__float_pkg__qlteqO3
	.type	ahir_ieee_proposed__float_pkg__qlteqO3, @function
ahir_ieee_proposed__float_pkg__qlteqO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	movl	8(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2983:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2982
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2983
.L2982:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2984
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2985
.L2984:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2985:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2986
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2987
.L2986:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2987:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-88(%ebp)
	fstpl	4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2989:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2988
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qlteqO1
	leave
	ret
.L2988:
	movl	$_UI00000000, %eax
	movl	$12912, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2989
	.size	ahir_ieee_proposed__float_pkg__qlteqO3, .-ahir_ieee_proposed__float_pkg__qlteqO3
.globl ahir_ieee_proposed__float_pkg__qeqO4
	.type	ahir_ieee_proposed__float_pkg__qeqO4, @function
ahir_ieee_proposed__float_pkg__qeqO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L2993:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L2992
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L2993
.L2992:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L2994
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L2995
.L2994:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L2995:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L2996
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L2997
.L2996:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L2997:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L2999:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L2998
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO1
	leave
	ret
.L2998:
	movl	$_UI00000000, %eax
	movl	$12920, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L2999
	.size	ahir_ieee_proposed__float_pkg__qeqO4, .-ahir_ieee_proposed__float_pkg__qeqO4
.globl ahir_ieee_proposed__float_pkg__qnoteqO4
	.type	ahir_ieee_proposed__float_pkg__qnoteqO4, @function
ahir_ieee_proposed__float_pkg__qnoteqO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3003:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3002
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3003
.L3002:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3004
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3005
.L3004:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3005:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3006
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3007
.L3006:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3007:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3009:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3008
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnoteqO1
	leave
	ret
.L3008:
	movl	$_UI00000000, %eax
	movl	$12927, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3009
	.size	ahir_ieee_proposed__float_pkg__qnoteqO4, .-ahir_ieee_proposed__float_pkg__qnoteqO4
.globl ahir_ieee_proposed__float_pkg__qgtO4
	.type	ahir_ieee_proposed__float_pkg__qgtO4, @function
ahir_ieee_proposed__float_pkg__qgtO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3013:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3012
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3013
.L3012:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3014
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3015
.L3014:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3015:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3016
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3017
.L3016:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3017:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3019:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3018
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgtO1
	leave
	ret
.L3018:
	movl	$_UI00000000, %eax
	movl	$12934, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3019
	.size	ahir_ieee_proposed__float_pkg__qgtO4, .-ahir_ieee_proposed__float_pkg__qgtO4
.globl ahir_ieee_proposed__float_pkg__qgteqO4
	.type	ahir_ieee_proposed__float_pkg__qgteqO4, @function
ahir_ieee_proposed__float_pkg__qgteqO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3023:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3022
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3023
.L3022:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3024
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3025
.L3024:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3025:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3026
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3027
.L3026:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3027:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3029:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3028
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgteqO1
	leave
	ret
.L3028:
	movl	$_UI00000000, %eax
	movl	$12941, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3029
	.size	ahir_ieee_proposed__float_pkg__qgteqO4, .-ahir_ieee_proposed__float_pkg__qgteqO4
.globl ahir_ieee_proposed__float_pkg__qltO4
	.type	ahir_ieee_proposed__float_pkg__qltO4, @function
ahir_ieee_proposed__float_pkg__qltO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3033:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3032
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3033
.L3032:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3034
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3035
.L3034:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3035:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3036
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3037
.L3036:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3037:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3039:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3038
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qltO1
	leave
	ret
.L3038:
	movl	$_UI00000000, %eax
	movl	$12948, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3039
	.size	ahir_ieee_proposed__float_pkg__qltO4, .-ahir_ieee_proposed__float_pkg__qltO4
.globl ahir_ieee_proposed__float_pkg__qlteqO4
	.type	ahir_ieee_proposed__float_pkg__qlteqO4, @function
ahir_ieee_proposed__float_pkg__qlteqO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3043:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3042
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3043
.L3042:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3044
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3045
.L3044:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3045:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3046
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3047
.L3046:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3047:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3049:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3048
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	leal	-80(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qlteqO1
	leave
	ret
.L3048:
	movl	$_UI00000000, %eax
	movl	$12955, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3049
	.size	ahir_ieee_proposed__float_pkg__qlteqO4, .-ahir_ieee_proposed__float_pkg__qlteqO4
.globl ahir_ieee_proposed__float_pkg__qeqO5
	.type	ahir_ieee_proposed__float_pkg__qeqO5, @function
ahir_ieee_proposed__float_pkg__qeqO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3053:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3052
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3053
.L3052:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3054
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3055
.L3054:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3055:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3056
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3057
.L3056:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3057:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3059:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3058
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qeqO1
	leave
	ret
.L3058:
	movl	$_UI00000000, %eax
	movl	$12963, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3059
	.size	ahir_ieee_proposed__float_pkg__qeqO5, .-ahir_ieee_proposed__float_pkg__qeqO5
.globl ahir_ieee_proposed__float_pkg__qnoteqO5
	.type	ahir_ieee_proposed__float_pkg__qnoteqO5, @function
ahir_ieee_proposed__float_pkg__qnoteqO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3063:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3062
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3063
.L3062:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3064
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3065
.L3064:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3065:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3066
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3067
.L3066:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3067:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3069:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3068
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnoteqO1
	leave
	ret
.L3068:
	movl	$_UI00000000, %eax
	movl	$12970, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3069
	.size	ahir_ieee_proposed__float_pkg__qnoteqO5, .-ahir_ieee_proposed__float_pkg__qnoteqO5
.globl ahir_ieee_proposed__float_pkg__qgtO5
	.type	ahir_ieee_proposed__float_pkg__qgtO5, @function
ahir_ieee_proposed__float_pkg__qgtO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3073:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3072
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3073
.L3072:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3074
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3075
.L3074:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3075:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3076
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3077
.L3076:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3077:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3079:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3078
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgtO1
	leave
	ret
.L3078:
	movl	$_UI00000000, %eax
	movl	$12977, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3079
	.size	ahir_ieee_proposed__float_pkg__qgtO5, .-ahir_ieee_proposed__float_pkg__qgtO5
.globl ahir_ieee_proposed__float_pkg__qgteqO5
	.type	ahir_ieee_proposed__float_pkg__qgteqO5, @function
ahir_ieee_proposed__float_pkg__qgteqO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3083:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3082
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3083
.L3082:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3084
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3085
.L3084:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3085:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3086
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3087
.L3086:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3087:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3089:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3088
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qgteqO1
	leave
	ret
.L3088:
	movl	$_UI00000000, %eax
	movl	$12984, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3089
	.size	ahir_ieee_proposed__float_pkg__qgteqO5, .-ahir_ieee_proposed__float_pkg__qgteqO5
.globl ahir_ieee_proposed__float_pkg__qltO5
	.type	ahir_ieee_proposed__float_pkg__qltO5, @function
ahir_ieee_proposed__float_pkg__qltO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3093:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3092
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3093
.L3092:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3094
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3095
.L3094:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3095:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3096
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3097
.L3096:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3097:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3099:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3098
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qltO1
	leave
	ret
.L3098:
	movl	$_UI00000000, %eax
	movl	$12991, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3099
	.size	ahir_ieee_proposed__float_pkg__qltO5, .-ahir_ieee_proposed__float_pkg__qltO5
.globl ahir_ieee_proposed__float_pkg__qlteqO5
	.type	ahir_ieee_proposed__float_pkg__qlteqO5, @function
ahir_ieee_proposed__float_pkg__qlteqO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, (%eax)
	movl	-36(%ebp), %eax
	movl	4(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-40(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-36(%ebp), %eax
	movl	12(%eax), %edx
	movl	-40(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3103:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3102
	movl	-28(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3103
.L3102:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3104
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3105
.L3104:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3105:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3106
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3107
.L3106:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3107:
	movl	-16(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-72(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3109:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3108
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-24(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qlteqO1
	leave
	ret
.L3108:
	movl	$_UI00000000, %eax
	movl	$12998, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3109
	.size	ahir_ieee_proposed__float_pkg__qlteqO5, .-ahir_ieee_proposed__float_pkg__qlteqO5
.globl ahir_ieee_proposed__float_pkg__minimumO2
	.type	ahir_ieee_proposed__float_pkg__minimumO2, @function
ahir_ieee_proposed__float_pkg__minimumO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3113:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3112
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3113
.L3112:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3114
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3115
.L3114:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3115:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3116
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3117
.L3116:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3117:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3119:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3118
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__minimumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3118:
	movl	$_UI00000000, %eax
	movl	$13007, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3119
	.size	ahir_ieee_proposed__float_pkg__minimumO2, .-ahir_ieee_proposed__float_pkg__minimumO2
.globl ahir_ieee_proposed__float_pkg__maximumO2
	.type	ahir_ieee_proposed__float_pkg__maximumO2, @function
ahir_ieee_proposed__float_pkg__maximumO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	16(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3123:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3122
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3123
.L3122:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3124
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3125
.L3124:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3125:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3126
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3127
.L3126:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3127:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3129:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3128
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3128:
	movl	$_UI00000000, %eax
	movl	$13015, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3129
	.size	ahir_ieee_proposed__float_pkg__maximumO2, .-ahir_ieee_proposed__float_pkg__maximumO2
.globl ahir_ieee_proposed__float_pkg__minimumO3
	.type	ahir_ieee_proposed__float_pkg__minimumO3, @function
ahir_ieee_proposed__float_pkg__minimumO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3133:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3132
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3133
.L3132:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3134
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3135
.L3134:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3135:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3136
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3137
.L3136:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3137:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3139:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3138
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__minimumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3138:
	movl	$_UI00000000, %eax
	movl	$13023, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3139
	.size	ahir_ieee_proposed__float_pkg__minimumO3, .-ahir_ieee_proposed__float_pkg__minimumO3
.globl ahir_ieee_proposed__float_pkg__maximumO3
	.type	ahir_ieee_proposed__float_pkg__maximumO3, @function
ahir_ieee_proposed__float_pkg__maximumO3:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	28(%esp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3143:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3142
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3143
.L3142:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3144
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3145
.L3144:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3145:
	movl	20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3146
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3147
.L3146:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3147:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	%eax, 16(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 12(%esp)
	fldl	-104(%ebp)
	fstpl	4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3149:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3148
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3148:
	movl	$_UI00000000, %eax
	movl	$13031, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3149
	.size	ahir_ieee_proposed__float_pkg__maximumO3, .-ahir_ieee_proposed__float_pkg__maximumO3
.globl ahir_ieee_proposed__float_pkg__minimumO4
	.type	ahir_ieee_proposed__float_pkg__minimumO4, @function
ahir_ieee_proposed__float_pkg__minimumO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3153:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3152
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3153
.L3152:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3154
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3155
.L3154:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3155:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3156
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3157
.L3156:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3157:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3159:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3158
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__minimumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3158:
	movl	$_UI00000000, %eax
	movl	$13039, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3159
	.size	ahir_ieee_proposed__float_pkg__minimumO4, .-ahir_ieee_proposed__float_pkg__minimumO4
.globl ahir_ieee_proposed__float_pkg__maximumO4
	.type	ahir_ieee_proposed__float_pkg__maximumO4, @function
ahir_ieee_proposed__float_pkg__maximumO4:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3163:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3162
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3163
.L3162:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3164
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3165
.L3164:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3165:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3166
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3167
.L3166:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3167:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3169:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3168
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	leal	-96(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3168:
	movl	$_UI00000000, %eax
	movl	$13047, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3169
	.size	ahir_ieee_proposed__float_pkg__maximumO4, .-ahir_ieee_proposed__float_pkg__maximumO4
.globl ahir_ieee_proposed__float_pkg__minimumO5
	.type	ahir_ieee_proposed__float_pkg__minimumO5, @function
ahir_ieee_proposed__float_pkg__minimumO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3173:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3172
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3173
.L3172:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3174
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3175
.L3174:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3175:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3176
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3177
.L3176:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3177:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3179:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3178
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__minimumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3178:
	movl	$_UI00000000, %eax
	movl	$13055, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3179
	.size	ahir_ieee_proposed__float_pkg__minimumO5, .-ahir_ieee_proposed__float_pkg__minimumO5
.globl ahir_ieee_proposed__float_pkg__maximumO5
	.type	ahir_ieee_proposed__float_pkg__maximumO5, @function
ahir_ieee_proposed__float_pkg__maximumO5:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	leal	-72(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	4(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-48(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-44(%ebp), %eax
	movl	12(%eax), %edx
	movl	-48(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	20(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3183:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3182
	movl	-36(%ebp), %edx
	movl	-52(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3183
.L3182:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3184
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -28(%ebp)
	jmp	.L3185
.L3184:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
.L3185:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3186
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3187
.L3186:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3187:
	movl	-24(%ebp), %eax
	negl	%eax
	movb	$0, 16(%esp)
	movl	%eax, 12(%esp)
	movl	-28(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO2
	leal	-80(%ebp), %eax
	movl	%eax, -20(%ebp)
.L3189:
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-60(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3188
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-52(%ebp), %ecx
	movl	-56(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -96(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-96(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__maximumO1
	leal	-88(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3188:
	movl	$_UI00000000, %eax
	movl	$13063, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3189
	.size	ahir_ieee_proposed__float_pkg__maximumO5, .-ahir_ieee_proposed__float_pkg__maximumO5
.globl ahir_ieee_proposed__float_pkg__not
	.type	ahir_ieee_proposed__float_pkg__not, @function
ahir_ieee_proposed__float_pkg__not:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$136, %esp
	leal	-68(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-56(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -116(%ebp)
	movl	-116(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	$0, -36(%ebp)
.L3193:
	movl	-36(%ebp), %eax
	cmpl	-40(%ebp), %eax
	je	.L3192
	movl	-36(%ebp), %edx
	movl	-48(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -36(%ebp)
	jmp	.L3193
.L3192:
	call	__ghdl_stack2_mark
	movl	%eax, -32(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__notO3
	leal	-76(%ebp), %eax
	movl	%eax, -28(%ebp)
.L3197:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-56(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3194
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-48(%ebp), %ecx
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -100(%ebp)
	leal	-68(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3195
	jmp	.L3202
.L3194:
	movl	$_UI00000000, %eax
	movl	$13073, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3197
.L3195:
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3198
.L3202:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3198:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3199
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3200
.L3199:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3200:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-100(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-92(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__not, .-ahir_ieee_proposed__float_pkg__not
	.section	.rodata
	.align 4
	.type	_UI0000001e.22961, @object
	.size	_UI0000001e.22961, 12
_UI0000001e.22961:
	.long	_UI00000000
	.long	13083
	.long	7
	.align 32
	.type	_UI0000001f.22963, @object
	.size	_UI0000001f.22963, 47
_UI0000001f.22963:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	97
	.byte	110
	.byte	100
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__andO1__U1__STB.22964, @object
	.size	ahir_ieee_proposed__float_pkg__andO1__U1__STB.22964, 16
ahir_ieee_proposed__float_pkg__andO1__U1__STB.22964:
	.long	1
	.long	47
	.byte	0
	.zero	3
	.long	47
	.text
.globl ahir_ieee_proposed__float_pkg__andO1
	.type	ahir_ieee_proposed__float_pkg__andO1, @function
ahir_ieee_proposed__float_pkg__andO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3205:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3204
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3205
.L3204:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3206
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3207
.L3206:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3207:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3208
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3209
.L3208:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3209:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3210
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3211
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3212
.L3211:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3212:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3213
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3214
.L3213:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3214:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3210:
	cmpb	$0, -77(%ebp)
	je	.L3215
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__andO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3218:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3216
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3217
.L3216:
	movl	$_UI00000000, %eax
	movl	$13081, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3218
.L3215:
	movl	$_UI0000001f.22963, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__andO1__U1__STB.22964, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI0000001e.22961, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3220:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3219
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3220
.L3219:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3217:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3221
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3222
.L3221:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3222:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3223
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3224
.L3223:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3224:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__andO1, .-ahir_ieee_proposed__float_pkg__andO1
	.section	.rodata
	.align 4
	.type	_UI00000020.23089, @object
	.size	_UI00000020.23089, 12
_UI00000020.23089:
	.long	_UI00000000
	.long	13098
	.long	7
	.align 32
	.type	_UI00000021.23091, @object
	.size	_UI00000021.23091, 46
_UI00000021.23091:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	111
	.byte	114
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__orO1__U1__STB.23092, @object
	.size	ahir_ieee_proposed__float_pkg__orO1__U1__STB.23092, 16
ahir_ieee_proposed__float_pkg__orO1__U1__STB.23092:
	.long	1
	.long	46
	.byte	0
	.zero	3
	.long	46
	.text
.globl ahir_ieee_proposed__float_pkg__orO1
	.type	ahir_ieee_proposed__float_pkg__orO1, @function
ahir_ieee_proposed__float_pkg__orO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3228:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3227
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3228
.L3227:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3229
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3230
.L3229:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3230:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3231
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3232
.L3231:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3232:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3233
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3234
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3235
.L3234:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3235:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3236
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3237
.L3236:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3237:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3233:
	cmpb	$0, -77(%ebp)
	je	.L3238
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__orO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3241:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3239
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3240
.L3239:
	movl	$_UI00000000, %eax
	movl	$13096, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3241
.L3238:
	movl	$_UI00000021.23091, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__orO1__U1__STB.23092, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000020.23089, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3243:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3242
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3243
.L3242:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3240:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3244
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3245
.L3244:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3245:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3246
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3247
.L3246:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3247:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__orO1, .-ahir_ieee_proposed__float_pkg__orO1
	.section	.rodata
	.align 4
	.type	_UI00000022.23217, @object
	.size	_UI00000022.23217, 12
_UI00000022.23217:
	.long	_UI00000000
	.long	13113
	.long	7
	.align 32
	.type	_UI00000023.23219, @object
	.size	_UI00000023.23219, 48
_UI00000023.23219:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	110
	.byte	97
	.byte	110
	.byte	100
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__nandO1__U1__STB.23220, @object
	.size	ahir_ieee_proposed__float_pkg__nandO1__U1__STB.23220, 16
ahir_ieee_proposed__float_pkg__nandO1__U1__STB.23220:
	.long	1
	.long	48
	.byte	0
	.zero	3
	.long	48
	.text
.globl ahir_ieee_proposed__float_pkg__nandO1
	.type	ahir_ieee_proposed__float_pkg__nandO1, @function
ahir_ieee_proposed__float_pkg__nandO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3251:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3250
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3251
.L3250:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3252
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3253
.L3252:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3253:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3254
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3255
.L3254:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3255:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3256
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3257
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3258
.L3257:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3258:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3259
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3260
.L3259:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3260:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3256:
	cmpb	$0, -77(%ebp)
	je	.L3261
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__nandO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3264:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3262
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3263
.L3262:
	movl	$_UI00000000, %eax
	movl	$13111, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3264
.L3261:
	movl	$_UI00000023.23219, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__nandO1__U1__STB.23220, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000022.23217, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3266:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3265
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3266
.L3265:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3263:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3267
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3268
.L3267:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3268:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3269
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3270
.L3269:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3270:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nandO1, .-ahir_ieee_proposed__float_pkg__nandO1
	.section	.rodata
	.align 4
	.type	_UI00000024.23345, @object
	.size	_UI00000024.23345, 12
_UI00000024.23345:
	.long	_UI00000000
	.long	13128
	.long	7
	.align 32
	.type	_UI00000025.23347, @object
	.size	_UI00000025.23347, 47
_UI00000025.23347:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	110
	.byte	111
	.byte	114
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__norO1__U1__STB.23348, @object
	.size	ahir_ieee_proposed__float_pkg__norO1__U1__STB.23348, 16
ahir_ieee_proposed__float_pkg__norO1__U1__STB.23348:
	.long	1
	.long	47
	.byte	0
	.zero	3
	.long	47
	.text
.globl ahir_ieee_proposed__float_pkg__norO1
	.type	ahir_ieee_proposed__float_pkg__norO1, @function
ahir_ieee_proposed__float_pkg__norO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3274:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3273
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3274
.L3273:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3275
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3276
.L3275:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3276:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3277
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3278
.L3277:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3278:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3279
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3280
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3281
.L3280:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3281:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3282
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3283
.L3282:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3283:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3279:
	cmpb	$0, -77(%ebp)
	je	.L3284
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__norO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3287:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3285
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3286
.L3285:
	movl	$_UI00000000, %eax
	movl	$13126, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3287
.L3284:
	movl	$_UI00000025.23347, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__norO1__U1__STB.23348, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000024.23345, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3289:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3288
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3289
.L3288:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3286:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3290
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3291
.L3290:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3291:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3292
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3293
.L3292:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3293:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__norO1, .-ahir_ieee_proposed__float_pkg__norO1
	.section	.rodata
	.align 4
	.type	_UI00000026.23473, @object
	.size	_UI00000026.23473, 12
_UI00000026.23473:
	.long	_UI00000000
	.long	13143
	.long	7
	.align 32
	.type	_UI00000027.23475, @object
	.size	_UI00000027.23475, 47
_UI00000027.23475:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	120
	.byte	111
	.byte	114
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__xorO1__U1__STB.23476, @object
	.size	ahir_ieee_proposed__float_pkg__xorO1__U1__STB.23476, 16
ahir_ieee_proposed__float_pkg__xorO1__U1__STB.23476:
	.long	1
	.long	47
	.byte	0
	.zero	3
	.long	47
	.text
.globl ahir_ieee_proposed__float_pkg__xorO1
	.type	ahir_ieee_proposed__float_pkg__xorO1, @function
ahir_ieee_proposed__float_pkg__xorO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3297:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3296
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3297
.L3296:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3298
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3299
.L3298:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3299:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3300
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3301
.L3300:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3301:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3302
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3303
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3304
.L3303:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3304:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3305
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3306
.L3305:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3306:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3302:
	cmpb	$0, -77(%ebp)
	je	.L3307
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__xorO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3310:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3308
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3309
.L3308:
	movl	$_UI00000000, %eax
	movl	$13141, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3310
.L3307:
	movl	$_UI00000027.23475, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__xorO1__U1__STB.23476, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000026.23473, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3312:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3311
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3312
.L3311:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3309:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3313
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3314
.L3313:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3314:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3315
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3316
.L3315:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3316:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xorO1, .-ahir_ieee_proposed__float_pkg__xorO1
	.section	.rodata
	.align 4
	.type	_UI00000028.23601, @object
	.size	_UI00000028.23601, 12
_UI00000028.23601:
	.long	_UI00000000
	.long	13158
	.long	7
	.align 32
	.type	_UI00000029.23603, @object
	.size	_UI00000029.23603, 48
_UI00000029.23603:
	.byte	102
	.byte	108
	.byte	111
	.byte	97
	.byte	116
	.byte	95
	.byte	112
	.byte	107
	.byte	103
	.byte	58
	.byte	34
	.byte	120
	.byte	110
	.byte	111
	.byte	114
	.byte	34
	.byte	58
	.byte	32
	.byte	82
	.byte	97
	.byte	110
	.byte	103
	.byte	101
	.byte	32
	.byte	101
	.byte	114
	.byte	114
	.byte	111
	.byte	114
	.byte	32
	.byte	76
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.byte	32
	.byte	47
	.byte	61
	.byte	32
	.byte	82
	.byte	39
	.byte	82
	.byte	65
	.byte	78
	.byte	71
	.byte	69
	.align 4
	.type	ahir_ieee_proposed__float_pkg__xnorO1__U1__STB.23604, @object
	.size	ahir_ieee_proposed__float_pkg__xnorO1__U1__STB.23604, 16
ahir_ieee_proposed__float_pkg__xnorO1__U1__STB.23604:
	.long	1
	.long	48
	.byte	0
	.zero	3
	.long	48
	.text
.globl ahir_ieee_proposed__float_pkg__xnorO1
	.type	ahir_ieee_proposed__float_pkg__xnorO1, @function
ahir_ieee_proposed__float_pkg__xnorO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$216, %esp
	leal	-116(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	$0, -84(%ebp)
.L3320:
	movl	-84(%ebp), %eax
	cmpl	-88(%ebp), %eax
	je	.L3319
	movl	-84(%ebp), %edx
	movl	-96(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -84(%ebp)
	jmp	.L3320
.L3319:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3321
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -76(%ebp)
	jmp	.L3322
.L3321:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
.L3322:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3323
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -72(%ebp)
	jmp	.L3324
.L3323:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -72(%ebp)
.L3324:
	movl	-76(%ebp), %eax
	cmpl	-72(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
	cmpb	$1, -77(%ebp)
	jne	.L3325
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3326
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -60(%ebp)
	jmp	.L3327
.L3326:
	movl	-52(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -60(%ebp)
.L3327:
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3328
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -56(%ebp)
	jmp	.L3329
.L3328:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
.L3329:
	movl	-60(%ebp), %eax
	cmpl	-56(%ebp), %eax
	sete	%al
	movb	%al, -77(%ebp)
.L3325:
	cmpb	$0, -77(%ebp)
	je	.L3330
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	movl	16(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-140(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-140(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__std_logic_1164__xnorO3
	leal	-124(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3333:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-104(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3331
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3332
.L3331:
	movl	$_UI00000000, %eax
	movl	$13156, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3333
.L3330:
	movl	$_UI00000029.23603, %eax
	movl	%eax, -148(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__xnorO1__U1__STB.23604, -144(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__BODY__RTI, 12(%esp)
	movl	$_UI00000028.23601, 8(%esp)
	movb	$1, 4(%esp)
	leal	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_assert_failed
	movl	%esp, %eax
	movl	%eax, -180(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	16(%esp), %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -184(%ebp)
	movl	-184(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	$0, -28(%ebp)
.L3335:
	movl	-28(%ebp), %eax
	cmpl	-32(%ebp), %eax
	je	.L3334
	movl	-28(%ebp), %edx
	movl	-36(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -28(%ebp)
	jmp	.L3335
.L3334:
	movl	-36(%ebp), %eax
	movl	-96(%ebp), %ecx
	movl	-100(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-180(%ebp), %esp
.L3332:
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3336
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3337
.L3336:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3337:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3338
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3339
.L3338:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3339:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 12(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-164(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-156(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-156(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xnorO1, .-ahir_ieee_proposed__float_pkg__xnorO1
.globl ahir_ieee_proposed__float_pkg__andO2
	.type	ahir_ieee_proposed__float_pkg__andO2, @function
ahir_ieee_proposed__float_pkg__andO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3343:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3342
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3343
.L3342:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3344
.L3352:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3345
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3346
.L3345:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3346:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3347
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3348
.L3347:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3348:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3349
	movl	$_UI00000000, %eax
	movl	$13173, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3349:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__andO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3344
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3350
	addl	$1, -64(%ebp)
	jmp	.L3352
.L3350:
	subl	$1, -64(%ebp)
	jmp	.L3352
.L3344:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__andO2, .-ahir_ieee_proposed__float_pkg__andO2
.globl ahir_ieee_proposed__float_pkg__andO3
	.type	ahir_ieee_proposed__float_pkg__andO3, @function
ahir_ieee_proposed__float_pkg__andO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3356:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3355
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3356
.L3355:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3357
.L3365:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3358
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3359
.L3358:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3359:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3360
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3361
.L3360:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3361:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3362
	movl	$_UI00000000, %eax
	movl	$13183, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3362:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__andO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3357
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3363
	addl	$1, -64(%ebp)
	jmp	.L3365
.L3363:
	subl	$1, -64(%ebp)
	jmp	.L3365
.L3357:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__andO3, .-ahir_ieee_proposed__float_pkg__andO3
.globl ahir_ieee_proposed__float_pkg__orO2
	.type	ahir_ieee_proposed__float_pkg__orO2, @function
ahir_ieee_proposed__float_pkg__orO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3369:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3368
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3369
.L3368:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3370
.L3378:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3371
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3372
.L3371:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3372:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3373
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3374
.L3373:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3374:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3375
	movl	$_UI00000000, %eax
	movl	$13193, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3375:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__orO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3370
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3376
	addl	$1, -64(%ebp)
	jmp	.L3378
.L3376:
	subl	$1, -64(%ebp)
	jmp	.L3378
.L3370:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__orO2, .-ahir_ieee_proposed__float_pkg__orO2
.globl ahir_ieee_proposed__float_pkg__orO3
	.type	ahir_ieee_proposed__float_pkg__orO3, @function
ahir_ieee_proposed__float_pkg__orO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3382:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3381
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3382
.L3381:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3383
.L3391:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3384
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3385
.L3384:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3385:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3386
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3387
.L3386:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3387:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3388
	movl	$_UI00000000, %eax
	movl	$13203, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3388:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__orO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3383
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3389
	addl	$1, -64(%ebp)
	jmp	.L3391
.L3389:
	subl	$1, -64(%ebp)
	jmp	.L3391
.L3383:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__orO3, .-ahir_ieee_proposed__float_pkg__orO3
.globl ahir_ieee_proposed__float_pkg__nandO2
	.type	ahir_ieee_proposed__float_pkg__nandO2, @function
ahir_ieee_proposed__float_pkg__nandO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3395:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3394
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3395
.L3394:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3396
.L3404:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3397
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3398
.L3397:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3398:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3399
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3400
.L3399:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3400:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3401
	movl	$_UI00000000, %eax
	movl	$13213, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3401:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__nandO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3396
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3402
	addl	$1, -64(%ebp)
	jmp	.L3404
.L3402:
	subl	$1, -64(%ebp)
	jmp	.L3404
.L3396:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nandO2, .-ahir_ieee_proposed__float_pkg__nandO2
.globl ahir_ieee_proposed__float_pkg__nandO3
	.type	ahir_ieee_proposed__float_pkg__nandO3, @function
ahir_ieee_proposed__float_pkg__nandO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3408:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3407
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3408
.L3407:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3409
.L3417:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3410
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3411
.L3410:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3411:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3412
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3413
.L3412:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3413:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3414
	movl	$_UI00000000, %eax
	movl	$13223, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3414:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__nandO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3409
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3415
	addl	$1, -64(%ebp)
	jmp	.L3417
.L3415:
	subl	$1, -64(%ebp)
	jmp	.L3417
.L3409:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nandO3, .-ahir_ieee_proposed__float_pkg__nandO3
.globl ahir_ieee_proposed__float_pkg__norO2
	.type	ahir_ieee_proposed__float_pkg__norO2, @function
ahir_ieee_proposed__float_pkg__norO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3421:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3420
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3421
.L3420:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3422
.L3430:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3423
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3424
.L3423:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3424:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3425
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3426
.L3425:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3426:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3427
	movl	$_UI00000000, %eax
	movl	$13233, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3427:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__norO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3422
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3428
	addl	$1, -64(%ebp)
	jmp	.L3430
.L3428:
	subl	$1, -64(%ebp)
	jmp	.L3430
.L3422:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__norO2, .-ahir_ieee_proposed__float_pkg__norO2
.globl ahir_ieee_proposed__float_pkg__norO3
	.type	ahir_ieee_proposed__float_pkg__norO3, @function
ahir_ieee_proposed__float_pkg__norO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3434:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3433
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3434
.L3433:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3435
.L3443:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3436
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3437
.L3436:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3437:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3438
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3439
.L3438:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3439:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3440
	movl	$_UI00000000, %eax
	movl	$13243, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3440:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__norO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3435
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3441
	addl	$1, -64(%ebp)
	jmp	.L3443
.L3441:
	subl	$1, -64(%ebp)
	jmp	.L3443
.L3435:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__norO3, .-ahir_ieee_proposed__float_pkg__norO3
.globl ahir_ieee_proposed__float_pkg__xorO2
	.type	ahir_ieee_proposed__float_pkg__xorO2, @function
ahir_ieee_proposed__float_pkg__xorO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3447:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3446
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3447
.L3446:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3448
.L3456:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3449
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3450
.L3449:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3450:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3451
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3452
.L3451:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3452:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3453
	movl	$_UI00000000, %eax
	movl	$13253, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3453:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xorO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3448
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3454
	addl	$1, -64(%ebp)
	jmp	.L3456
.L3454:
	subl	$1, -64(%ebp)
	jmp	.L3456
.L3448:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xorO2, .-ahir_ieee_proposed__float_pkg__xorO2
.globl ahir_ieee_proposed__float_pkg__xorO3
	.type	ahir_ieee_proposed__float_pkg__xorO3, @function
ahir_ieee_proposed__float_pkg__xorO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3460:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3459
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3460
.L3459:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3461
.L3469:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3462
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3463
.L3462:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3463:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3464
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3465
.L3464:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3465:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3466
	movl	$_UI00000000, %eax
	movl	$13263, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3466:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__xorO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3461
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3467
	addl	$1, -64(%ebp)
	jmp	.L3469
.L3467:
	subl	$1, -64(%ebp)
	jmp	.L3469
.L3461:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xorO3, .-ahir_ieee_proposed__float_pkg__xorO3
.globl ahir_ieee_proposed__float_pkg__xnorO2
	.type	ahir_ieee_proposed__float_pkg__xnorO2, @function
ahir_ieee_proposed__float_pkg__xnorO2:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3473:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3472
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3473
.L3472:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3474
.L3482:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3475
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3476
.L3475:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3476:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3477
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3478
.L3477:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3478:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3479
	movl	$_UI00000000, %eax
	movl	$13273, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3479:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, 4(%esp)
	movzbl	12(%ebp), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__xnorO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3474
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3480
	addl	$1, -64(%ebp)
	jmp	.L3482
.L3480:
	subl	$1, -64(%ebp)
	jmp	.L3482
.L3474:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xnorO2, .-ahir_ieee_proposed__float_pkg__xnorO2
.globl ahir_ieee_proposed__float_pkg__xnorO3
	.type	ahir_ieee_proposed__float_pkg__xnorO3, @function
ahir_ieee_proposed__float_pkg__xnorO3:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$132, %esp
	leal	-104(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	4(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-80(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-76(%ebp), %eax
	movl	12(%eax), %edx
	movl	-80(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-88(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %ecx
	movl	%ecx, -84(%ebp)
	movl	-92(%ebp), %eax
	movl	%eax, -72(%ebp)
	movl	$0, -68(%ebp)
.L3486:
	movl	-68(%ebp), %eax
	cmpl	-72(%ebp), %eax
	je	.L3485
	movl	-68(%ebp), %edx
	movl	-84(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -68(%ebp)
	jmp	.L3486
.L3485:
	leal	-104(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -64(%ebp)
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	testl	%eax, %eax
	je	.L3487
.L3495:
	leal	-104(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-52(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-52(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3488
	movl	-36(%ebp), %eax
	movl	-40(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
	jmp	.L3489
.L3488:
	movl	-40(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -44(%ebp)
.L3489:
	movl	-44(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -28(%ebp)
	movl	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-28(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3490
	movl	-12(%ebp), %eax
	movl	-16(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
	jmp	.L3491
.L3490:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -20(%ebp)
.L3491:
	movl	-20(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-20(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -24(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3492
	movl	$_UI00000000, %eax
	movl	$13283, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3492:
	movl	-24(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %ebx
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movzbl	(%edx,%eax), %edx
	movzbl	16(%ebp), %eax
	movb	%al, 4(%esp)
	movb	%dl, (%esp)
	call	ieee__std_logic_1164__xnorO1
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	cmpl	%eax, -64(%ebp)
	je	.L3487
	movl	-60(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3493
	addl	$1, -64(%ebp)
	jmp	.L3495
.L3493:
	subl	$1, -64(%ebp)
	jmp	.L3495
.L3487:
	movl	-92(%ebp), %eax
	movl	%eax, -88(%ebp)
	movl	-84(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xnorO3, .-ahir_ieee_proposed__float_pkg__xnorO3
.globl ahir_ieee_proposed__float_pkg__and_reduce
	.type	ahir_ieee_proposed__float_pkg__and_reduce, @function
ahir_ieee_proposed__float_pkg__and_reduce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduceO1
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__and_reduce, .-ahir_ieee_proposed__float_pkg__and_reduce
.globl ahir_ieee_proposed__float_pkg__and_reduce_RESOLV
	.type	ahir_ieee_proposed__float_pkg__and_reduce_RESOLV, @function
ahir_ieee_proposed__float_pkg__and_reduce_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3500
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3501
.L3500:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3501:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3503:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3502
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3503
.L3502:
	movl	$0, -24(%ebp)
.L3506:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3504
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3505
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3505:
	addl	$1, -24(%ebp)
	jmp	.L3506
.L3504:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__and_reduce
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__and_reduce_RESOLV, .-ahir_ieee_proposed__float_pkg__and_reduce_RESOLV
.globl ahir_ieee_proposed__float_pkg__nand_reduce
	.type	ahir_ieee_proposed__float_pkg__nand_reduce, @function
ahir_ieee_proposed__float_pkg__nand_reduce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__nand_reduceO1
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nand_reduce, .-ahir_ieee_proposed__float_pkg__nand_reduce
.globl ahir_ieee_proposed__float_pkg__nand_reduce_RESOLV
	.type	ahir_ieee_proposed__float_pkg__nand_reduce_RESOLV, @function
ahir_ieee_proposed__float_pkg__nand_reduce_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3511
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3512
.L3511:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3512:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3514:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3513
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3514
.L3513:
	movl	$0, -24(%ebp)
.L3517:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3515
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3516
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3516:
	addl	$1, -24(%ebp)
	jmp	.L3517
.L3515:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__nand_reduce
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__nand_reduce_RESOLV, .-ahir_ieee_proposed__float_pkg__nand_reduce_RESOLV
.globl ahir_ieee_proposed__float_pkg__or_reduceO1
	.type	ahir_ieee_proposed__float_pkg__or_reduceO1, @function
ahir_ieee_proposed__float_pkg__or_reduceO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO3
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO1, .-ahir_ieee_proposed__float_pkg__or_reduceO1
.globl ahir_ieee_proposed__float_pkg__or_reduceO1_RESOLV
	.type	ahir_ieee_proposed__float_pkg__or_reduceO1_RESOLV, @function
ahir_ieee_proposed__float_pkg__or_reduceO1_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3522
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3523
.L3522:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3523:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3525:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3524
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3525
.L3524:
	movl	$0, -24(%ebp)
.L3528:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3526
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3527
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3527:
	addl	$1, -24(%ebp)
	jmp	.L3528
.L3526:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__or_reduceO1
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__or_reduceO1_RESOLV, .-ahir_ieee_proposed__float_pkg__or_reduceO1_RESOLV
.globl ahir_ieee_proposed__float_pkg__nor_reduce
	.type	ahir_ieee_proposed__float_pkg__nor_reduce, @function
ahir_ieee_proposed__float_pkg__nor_reduce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__nor_reduceO1
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nor_reduce, .-ahir_ieee_proposed__float_pkg__nor_reduce
.globl ahir_ieee_proposed__float_pkg__nor_reduce_RESOLV
	.type	ahir_ieee_proposed__float_pkg__nor_reduce_RESOLV, @function
ahir_ieee_proposed__float_pkg__nor_reduce_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3533
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3534
.L3533:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3534:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3536:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3535
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3536
.L3535:
	movl	$0, -24(%ebp)
.L3539:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3537
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3538
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3538:
	addl	$1, -24(%ebp)
	jmp	.L3539
.L3537:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__nor_reduce
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__nor_reduce_RESOLV, .-ahir_ieee_proposed__float_pkg__nor_reduce_RESOLV
.globl ahir_ieee_proposed__float_pkg__xor_reduce
	.type	ahir_ieee_proposed__float_pkg__xor_reduce, @function
ahir_ieee_proposed__float_pkg__xor_reduce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xor_reduceO1
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xor_reduce, .-ahir_ieee_proposed__float_pkg__xor_reduce
.globl ahir_ieee_proposed__float_pkg__xor_reduce_RESOLV
	.type	ahir_ieee_proposed__float_pkg__xor_reduce_RESOLV, @function
ahir_ieee_proposed__float_pkg__xor_reduce_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3544
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3545
.L3544:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3545:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3547:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3546
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3547
.L3546:
	movl	$0, -24(%ebp)
.L3550:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3548
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3549
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3549:
	addl	$1, -24(%ebp)
	jmp	.L3550
.L3548:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xor_reduce
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__xor_reduce_RESOLV, .-ahir_ieee_proposed__float_pkg__xor_reduce_RESOLV
.globl ahir_ieee_proposed__float_pkg__xnor_reduce
	.type	ahir_ieee_proposed__float_pkg__xnor_reduce, @function
ahir_ieee_proposed__float_pkg__xnor_reduce:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_sulv
	leal	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xnor_reduceO1
	movb	%al, -1(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movzbl	-1(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__xnor_reduce, .-ahir_ieee_proposed__float_pkg__xnor_reduce
.globl ahir_ieee_proposed__float_pkg__xnor_reduce_RESOLV
	.type	ahir_ieee_proposed__float_pkg__xnor_reduce_RESOLV, @function
ahir_ieee_proposed__float_pkg__xnor_reduce_RESOLV:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	subl	$64, %esp
	movl	28(%ebp), %edx
	movl	20(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -20(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-16(%ebp), %eax
	movb	$0, 8(%eax)
	cmpl	$0, -20(%ebp)
	jne	.L3555
	movl	-16(%ebp), %eax
	movl	$2147483647, (%eax)
	movl	-16(%ebp), %eax
	movl	$-2147483648, 4(%eax)
	jmp	.L3556
.L3555:
	movl	-16(%ebp), %eax
	movl	$-2147483648, (%eax)
	movl	-20(%ebp), %eax
	subl	$1, %eax
	subl	$-2147483648, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %edx
	movl	-12(%ebp), %eax
	movl	%eax, 4(%edx)
.L3556:
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-52(%ebp), %eax
	movl	12(%eax), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	8(%esp), %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -60(%ebp)
	movl	-60(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	$0, -28(%ebp)
.L3558:
	movl	-28(%ebp), %eax
	cmpl	28(%ebp), %eax
	je	.L3557
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_port
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
	jmp	.L3558
.L3557:
	movl	$0, -24(%ebp)
.L3561:
	movl	-24(%ebp), %eax
	cmpl	24(%ebp), %eax
	je	.L3559
	movl	-24(%ebp), %eax
	movl	16(%ebp), %edx
	movzbl	(%edx,%eax), %eax
	testb	%al, %al
	je	.L3560
	movl	-56(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	12(%ebp), %edx
	movl	-24(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_signal_read_driver
	movzbl	(%eax), %eax
	movb	%al, (%ebx,%esi)
	addl	$1, -28(%ebp)
.L3560:
	addl	$1, -24(%ebp)
	jmp	.L3561
.L3559:
	movl	12(%ebp), %eax
	leal	8(%eax), %ebx
	leal	-56(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__xnor_reduce
	movb	%al, (%ebx)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
	.size	ahir_ieee_proposed__float_pkg__xnor_reduce_RESOLV, .-ahir_ieee_proposed__float_pkg__xnor_reduce_RESOLV
.globl ahir_ieee_proposed__float_pkg__copysign
	.type	ahir_ieee_proposed__float_pkg__copysign, @function
ahir_ieee_proposed__float_pkg__copysign:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -56(%ebp)
	movl	16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3564
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -52(%ebp)
	jmp	.L3565
.L3564:
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
.L3565:
	movl	-52(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-56(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -32(%ebp)
	movl	-56(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3566
	movl	-32(%ebp), %eax
	movl	-36(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -40(%ebp)
	jmp	.L3567
.L3566:
	movl	-36(%ebp), %eax
	movl	-32(%ebp), %edx
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -40(%ebp)
.L3567:
	movl	-40(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-40(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-56(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -48(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3568
	movl	$_UI00000000, %eax
	movl	$13328, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3568:
	movl	-48(%ebp), %eax
	movl	%eax, -88(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3569
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -24(%ebp)
	jmp	.L3570
.L3569:
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -24(%ebp)
.L3570:
	movl	-24(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-28(%ebp), %eax
	movl	%edx, (%eax)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3571
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3572
.L3571:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3572:
	movl	-28(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 4(%edx)
	movl	-28(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-28(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -4(%ebp)
	cmpl	$0, -4(%ebp)
	jns	.L3573
	movl	$0, -8(%ebp)
	jmp	.L3574
.L3573:
	movl	-4(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -8(%ebp)
.L3574:
	movl	-28(%ebp), %edx
	movl	-8(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-92(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -80(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-80(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-76(%ebp), %eax
	movzbl	8(%eax), %eax
	cmpb	%al, %dl
	je	.L3575
	movl	$_UI00000000, %eax
	movl	$13328, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3575:
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-72(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-68(%ebp), %edx
	movl	-80(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3576
	movl	$_UI00000000, %eax
	movl	$13328, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3576:
	movl	-92(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %eax
	addl	-68(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-104(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	16(%ebp), %eax
	movl	(%eax), %edx
	movl	-88(%ebp), %eax
	movzbl	(%edx,%eax), %eax
	movb	%al, -121(%ebp)
	leal	-121(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__unresolved_float__BR1, -116(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -64(%ebp)
	leal	-112(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-120(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-132(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__unresolved_float_CONCAT
	leal	-132(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__copysign, .-ahir_ieee_proposed__float_pkg__copysign
.globl ahir_ieee_proposed__float_pkg__scalbO1
	.type	ahir_ieee_proposed__float_pkg__scalbO1, @function
ahir_ieee_proposed__float_pkg__scalbO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$552, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -208(%ebp)
	movl	-208(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3579
	movl	-208(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -216(%ebp)
	jmp	.L3580
.L3579:
	movl	-208(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -216(%ebp)
.L3580:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -204(%ebp)
	movl	-204(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3581
	movl	-204(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -212(%ebp)
	jmp	.L3582
.L3581:
	movl	-204(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -212(%ebp)
.L3582:
	movl	-212(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-216(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -272(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -196(%ebp)
	movl	-196(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3583
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -200(%ebp)
	jmp	.L3584
.L3583:
	movl	-196(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -200(%ebp)
.L3584:
	movl	-200(%ebp), %eax
	movl	%eax, -268(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %edx
	movl	-268(%ebp), %eax
	movl	%eax, (%edx)
	movl	-272(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-192(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-192(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-192(%ebp), %eax
	movl	(%eax), %edx
	movl	-192(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -184(%ebp)
	cmpl	$0, -184(%ebp)
	jns	.L3585
	movl	$0, -188(%ebp)
	jmp	.L3586
.L3585:
	movl	-184(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -188(%ebp)
.L3586:
	movl	-192(%ebp), %edx
	movl	-188(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-276(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -496(%ebp)
	movl	-496(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -496(%ebp)
	movl	-496(%ebp), %ecx
	movl	%ecx, -260(%ebp)
	movl	-276(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	$0, -176(%ebp)
.L3588:
	movl	-176(%ebp), %eax
	cmpl	-180(%ebp), %eax
	je	.L3587
	movl	-176(%ebp), %edx
	movl	-260(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -176(%ebp)
	jmp	.L3588
.L3587:
	leal	-288(%ebp), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %edx
	movl	-268(%ebp), %eax
	movl	%eax, (%edx)
	movl	-272(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-172(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-172(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-172(%ebp), %eax
	movl	(%eax), %edx
	movl	-172(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -164(%ebp)
	cmpl	$0, -164(%ebp)
	jns	.L3589
	movl	$0, -168(%ebp)
	jmp	.L3590
.L3589:
	movl	-164(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -168(%ebp)
.L3590:
	movl	-172(%ebp), %edx
	movl	-168(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-276(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -492(%ebp)
	movl	-492(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -492(%ebp)
	movl	-492(%ebp), %ecx
	movl	%ecx, -256(%ebp)
	movl	-276(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	$0, -156(%ebp)
.L3592:
	movl	-156(%ebp), %eax
	cmpl	-160(%ebp), %eax
	je	.L3591
	movl	-156(%ebp), %edx
	movl	-256(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -156(%ebp)
	jmp	.L3592
.L3591:
	leal	-304(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-268(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-152(%ebp), %eax
	movl	%edx, (%eax)
	movl	-152(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-152(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-152(%ebp), %eax
	movl	(%eax), %edx
	movl	-152(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -144(%ebp)
	cmpl	$0, -144(%ebp)
	jns	.L3593
	movl	$0, -148(%ebp)
	jmp	.L3594
.L3593:
	movl	-144(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -148(%ebp)
.L3594:
	movl	-152(%ebp), %edx
	movl	-148(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-292(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-252(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -488(%ebp)
	movl	-488(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -488(%ebp)
	movl	-488(%ebp), %ecx
	movl	%ecx, -248(%ebp)
	movl	-292(%ebp), %eax
	movl	%eax, -140(%ebp)
	movl	$0, -136(%ebp)
.L3596:
	movl	-136(%ebp), %eax
	cmpl	-140(%ebp), %eax
	je	.L3595
	movl	-136(%ebp), %edx
	movl	-248(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -136(%ebp)
	jmp	.L3596
.L3595:
	leal	-320(%ebp), %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %edx
	movl	-268(%ebp), %eax
	movl	%eax, (%edx)
	movl	-132(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-132(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-132(%ebp), %eax
	movl	(%eax), %edx
	movl	-132(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -124(%ebp)
	cmpl	$0, -124(%ebp)
	jns	.L3597
	movl	$0, -128(%ebp)
	jmp	.L3598
.L3597:
	movl	-124(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -128(%ebp)
.L3598:
	movl	-132(%ebp), %edx
	movl	-128(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-308(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-244(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -484(%ebp)
	movl	-484(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -484(%ebp)
	movl	-484(%ebp), %ecx
	movl	%ecx, -240(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	$0, -116(%ebp)
.L3600:
	movl	-116(%ebp), %eax
	cmpl	-120(%ebp), %eax
	je	.L3599
	movl	-116(%ebp), %edx
	movl	-240(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -116(%ebp)
	jmp	.L3600
.L3599:
	leal	-336(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-112(%ebp), %edx
	movl	-272(%ebp), %eax
	movl	%eax, (%edx)
	movl	-112(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-112(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-112(%ebp), %eax
	movl	(%eax), %edx
	movl	-112(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -104(%ebp)
	cmpl	$0, -104(%ebp)
	jns	.L3601
	movl	$0, -108(%ebp)
	jmp	.L3602
.L3601:
	movl	-104(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -108(%ebp)
.L3602:
	movl	-112(%ebp), %edx
	movl	-108(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-324(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-236(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -480(%ebp)
	movl	-480(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -480(%ebp)
	movl	-480(%ebp), %ecx
	movl	%ecx, -232(%ebp)
	movl	-324(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	$0, -96(%ebp)
.L3604:
	movl	-96(%ebp), %eax
	cmpl	-100(%ebp), %eax
	je	.L3603
	movl	-96(%ebp), %edx
	movl	-232(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -96(%ebp)
	jmp	.L3604
.L3603:
	leal	-352(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	-268(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	cmpl	$0, -84(%ebp)
	jns	.L3605
	movl	$0, -88(%ebp)
	jmp	.L3606
.L3605:
	movl	-84(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -88(%ebp)
.L3606:
	movl	-92(%ebp), %edx
	movl	-88(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-340(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	-228(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -476(%ebp)
	movl	-476(%ebp), %ecx
	movl	%ecx, -224(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -80(%ebp)
	movl	-268(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-360(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__gen_expon_base
	leal	-360(%ebp), %eax
	movl	%eax, -76(%ebp)
.L3609:
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-340(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3607
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-224(%ebp), %ecx
	movl	-228(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-80(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movb	$0, -217(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -72(%ebp)
	movb	$1, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-368(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_01
	leal	-368(%ebp), %eax
	movl	%eax, -68(%ebp)
	jmp	.L3608
.L3607:
	movl	$_UI00000000, %eax
	movl	$13346, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3609
.L3608:
	movl	-68(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-276(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3610
	movl	-68(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-260(%ebp), %ecx
	movl	-264(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-72(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-276(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-260(%ebp), %eax
	movl	%eax, -376(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -372(%ebp)
	movzbl	24(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-376(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -217(%ebp)
	movzbl	-217(%ebp), %eax
	movb	%al, -497(%ebp)
	cmpb	$1, -497(%ebp)
	jbe	.L3612
	cmpb	$10, -497(%ebp)
	je	.L3613
	jmp	.L3627
.L3610:
	movl	$_UI00000000, %eax
	movl	$13350, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3608
.L3613:
	movl	%esp, %eax
	movl	%eax, -468(%ebp)
	movl	-264(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	40(%esp), %ecx
	movl	%ecx, -472(%ebp)
	movl	-472(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -472(%ebp)
	movl	-472(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-276(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	$0, -56(%ebp)
.L3615:
	movl	-56(%ebp), %eax
	cmpl	-60(%ebp), %eax
	je	.L3614
	movl	-56(%ebp), %edx
	movl	-64(%ebp), %eax
	movb	$1, (%eax,%edx)
	addl	$1, -56(%ebp)
	jmp	.L3615
.L3614:
	movl	-64(%ebp), %eax
	movl	-256(%ebp), %ecx
	movl	-264(%ebp), %edx
	movl	%edx, 8(%esp)
	movl	%eax, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-468(%ebp), %esp
	jmp	.L3616
.L3612:
	call	__ghdl_stack2_mark
	movl	%eax, -52(%ebp)
	movl	-272(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-384(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-384(%ebp), %eax
	movl	%eax, -48(%ebp)
.L3618:
	movl	-48(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-276(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3617
	movl	-48(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-256(%ebp), %ecx
	movl	-264(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-52(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3616
.L3617:
	movl	$_UI00000000, %eax
	movl	$13357, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3618
.L3627:
	movl	-276(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-260(%ebp), %eax
	movl	%eax, -392(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -388(%ebp)
	movl	-324(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-232(%ebp), %eax
	movl	%eax, -400(%ebp)
	leal	-336(%ebp), %eax
	movl	%eax, -396(%ebp)
	movl	-292(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-248(%ebp), %eax
	movl	%eax, -408(%ebp)
	leal	-304(%ebp), %eax
	movl	%eax, -404(%ebp)
	leal	-408(%ebp), %eax
	movl	%eax, 16(%esp)
	leal	-400(%ebp), %eax
	movl	%eax, 12(%esp)
	movzbl	28(%ebp), %eax
	movb	%al, 8(%esp)
	movzbl	-217(%ebp), %eax
	movb	%al, 4(%esp)
	leal	-392(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__break_numberO2
	call	__ghdl_stack2_mark
	movl	%eax, -44(%ebp)
	movl	-292(%ebp), %eax
	movl	%eax, -252(%ebp)
	movl	-248(%ebp), %eax
	movl	%eax, -432(%ebp)
	leal	-304(%ebp), %eax
	movl	%eax, -428(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-432(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-424(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__resizeO1
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-424(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-416(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-416(%ebp), %eax
	movl	%eax, -40(%ebp)
.L3622:
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-308(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3619
	movl	-40(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-240(%ebp), %ecx
	movl	-244(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-44(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -36(%ebp)
	movl	-324(%ebp), %eax
	movl	%eax, -236(%ebp)
	movl	-232(%ebp), %eax
	movl	%eax, -448(%ebp)
	leal	-336(%ebp), %eax
	movl	%eax, -444(%ebp)
	movl	-308(%ebp), %eax
	movl	%eax, -244(%ebp)
	movl	-240(%ebp), %eax
	movl	%eax, -456(%ebp)
	leal	-320(%ebp), %eax
	movl	%eax, -452(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -24(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3620
	jmp	.L3628
.L3619:
	movl	$_UI00000000, %eax
	movl	$13366, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3622
.L3620:
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3623
.L3628:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3623:
	movl	-24(%ebp), %eax
	movl	(%eax), %eax
	subl	-20(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %edx
	movl	-260(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__to_x01O3
	movl	%eax, %edx
	movl	$0, 36(%esp)
	movzbl	28(%ebp), %eax
	movb	%al, 32(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 28(%esp)
	movl	-272(%ebp), %eax
	movl	%eax, 24(%esp)
	movl	-268(%ebp), %eax
	movl	%eax, 20(%esp)
	movb	$2, 16(%esp)
	movb	%dl, 12(%esp)
	leal	-456(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-448(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-440(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__normalizeO1
	leal	-440(%ebp), %eax
	movl	%eax, -28(%ebp)
.L3625:
	movl	-28(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-276(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3624
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-256(%ebp), %ecx
	movl	-264(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-36(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	jmp	.L3616
.L3624:
	movl	$_UI00000000, %eax
	movl	$13367, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3625
.L3616:
	movl	-276(%ebp), %eax
	movl	%eax, -264(%ebp)
	movl	-256(%ebp), %eax
	movl	%eax, -464(%ebp)
	leal	-288(%ebp), %eax
	movl	%eax, -460(%ebp)
	leal	-464(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__scalbO1, .-ahir_ieee_proposed__float_pkg__scalbO1
.globl ahir_ieee_proposed__float_pkg__scalbO2
	.type	ahir_ieee_proposed__float_pkg__scalbO2, @function
ahir_ieee_proposed__float_pkg__scalbO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	movl	$-2147483648, -12(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, -12(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movzbl	28(%ebp), %eax
	movb	%al, 20(%esp)
	movzbl	24(%ebp), %eax
	movb	%al, 16(%esp)
	movzbl	20(%ebp), %eax
	movb	%al, 12(%esp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-20(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__scalbO1
	leal	-20(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__scalbO2, .-ahir_ieee_proposed__float_pkg__scalbO2
.globl ahir_ieee_proposed__float_pkg__logbO1
	.type	ahir_ieee_proposed__float_pkg__logbO1, @function
ahir_ieee_proposed__float_pkg__logbO1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	subl	$580, %esp
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -276(%ebp)
	movl	-276(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3632
	movl	-276(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -284(%ebp)
	jmp	.L3633
.L3632:
	movl	-276(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -284(%ebp)
.L3633:
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -272(%ebp)
	movl	-272(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3634
	movl	-272(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -280(%ebp)
	jmp	.L3635
.L3634:
	movl	-272(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -280(%ebp)
.L3635:
	movl	-280(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-284(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__mine
	negl	%eax
	movl	%eax, -336(%ebp)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -264(%ebp)
	movl	-264(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3636
	movl	-264(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -268(%ebp)
	jmp	.L3637
.L3636:
	movl	-264(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -268(%ebp)
.L3637:
	movl	-268(%ebp), %eax
	movl	%eax, -332(%ebp)
	movl	$-2147483648, -328(%ebp)
	leal	-352(%ebp), %eax
	movl	%eax, -260(%ebp)
	movl	-260(%ebp), %edx
	movl	-332(%ebp), %eax
	movl	%eax, (%edx)
	movl	-336(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-260(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-260(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-260(%ebp), %eax
	movl	(%eax), %edx
	movl	-260(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -252(%ebp)
	cmpl	$0, -252(%ebp)
	jns	.L3638
	movl	$0, -256(%ebp)
	jmp	.L3639
.L3638:
	movl	-252(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -256(%ebp)
.L3639:
	movl	-260(%ebp), %edx
	movl	-256(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-340(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-324(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -560(%ebp)
	movl	-560(%ebp), %edx
	movl	%edx, -320(%ebp)
	movl	-340(%ebp), %eax
	movl	%eax, -248(%ebp)
	movl	$0, -244(%ebp)
.L3641:
	movl	-244(%ebp), %eax
	cmpl	-248(%ebp), %eax
	je	.L3640
	movl	-244(%ebp), %edx
	movl	-320(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -244(%ebp)
	jmp	.L3641
.L3640:
	leal	-368(%ebp), %eax
	movl	%eax, -240(%ebp)
	movl	-332(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-240(%ebp), %eax
	movl	%edx, (%eax)
	movl	-240(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-240(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-240(%ebp), %eax
	movl	(%eax), %edx
	movl	-240(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -232(%ebp)
	cmpl	$0, -232(%ebp)
	jns	.L3642
	movl	$0, -236(%ebp)
	jmp	.L3643
.L3642:
	movl	-232(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -236(%ebp)
.L3643:
	movl	-240(%ebp), %edx
	movl	-236(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-356(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-316(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -556(%ebp)
	movl	-556(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -556(%ebp)
	movl	-556(%ebp), %edx
	movl	%edx, -312(%ebp)
	movl	-356(%ebp), %eax
	movl	%eax, -228(%ebp)
	movl	$0, -224(%ebp)
.L3645:
	movl	-224(%ebp), %eax
	cmpl	-228(%ebp), %eax
	je	.L3644
	movl	-224(%ebp), %edx
	movl	-312(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -224(%ebp)
	jmp	.L3645
.L3644:
	leal	-384(%ebp), %eax
	movl	%eax, -220(%ebp)
	movl	-220(%ebp), %edx
	movl	-336(%ebp), %eax
	movl	%eax, (%edx)
	movl	-220(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-220(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-220(%ebp), %eax
	movl	(%eax), %edx
	movl	-220(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -212(%ebp)
	cmpl	$0, -212(%ebp)
	jns	.L3646
	movl	$0, -216(%ebp)
	jmp	.L3647
.L3646:
	movl	-212(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -216(%ebp)
.L3647:
	movl	-220(%ebp), %edx
	movl	-216(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-372(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-308(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -552(%ebp)
	movl	-552(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -552(%ebp)
	movl	-552(%ebp), %edx
	movl	%edx, -304(%ebp)
	movl	-372(%ebp), %eax
	movl	%eax, -208(%ebp)
	movl	$0, -204(%ebp)
.L3649:
	movl	-204(%ebp), %eax
	cmpl	-208(%ebp), %eax
	je	.L3648
	movl	-204(%ebp), %edx
	movl	-304(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -204(%ebp)
	jmp	.L3649
.L3648:
	movl	-332(%ebp), %eax
	subl	$1, %eax
	movl	%eax, 4(%esp)
	movl	$2, (%esp)
	call	__ghdl_integer_exp
	subl	$1, %eax
	movl	%eax, -300(%ebp)
	movb	$0, -293(%ebp)
	call	__ghdl_stack2_mark
	movl	%eax, -200(%ebp)
	movb	$1, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-424(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_01
	leal	-424(%ebp), %eax
	movl	%eax, -196(%ebp)
.L3654:
	movl	-196(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-340(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3650
	movl	-196(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-320(%ebp), %ecx
	movl	-324(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-200(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-340(%ebp), %eax
	movl	%eax, -324(%ebp)
	movl	-320(%ebp), %eax
	movl	%eax, -432(%ebp)
	leal	-352(%ebp), %eax
	movl	%eax, -428(%ebp)
	movb	$1, 4(%esp)
	leal	-432(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -293(%ebp)
	cmpb	$10, -293(%ebp)
	ja	.L3651
	movsbl	-293(%ebp),%ecx
	movl	$1, %eax
	movl	%eax, %edx
	sall	%cl, %edx
	movl	%edx, -564(%ebp)
	movl	-564(%ebp), %eax
	andl	$144, %eax
	testl	%eax, %eax
	jne	.L3653
	movl	-564(%ebp), %eax
	andl	$1027, %eax
	testl	%eax, %eax
	jne	.L3652
	jmp	.L3651
.L3650:
	movl	$_UI00000000, %eax
	movl	$13413, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3654
.L3652:
	movl	$0, -328(%ebp)
	jmp	.L3655
.L3653:
	leal	-384(%ebp), %eax
	movl	%eax, -188(%ebp)
	movl	-188(%ebp), %eax
	movl	(%eax), %eax
	subl	-336(%ebp), %eax
	movl	%eax, -180(%ebp)
	movl	-180(%ebp), %eax
	movl	%eax, -184(%ebp)
	movl	-180(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-188(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -184(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3656
	movl	$_UI00000000, %eax
	movl	$13420, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3656:
	movl	-184(%ebp), %eax
	movl	%eax, -192(%ebp)
	movl	-192(%ebp), %edx
	movl	-304(%ebp), %eax
	movb	$2, (%eax,%edx)
	leal	-400(%ebp), %eax
	movl	%eax, -176(%ebp)
	movl	-336(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-176(%ebp), %eax
	movl	%edx, (%eax)
	movl	-176(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-176(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-176(%ebp), %eax
	movl	(%eax), %edx
	movl	-176(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -168(%ebp)
	cmpl	$0, -168(%ebp)
	jns	.L3657
	movl	$0, -172(%ebp)
	jmp	.L3658
.L3657:
	movl	-168(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -172(%ebp)
.L3658:
	movl	-176(%ebp), %edx
	movl	-172(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-388(%ebp), %eax
	movl	%eax, -292(%ebp)
	leal	-384(%ebp), %eax
	movl	%eax, -164(%ebp)
	leal	-400(%ebp), %eax
	movl	%eax, -160(%ebp)
	movl	-164(%ebp), %eax
	movl	(%eax), %edx
	movl	-160(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %eax
	movl	%eax, -152(%ebp)
	movl	-156(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-160(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-152(%ebp), %edx
	movl	-164(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3659
	movl	$_UI00000000, %eax
	movl	$13421, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3659:
	call	__ghdl_stack2_mark
	movl	%eax, -148(%ebp)
	leal	-456(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	-120(%ebp), %eax
	movl	$-1, (%eax)
	movl	-336(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-120(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-120(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-120(%ebp), %eax
	movl	(%eax), %edx
	movl	-120(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -112(%ebp)
	cmpl	$0, -112(%ebp)
	jns	.L3660
	movl	$0, -116(%ebp)
	jmp	.L3661
.L3660:
	movl	-112(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -116(%ebp)
.L3661:
	movl	-120(%ebp), %edx
	movl	-116(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-444(%ebp), %eax
	movl	%eax, -144(%ebp)
	leal	-352(%ebp), %eax
	movl	%eax, -140(%ebp)
	leal	-456(%ebp), %eax
	movl	%eax, -136(%ebp)
	movl	-140(%ebp), %eax
	movl	(%eax), %edx
	movl	-136(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -132(%ebp)
	movl	-132(%ebp), %eax
	movl	%eax, -128(%ebp)
	movl	-132(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-136(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-128(%ebp), %edx
	movl	-140(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3662
	movl	$_UI00000000, %eax
	movl	$13422, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3662:
	movl	-444(%ebp), %eax
	movl	%eax, -144(%ebp)
	movl	-128(%ebp), %edx
	movl	-320(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -464(%ebp)
	leal	-456(%ebp), %eax
	movl	%eax, -460(%ebp)
	leal	-464(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-440(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-472(%ebp), %eax
	movl	%eax, -108(%ebp)
	leal	-440(%ebp), %eax
	movl	%eax, -104(%ebp)
	movl	-104(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -472(%ebp)
	leal	-488(%ebp), %eax
	movl	%eax, -468(%ebp)
	movl	-108(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -100(%ebp)
	movl	-104(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, (%eax)
	movl	-96(%ebp), %eax
	movl	4(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-96(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-100(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-96(%ebp), %eax
	movl	12(%eax), %edx
	movl	-100(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-472(%ebp), %eax
	movl	%eax, -124(%ebp)
.L3664:
	movl	-124(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-388(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3663
	movl	-124(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %ecx
	movl	-152(%ebp), %edx
	movl	-304(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-292(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-372(%ebp), %eax
	movl	%eax, -308(%ebp)
	movl	-304(%ebp), %eax
	movl	%eax, -496(%ebp)
	leal	-384(%ebp), %eax
	movl	%eax, -492(%ebp)
	movb	$3, 4(%esp)
	leal	-496(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__find_leftmostO2
	subl	-336(%ebp), %eax
	movl	%eax, -328(%ebp)
	movl	-300(%ebp), %eax
	negl	%eax
	addl	$1, %eax
	addl	%eax, -328(%ebp)
	jmp	.L3655
.L3663:
	movl	$_UI00000000, %eax
	movl	$13422, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3664
.L3651:
	leal	-416(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	-332(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-92(%ebp), %eax
	movl	%edx, (%eax)
	movl	-92(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-92(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-92(%ebp), %eax
	movl	(%eax), %edx
	movl	-92(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -84(%ebp)
	cmpl	$0, -84(%ebp)
	jns	.L3665
	movl	$0, -88(%ebp)
	jmp	.L3666
.L3665:
	movl	-84(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -88(%ebp)
.L3666:
	movl	-92(%ebp), %edx
	movl	-88(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-404(%ebp), %eax
	movl	%eax, -288(%ebp)
	leal	-352(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-416(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-76(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	-72(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-76(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-68(%ebp), %edx
	movl	-80(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3667
	movl	$_UI00000000, %eax
	movl	$13427, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3667:
	leal	-504(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-68(%ebp), %edx
	movl	-320(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -504(%ebp)
	leal	-520(%ebp), %eax
	movl	%eax, -500(%ebp)
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -52(%ebp)
	leal	-416(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, (%eax)
	movl	-48(%ebp), %eax
	movl	4(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-48(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-52(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-48(%ebp), %eax
	movl	12(%eax), %edx
	movl	-52(%ebp), %eax
	movl	%edx, 12(%eax)
	leal	-504(%ebp), %eax
	movl	%eax, -64(%ebp)
.L3671:
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-356(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3668
	movl	-64(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-312(%ebp), %ecx
	movl	-316(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	leal	-368(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	(%eax), %edx
	movl	-332(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-32(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -36(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	jne	.L3669
	jmp	.L3670
.L3668:
	movl	$_UI00000000, %eax
	movl	$13427, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3671
.L3669:
	movl	$_UI00000000, %eax
	movl	$13428, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3670:
	movl	-36(%ebp), %eax
	movl	%eax, -44(%ebp)
	leal	-368(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	-332(%ebp), %eax
	subl	$1, %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-16(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-24(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -20(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3672
	movl	$_UI00000000, %eax
	movl	$13428, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3672:
	movl	-20(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-44(%ebp), %ebx
	movl	-28(%ebp), %edx
	movl	-312(%ebp), %eax
	movzbl	(%eax,%edx), %eax
	movb	%al, (%esp)
	call	ieee__std_logic_1164__notO1
	movl	%eax, %edx
	movl	-312(%ebp), %eax
	movb	%dl, (%eax,%ebx)
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	-356(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-312(%ebp), %eax
	movl	%eax, -536(%ebp)
	leal	-368(%ebp), %eax
	movl	%eax, -532(%ebp)
	movl	$1, 8(%esp)
	leal	-536(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-528(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__OPPlO6
	leal	-528(%ebp), %eax
	movl	%eax, -8(%ebp)
.L3674:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-356(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3673
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-312(%ebp), %ecx
	movl	-316(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-356(%ebp), %eax
	movl	%eax, -316(%ebp)
	movl	-312(%ebp), %eax
	movl	%eax, -544(%ebp)
	leal	-368(%ebp), %eax
	movl	%eax, -540(%ebp)
	leal	-544(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_integerO2
	movl	%eax, -328(%ebp)
	jmp	.L3655
.L3673:
	movl	$_UI00000000, %eax
	movl	$13429, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3674
.L3655:
	movl	-328(%ebp), %eax
	movl	-4(%ebp), %ebx
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__logbO1, .-ahir_ieee_proposed__float_pkg__logbO1
.globl ahir_ieee_proposed__float_pkg__logbO2
	.type	ahir_ieee_proposed__float_pkg__logbO2, @function
ahir_ieee_proposed__float_pkg__logbO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3677
	movl	-36(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	jmp	.L3678
.L3677:
	movl	-36(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -40(%ebp)
.L3678:
	movl	-40(%ebp), %eax
	movl	%eax, -52(%ebp)
	leal	-68(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-52(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-32(%ebp), %eax
	movl	%edx, (%eax)
	movl	-32(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-32(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-32(%ebp), %eax
	movl	(%eax), %edx
	movl	-32(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
	cmpl	$0, -24(%ebp)
	jns	.L3679
	movl	$0, -28(%ebp)
	jmp	.L3680
.L3679:
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -28(%ebp)
.L3680:
	movl	-32(%ebp), %edx
	movl	-28(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-56(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %ecx
	movl	%ecx, -44(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	$0, -16(%ebp)
.L3682:
	movl	-16(%ebp), %eax
	cmpl	-20(%ebp), %eax
	je	.L3681
	movl	-16(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$0, (%eax,%edx)
	addl	$1, -16(%ebp)
	jmp	.L3682
.L3681:
	call	__ghdl_stack2_mark
	movl	%eax, -12(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__logbO1
	movl	%eax, %edx
	movl	-52(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	leal	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	ieee__numeric_std__to_signed
	leal	-76(%ebp), %eax
	movl	%eax, -8(%ebp)
.L3684:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %edx
	movl	-56(%ebp), %eax
	cmpl	%eax, %edx
	jne	.L3683
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	-44(%ebp), %ecx
	movl	-48(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, (%esp)
	call	__ghdl_memcpy
	movl	-12(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	movl	-56(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -84(%ebp)
	leal	-68(%ebp), %eax
	movl	%eax, -80(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3683:
	movl	$_UI00000000, %eax
	movl	$13443, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3684
	.size	ahir_ieee_proposed__float_pkg__logbO2, .-ahir_ieee_proposed__float_pkg__logbO2
.globl ahir_ieee_proposed__float_pkg__unordered
	.type	ahir_ieee_proposed__float_pkg__unordered, @function
ahir_ieee_proposed__float_pkg__unordered:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -7(%ebp)
	movb	$0, -6(%ebp)
	movb	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -7(%ebp)
	movb	$1, 4(%esp)
	movl	12(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -6(%ebp)
	cmpb	$0, -7(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L3687
	cmpb	$1, -7(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L3687:
	movzbl	-1(%ebp), %eax
	movb	%al, -2(%ebp)
	cmpb	$0, -2(%ebp)
	jne	.L3688
	cmpb	$0, -6(%ebp)
	sete	%al
	movb	%al, -2(%ebp)
.L3688:
	movzbl	-2(%ebp), %eax
	movb	%al, -3(%ebp)
	cmpb	$0, -3(%ebp)
	jne	.L3689
	cmpb	$1, -6(%ebp)
	sete	%al
	movb	%al, -3(%ebp)
.L3689:
	movzbl	-3(%ebp), %eax
	movb	%al, -4(%ebp)
	cmpb	$0, -4(%ebp)
	jne	.L3690
	cmpb	$10, -7(%ebp)
	sete	%al
	movb	%al, -4(%ebp)
.L3690:
	movzbl	-4(%ebp), %eax
	movb	%al, -5(%ebp)
	cmpb	$0, -5(%ebp)
	jne	.L3691
	cmpb	$10, -6(%ebp)
	sete	%al
	movb	%al, -5(%ebp)
.L3691:
	cmpb	$0, -5(%ebp)
	je	.L3692
	movb	$1, -17(%ebp)
	jmp	.L3693
.L3692:
	movb	$0, -17(%ebp)
.L3693:
	movzbl	-17(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__unordered, .-ahir_ieee_proposed__float_pkg__unordered
.globl ahir_ieee_proposed__float_pkg__finite
	.type	ahir_ieee_proposed__float_pkg__finite, @function
ahir_ieee_proposed__float_pkg__finite:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -2(%ebp)
	movb	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -2(%ebp)
	cmpb	$9, -2(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L3696
	cmpb	$2, -2(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L3696:
	cmpb	$0, -1(%ebp)
	je	.L3697
	movb	$1, -17(%ebp)
	jmp	.L3698
.L3697:
	movb	$0, -17(%ebp)
.L3698:
	movzbl	-17(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__finite, .-ahir_ieee_proposed__float_pkg__finite
.globl ahir_ieee_proposed__float_pkg__isnan
	.type	ahir_ieee_proposed__float_pkg__isnan, @function
ahir_ieee_proposed__float_pkg__isnan:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$40, %esp
	movb	$0, -2(%ebp)
	movb	$1, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__classfp
	movb	%al, -2(%ebp)
	cmpb	$0, -2(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
	cmpb	$0, -1(%ebp)
	jne	.L3701
	cmpb	$1, -2(%ebp)
	sete	%al
	movb	%al, -1(%ebp)
.L3701:
	cmpb	$0, -1(%ebp)
	je	.L3702
	movb	$1, -17(%ebp)
	jmp	.L3703
.L3702:
	movb	$0, -17(%ebp)
.L3703:
	movzbl	-17(%ebp), %eax
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__isnan, .-ahir_ieee_proposed__float_pkg__isnan
.globl ahir_ieee_proposed__float_pkg__zerofpO1
	.type	ahir_ieee_proposed__float_pkg__zerofpO1, @function
ahir_ieee_proposed__float_pkg__zerofpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	leal	-48(%ebp), %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-24(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-24(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-24(%ebp), %eax
	movl	(%eax), %edx
	movl	-24(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -16(%ebp)
	cmpl	$0, -16(%ebp)
	jns	.L3706
	movl	$0, -20(%ebp)
	jmp	.L3707
.L3706:
	movl	-16(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -20(%ebp)
.L3707:
	movl	-24(%ebp), %edx
	movl	-20(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -68(%ebp)
	movl	-68(%ebp), %ecx
	movl	%ecx, -28(%ebp)
	movl	-36(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$0, -8(%ebp)
.L3709:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L3708
	movl	-8(%ebp), %edx
	movl	-28(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -8(%ebp)
	jmp	.L3709
.L3708:
	movl	-36(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-28(%ebp), %eax
	movl	%eax, -56(%ebp)
	leal	-48(%ebp), %eax
	movl	%eax, -52(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__zerofpO1, .-ahir_ieee_proposed__float_pkg__zerofpO1
.globl ahir_ieee_proposed__float_pkg__nanfpO1
	.type	ahir_ieee_proposed__float_pkg__nanfpO1, @function
ahir_ieee_proposed__float_pkg__nanfpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$184, %esp
	leal	-124(%ebp), %eax
	movl	%eax, -96(%ebp)
	movl	-96(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-96(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-96(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-96(%ebp), %eax
	movl	(%eax), %edx
	movl	-96(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -88(%ebp)
	cmpl	$0, -88(%ebp)
	jns	.L3712
	movl	$0, -92(%ebp)
	jmp	.L3713
.L3712:
	movl	-88(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -92(%ebp)
.L3713:
	movl	-96(%ebp), %edx
	movl	-92(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-112(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -172(%ebp)
	movl	-172(%ebp), %ecx
	movl	%ecx, -104(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	$0, -80(%ebp)
.L3715:
	movl	-80(%ebp), %eax
	cmpl	-84(%ebp), %eax
	je	.L3714
	movl	-80(%ebp), %edx
	movl	-104(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -80(%ebp)
	jmp	.L3715
.L3714:
	leal	-140(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	12(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-76(%ebp), %eax
	movl	%edx, (%eax)
	movl	-76(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-76(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-76(%ebp), %eax
	movl	(%eax), %edx
	movl	-76(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -68(%ebp)
	cmpl	$0, -68(%ebp)
	jns	.L3716
	movl	$0, -72(%ebp)
	jmp	.L3717
.L3716:
	movl	-68(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -72(%ebp)
.L3717:
	movl	-76(%ebp), %edx
	movl	-72(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-128(%ebp), %eax
	movl	%eax, -100(%ebp)
	movl	%esp, %eax
	movl	%eax, -164(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -64(%ebp)
	leal	-140(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	-64(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
	movl	-56(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	-56(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-60(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-52(%ebp), %edx
	movl	-64(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3718
	movl	$_UI00000000, %eax
	movl	$13509, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3718:
	movl	-100(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -168(%ebp)
	movl	-168(%ebp), %ecx
	movl	%ecx, -48(%ebp)
	movl	-128(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	$0, -40(%ebp)
.L3720:
	movl	-40(%ebp), %eax
	cmpl	-44(%ebp), %eax
	je	.L3719
	movl	-40(%ebp), %edx
	movl	-48(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -40(%ebp)
	jmp	.L3720
.L3719:
	movl	-48(%ebp), %ecx
	movl	-52(%ebp), %edx
	movl	-104(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-100(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-164(%ebp), %esp
	leal	-124(%ebp), %eax
	movl	%eax, -32(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %eax
	addl	$1, %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-24(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -28(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3721
	movl	$_UI00000000, %eax
	movl	$13511, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3721:
	movl	-28(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %edx
	movl	-104(%ebp), %eax
	movb	$2, (%eax,%edx)
	leal	-124(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %edx
	movl	16(%ebp), %eax
	negl	%eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -12(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3722
	movl	$_UI00000000, %eax
	movl	$13518, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3722:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %edx
	movl	-104(%ebp), %eax
	movb	$3, (%eax,%edx)
	movl	-112(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	-104(%ebp), %eax
	movl	%eax, -148(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -144(%ebp)
	leal	-148(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nanfpO1, .-ahir_ieee_proposed__float_pkg__nanfpO1
.globl ahir_ieee_proposed__float_pkg__qnanfpO1
	.type	ahir_ieee_proposed__float_pkg__qnanfpO1, @function
ahir_ieee_proposed__float_pkg__qnanfpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$168, %esp
	leal	-108(%ebp), %eax
	movl	%eax, -80(%ebp)
	movl	-80(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-80(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-80(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-80(%ebp), %eax
	movl	(%eax), %edx
	movl	-80(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -72(%ebp)
	cmpl	$0, -72(%ebp)
	jns	.L3725
	movl	$0, -76(%ebp)
	jmp	.L3726
.L3725:
	movl	-72(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -76(%ebp)
.L3726:
	movl	-80(%ebp), %edx
	movl	-76(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-96(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	-92(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -156(%ebp)
	movl	-156(%ebp), %ecx
	movl	%ecx, -88(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	$0, -64(%ebp)
.L3728:
	movl	-64(%ebp), %eax
	cmpl	-68(%ebp), %eax
	je	.L3727
	movl	-64(%ebp), %edx
	movl	-88(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -64(%ebp)
	jmp	.L3728
.L3727:
	leal	-124(%ebp), %eax
	movl	%eax, -60(%ebp)
	movl	12(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-60(%ebp), %eax
	movl	%edx, (%eax)
	movl	-60(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-60(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-60(%ebp), %eax
	movl	(%eax), %edx
	movl	-60(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -52(%ebp)
	cmpl	$0, -52(%ebp)
	jns	.L3729
	movl	$0, -56(%ebp)
	jmp	.L3730
.L3729:
	movl	-52(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -56(%ebp)
.L3730:
	movl	-60(%ebp), %edx
	movl	-56(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-112(%ebp), %eax
	movl	%eax, -84(%ebp)
	movl	%esp, %eax
	movl	%eax, -148(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -48(%ebp)
	leal	-124(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-48(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-40(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-44(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-36(%ebp), %edx
	movl	-48(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3731
	movl	$_UI00000000, %eax
	movl	$13529, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3731:
	movl	-84(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -152(%ebp)
	movl	-152(%ebp), %ecx
	movl	%ecx, -32(%ebp)
	movl	-112(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$0, -24(%ebp)
.L3733:
	movl	-24(%ebp), %eax
	cmpl	-28(%ebp), %eax
	je	.L3732
	movl	-24(%ebp), %edx
	movl	-32(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -24(%ebp)
	jmp	.L3733
.L3732:
	movl	-32(%ebp), %ecx
	movl	-36(%ebp), %edx
	movl	-88(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-148(%ebp), %esp
	leal	-108(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	addl	$1, %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -12(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3734
	movl	$_UI00000000, %eax
	movl	$13531, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3734:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %edx
	movl	-88(%ebp), %eax
	movb	$3, (%eax,%edx)
	movl	-96(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	-88(%ebp), %eax
	movl	%eax, -132(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -128(%ebp)
	leal	-132(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qnanfpO1, .-ahir_ieee_proposed__float_pkg__qnanfpO1
.globl ahir_ieee_proposed__float_pkg__pos_inffpO1
	.type	ahir_ieee_proposed__float_pkg__pos_inffpO1, @function
ahir_ieee_proposed__float_pkg__pos_inffpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	leal	-92(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-64(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-64(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
	cmpl	$0, -56(%ebp)
	jns	.L3737
	movl	$0, -60(%ebp)
	jmp	.L3738
.L3737:
	movl	-56(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -60(%ebp)
.L3738:
	movl	-64(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %ecx
	movl	%ecx, -72(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	$0, -48(%ebp)
.L3740:
	movl	-48(%ebp), %eax
	cmpl	-52(%ebp), %eax
	je	.L3739
	movl	-48(%ebp), %edx
	movl	-72(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -48(%ebp)
	jmp	.L3740
.L3739:
	leal	-108(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	12(%ebp), %eax
	leal	-1(%eax), %edx
	movl	-44(%ebp), %eax
	movl	%edx, (%eax)
	movl	-44(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	jns	.L3741
	movl	$0, -40(%ebp)
	jmp	.L3742
.L3741:
	movl	-36(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -40(%ebp)
.L3742:
	movl	-44(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-96(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	%esp, %eax
	movl	%eax, -132(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -32(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-20(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3743
	movl	$_UI00000000, %eax
	movl	$13543, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3743:
	movl	-68(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %ecx
	movl	%ecx, -16(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$0, -8(%ebp)
.L3745:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L3744
	movl	-8(%ebp), %edx
	movl	-16(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -8(%ebp)
	jmp	.L3745
.L3744:
	movl	-16(%ebp), %ecx
	movl	-20(%ebp), %edx
	movl	-72(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-132(%ebp), %esp
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -116(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__pos_inffpO1, .-ahir_ieee_proposed__float_pkg__pos_inffpO1
.globl ahir_ieee_proposed__float_pkg__neg_inffpO1
	.type	ahir_ieee_proposed__float_pkg__neg_inffpO1, @function
ahir_ieee_proposed__float_pkg__neg_inffpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	leal	-92(%ebp), %eax
	movl	%eax, -64(%ebp)
	movl	-64(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-64(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-64(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-64(%ebp), %eax
	movl	(%eax), %edx
	movl	-64(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -56(%ebp)
	cmpl	$0, -56(%ebp)
	jns	.L3748
	movl	$0, -60(%ebp)
	jmp	.L3749
.L3748:
	movl	-56(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -60(%ebp)
.L3749:
	movl	-64(%ebp), %edx
	movl	-60(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-76(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -140(%ebp)
	movl	-140(%ebp), %ecx
	movl	%ecx, -72(%ebp)
	movl	-80(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	$0, -48(%ebp)
.L3751:
	movl	-48(%ebp), %eax
	cmpl	-52(%ebp), %eax
	je	.L3750
	movl	-48(%ebp), %edx
	movl	-72(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -48(%ebp)
	jmp	.L3751
.L3750:
	leal	-108(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	-44(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	-44(%ebp), %eax
	movl	$0, 4(%eax)
	movl	-44(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-44(%ebp), %eax
	movl	(%eax), %edx
	movl	-44(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -36(%ebp)
	cmpl	$0, -36(%ebp)
	jns	.L3752
	movl	$0, -40(%ebp)
	jmp	.L3753
.L3752:
	movl	-36(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -40(%ebp)
.L3753:
	movl	-44(%ebp), %edx
	movl	-40(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-96(%ebp), %eax
	movl	%eax, -68(%ebp)
	movl	%esp, %eax
	movl	%eax, -132(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -32(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	-32(%ebp), %eax
	movl	(%eax), %edx
	movl	-28(%ebp), %eax
	movl	(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -24(%ebp)
	movl	-24(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %ecx
	movl	-28(%ebp), %eax
	movl	12(%eax), %eax
	movl	%eax, %edx
	addl	-20(%ebp), %edx
	movl	-32(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, %edx
	seta	%al
	orl	%ecx, %eax
	testb	%al, %al
	je	.L3754
	movl	$_UI00000000, %eax
	movl	$13554, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3754:
	movl	-68(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -136(%ebp)
	movl	-136(%ebp), %ecx
	movl	%ecx, -16(%ebp)
	movl	-96(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$0, -8(%ebp)
.L3756:
	movl	-8(%ebp), %eax
	cmpl	-12(%ebp), %eax
	je	.L3755
	movl	-8(%ebp), %edx
	movl	-16(%ebp), %eax
	movb	$3, (%eax,%edx)
	addl	$1, -8(%ebp)
	jmp	.L3756
.L3755:
	movl	-16(%ebp), %ecx
	movl	-20(%ebp), %edx
	movl	-72(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	%ecx, 4(%esp)
	movl	%edx, (%esp)
	call	__ghdl_memcpy
	movl	-132(%ebp), %esp
	movl	-80(%ebp), %eax
	movl	%eax, -76(%ebp)
	movl	-72(%ebp), %eax
	movl	%eax, -116(%ebp)
	leal	-92(%ebp), %eax
	movl	%eax, -112(%ebp)
	leal	-116(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__neg_inffpO1, .-ahir_ieee_proposed__float_pkg__neg_inffpO1
.globl ahir_ieee_proposed__float_pkg__neg_zerofpO1
	.type	ahir_ieee_proposed__float_pkg__neg_zerofpO1, @function
ahir_ieee_proposed__float_pkg__neg_zerofpO1:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$104, %esp
	leal	-64(%ebp), %eax
	movl	%eax, -40(%ebp)
	movl	-40(%ebp), %edx
	movl	12(%ebp), %eax
	movl	%eax, (%edx)
	movl	16(%ebp), %eax
	movl	%eax, %edx
	negl	%edx
	movl	-40(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-40(%ebp), %eax
	movb	$1, 8(%eax)
	movl	-40(%ebp), %eax
	movl	(%eax), %edx
	movl	-40(%ebp), %eax
	movl	4(%eax), %eax
	movl	%edx, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, -32(%ebp)
	cmpl	$0, -32(%ebp)
	jns	.L3759
	movl	$0, -36(%ebp)
	jmp	.L3760
.L3759:
	movl	-32(%ebp), %eax
	addl	$1, %eax
	movl	%eax, -36(%ebp)
.L3760:
	movl	-40(%ebp), %edx
	movl	-36(%ebp), %eax
	movl	%eax, 12(%edx)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-48(%ebp), %eax
	addl	$15, %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	subl	%eax, %esp
	leal	12(%esp), %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %eax
	addl	$15, %eax
	shrl	$4, %eax
	sall	$4, %eax
	movl	%eax, -84(%ebp)
	movl	-84(%ebp), %ecx
	movl	%ecx, -44(%ebp)
	movl	-52(%ebp), %eax
	movl	%eax, -28(%ebp)
	movl	$0, -24(%ebp)
.L3762:
	movl	-24(%ebp), %eax
	cmpl	-28(%ebp), %eax
	je	.L3761
	movl	-24(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$2, (%eax,%edx)
	addl	$1, -24(%ebp)
	jmp	.L3762
.L3761:
	leal	-64(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	-16(%ebp), %eax
	movl	(%eax), %eax
	subl	12(%ebp), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-8(%ebp), %eax
	shrl	$31, %eax
	movl	%eax, %edx
	movl	-16(%ebp), %eax
	movl	12(%eax), %eax
	cmpl	%eax, -12(%ebp)
	setae	%al
	orl	%edx, %eax
	testb	%al, %al
	je	.L3763
	movl	$_UI00000000, %eax
	movl	$13565, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
.L3763:
	movl	-12(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-20(%ebp), %edx
	movl	-44(%ebp), %eax
	movb	$3, (%eax,%edx)
	movl	-52(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	-44(%ebp), %eax
	movl	%eax, -72(%ebp)
	leal	-64(%ebp), %eax
	movl	%eax, -68(%ebp)
	leal	-72(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__neg_zerofpO1, .-ahir_ieee_proposed__float_pkg__neg_zerofpO1
.globl ahir_ieee_proposed__float_pkg__zerofpO2
	.type	ahir_ieee_proposed__float_pkg__zerofpO2, @function
ahir_ieee_proposed__float_pkg__zerofpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3766
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3767
.L3766:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3767:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3768
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3769
.L3768:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3769:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__zerofpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__zerofpO2, .-ahir_ieee_proposed__float_pkg__zerofpO2
.globl ahir_ieee_proposed__float_pkg__nanfpO2
	.type	ahir_ieee_proposed__float_pkg__nanfpO2, @function
ahir_ieee_proposed__float_pkg__nanfpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3772
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3773
.L3772:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3773:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3774
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3775
.L3774:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3775:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__nanfpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__nanfpO2, .-ahir_ieee_proposed__float_pkg__nanfpO2
.globl ahir_ieee_proposed__float_pkg__qnanfpO2
	.type	ahir_ieee_proposed__float_pkg__qnanfpO2, @function
ahir_ieee_proposed__float_pkg__qnanfpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3778
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3779
.L3778:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3779:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3780
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3781
.L3780:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3781:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__qnanfpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__qnanfpO2, .-ahir_ieee_proposed__float_pkg__qnanfpO2
.globl ahir_ieee_proposed__float_pkg__pos_inffpO2
	.type	ahir_ieee_proposed__float_pkg__pos_inffpO2, @function
ahir_ieee_proposed__float_pkg__pos_inffpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3784
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3785
.L3784:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3785:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3786
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3787
.L3786:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3787:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__pos_inffpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__pos_inffpO2, .-ahir_ieee_proposed__float_pkg__pos_inffpO2
.globl ahir_ieee_proposed__float_pkg__neg_inffpO2
	.type	ahir_ieee_proposed__float_pkg__neg_inffpO2, @function
ahir_ieee_proposed__float_pkg__neg_inffpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3790
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3791
.L3790:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3791:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3792
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3793
.L3792:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3793:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_inffpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__neg_inffpO2, .-ahir_ieee_proposed__float_pkg__neg_inffpO2
.globl ahir_ieee_proposed__float_pkg__neg_zerofpO2
	.type	ahir_ieee_proposed__float_pkg__neg_zerofpO2, @function
ahir_ieee_proposed__float_pkg__neg_zerofpO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$56, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-8(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	je	.L3796
	movl	-8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -20(%ebp)
	jmp	.L3797
.L3796:
	movl	-8(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -20(%ebp)
.L3797:
	movl	12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %eax
	testb	%al, %al
	jne	.L3798
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -16(%ebp)
	jmp	.L3799
.L3798:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -16(%ebp)
.L3799:
	movl	-16(%ebp), %eax
	negl	%eax
	movl	%eax, 8(%esp)
	movl	-20(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__neg_zerofpO1
	leal	-32(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__neg_zerofpO2, .-ahir_ieee_proposed__float_pkg__neg_zerofpO2
.globl ahir_ieee_proposed__float_pkg__to_floatO11
	.type	ahir_ieee_proposed__float_pkg__to_floatO11, @function
ahir_ieee_proposed__float_pkg__to_floatO11:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	20(%ebp), %eax
	movl	%eax, 12(%esp)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO1
	leal	-32(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO11, .-ahir_ieee_proposed__float_pkg__to_floatO11
.globl ahir_ieee_proposed__float_pkg__to_floatO12
	.type	ahir_ieee_proposed__float_pkg__to_floatO12, @function
ahir_ieee_proposed__float_pkg__to_floatO12:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$88, %esp
	call	__ghdl_stack2_mark
	movl	%eax, -24(%ebp)
	leal	-40(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -40(%ebp)
	leal	-56(%ebp), %eax
	movl	%eax, -36(%ebp)
	movl	-16(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -8(%ebp)
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	-4(%ebp), %eax
	movl	(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, (%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movzbl	8(%eax), %edx
	movl	-8(%ebp), %eax
	movb	%dl, 8(%eax)
	movl	-4(%ebp), %eax
	movl	12(%eax), %edx
	movl	-8(%ebp), %eax
	movl	%edx, 12(%eax)
	movl	16(%ebp), %eax
	movl	%eax, 8(%esp)
	leal	-40(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-32(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO10
	leal	-32(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-20(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-20(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__to_floatO12, .-ahir_ieee_proposed__float_pkg__to_floatO12
.globl ahir_ieee_proposed__float_pkg__realtobitsO2
	.type	ahir_ieee_proposed__float_pkg__realtobitsO2, @function
ahir_ieee_proposed__float_pkg__realtobitsO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$152, %esp
	movl	12(%ebp), %eax
	movl	%eax, -120(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -116(%ebp)
	movl	$0, -20(%ebp)
.L3807:
	cmpl	$64, -20(%ebp)
	je	.L3806
	movl	-20(%ebp), %eax
	movb	$0, -84(%ebp,%eax)
	addl	$1, -20(%ebp)
	jmp	.L3807
.L3806:
	call	__ghdl_stack2_mark
	movl	%eax, -16(%ebp)
	movb	$1, 24(%esp)
	movb	$0, 20(%esp)
	movl	$52, 16(%esp)
	movl	$11, 12(%esp)
	fldl	-120(%ebp)
	fstpl	4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO3
	leal	-92(%ebp), %eax
	movl	%eax, -12(%ebp)
.L3809:
	movl	-12(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$64, %eax
	jne	.L3808
	movl	-12(%ebp), %eax
	movl	(%eax), %eax
	movl	$64, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-16(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	leal	-84(%ebp), %eax
	movl	%eax, -108(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float64__STB, -104(%ebp)
	leal	-108(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-100(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_slv
	leal	-100(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	$16, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, 4(%eax)
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	$16, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_allocate
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	8(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	movl	%eax, %ecx
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%ecx, 8(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	leave
	ret
.L3808:
	movl	$_UI00000000, %eax
	movl	$13650, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3809
	.size	ahir_ieee_proposed__float_pkg__realtobitsO2, .-ahir_ieee_proposed__float_pkg__realtobitsO2
.globl ahir_ieee_proposed__float_pkg__bitstorealO2
	.type	ahir_ieee_proposed__float_pkg__bitstorealO2, @function
ahir_ieee_proposed__float_pkg__bitstorealO2:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$120, %esp
	movl	$0, -12(%ebp)
.L3813:
	cmpl	$64, -12(%ebp)
	je	.L3812
	movl	-12(%ebp), %eax
	movb	$0, -76(%ebp,%eax)
	addl	$1, -12(%ebp)
	jmp	.L3813
.L3812:
	call	__ghdl_stack2_mark
	movl	%eax, -8(%ebp)
	movl	$52, 12(%esp)
	movl	$11, 8(%esp)
	movl	8(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-84(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_floatO11
	leal	-84(%ebp), %eax
	movl	%eax, -4(%ebp)
.L3815:
	movl	-4(%ebp), %eax
	movl	4(%eax), %eax
	movl	12(%eax), %eax
	cmpl	$64, %eax
	jne	.L3814
	movl	-4(%ebp), %eax
	movl	(%eax), %eax
	movl	$64, 8(%esp)
	movl	%eax, 4(%esp)
	leal	-76(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_memcpy
	movl	-8(%ebp), %eax
	movl	%eax, (%esp)
	call	__ghdl_stack2_release
	leal	-76(%ebp), %eax
	movl	%eax, -92(%ebp)
	movl	$ahir_ieee_proposed__float_pkg__float64__STB, -88(%ebp)
	movb	$1, 8(%esp)
	movb	$1, 4(%esp)
	leal	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	ahir_ieee_proposed__float_pkg__to_real
	leave
	ret
.L3814:
	movl	$_UI00000000, %eax
	movl	$13659, 4(%esp)
	movl	%eax, (%esp)
	call	__ghdl_bound_check_failed_l1
	jmp	.L3815
	.size	ahir_ieee_proposed__float_pkg__bitstorealO2, .-ahir_ieee_proposed__float_pkg__bitstorealO2
.globl ahir_ieee_proposed__float_pkg__ELAB_BODY
	.type	ahir_ieee_proposed__float_pkg__ELAB_BODY, @function
ahir_ieee_proposed__float_pkg__ELAB_BODY:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movzbl	ahir_ieee_proposed__float_pkg__ELABORATED, %eax
	testb	%al, %al
	jne	.L3823
	movb	$1, ahir_ieee_proposed__float_pkg__ELABORATED
	call	ahir_ieee_proposed__float_pkg__ELAB_SPEC
	movzbl	ahir_ieee_proposed__float_pkg__ELABORATED, %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3819
	call	ahir_ieee_proposed__float_pkg__ELAB_BODY
.L3819:
	movl	$1, -16(%ebp)
	movl	$0, -12(%ebp)
.L3821:
	movl	-12(%ebp), %eax
	cmpl	-16(%ebp), %eax
	je	.L3820
	movl	-12(%ebp), %eax
	movb	$2, ahir_ieee_proposed__float_pkg__nafp(%eax)
	addl	$1, -12(%ebp)
	jmp	.L3821
.L3820:
	movl	$1, -8(%ebp)
	movl	$0, -4(%ebp)
.L3822:
	movl	-4(%ebp), %eax
	cmpl	-8(%ebp), %eax
	je	.L3823
	movl	-4(%ebp), %eax
	movb	$2, ahir_ieee_proposed__float_pkg__nslv(%eax)
	addl	$1, -4(%ebp)
	jmp	.L3822
.L3823:
	leave
	ret
	.size	ahir_ieee_proposed__float_pkg__ELAB_BODY, .-ahir_ieee_proposed__float_pkg__ELAB_BODY
	.section	.rodata
	.align 8
.LC0:
	.long	-1
	.long	-1048577
	.align 8
.LC3:
	.long	0
	.long	1073741824
	.align 8
.LC5:
	.long	-1
	.long	2146435071
	.ident	"GCC: (GNU) 4.3.4"
	.section	.note.GNU-stack,"",@progbits

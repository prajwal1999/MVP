// matrix order.
$parameter MATRIX_ORDER 	32

// storage for the matrix A
// stores xth column st. {x mod 4 == 0 }  
$storage A_0: $array [MATRIX_ORDER][{MATRIX_ORDER/4}] $of $uint<32>
// stores xth column st. {x mod 4 == 1 }  
$storage A_1: $array [MATRIX_ORDER][{MATRIX_ORDER/4}] $of $uint<32>
// stores xth column st. {x mod 4 == 2 }  
$storage A_2: $array [MATRIX_ORDER][{MATRIX_ORDER/4}] $of $uint<32>
// stores xth column st. {x mod 4 == 3 }  
$storage A_3: $array [MATRIX_ORDER][{MATRIX_ORDER/4}] $of $uint<32>

// storage for input vector x
// stores ith value st. {i mod 4 == 0 }
$storage x_0: $array [{MATRIX_ORDER/4}] $of $uint<32>
// stores ith value st. {i mod 4 == 1 }
$storage x_1: $array [{MATRIX_ORDER/4}] $of $uint<32>
// stores ith value st. {i mod 4 == 2 }
$storage x_2: $array [{MATRIX_ORDER/4}] $of $uint<32>
// stores ith value st. {i mod 4 == 3 }
$storage x_3: $array [{MATRIX_ORDER/4}] $of $uint<32>

// storage for output vector y.
$storage y: $array [MATRIX_ORDER] $of $uint<32>

// in-data pipe
$pipe in_data: $uint<32> $depth 2

// out-data pipe
$pipe out_data: $uint<32> $depth 2

// helper module for reading the matrix and  populating the A array.
$module [readMatrix] $in () $out () $is
{
	$branchblock[mRead] {

		$merge $entry outer_loopback
			$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on outer_loopback
		$endmerge


			nI := (I + 1) 
			$merge $entry inner_loopback
				$phi J := ($bitcast ($uint<8>) 0) $on $entry nJ $on inner_loopback
			$endmerge 
			nJ := (J + 1)

			$volatile J_idx := ($slice J 1 0)
			Jr := ($slice J 7 2)

			aval := in_data

			$volatile J_idx_0 := (J_idx == 0)
			$volatile J_idx_1 := (J_idx == 1)
			$volatile J_idx_2 := (J_idx == 2)
			$volatile J_idx_3 := (J_idx == 3)

			// Assign A matrix to A0, A1, A2, A3 storages

			$guard (J_idx_0) A_0[I][Jr] := aval
			$guard (J_idx_0) $rreport (readMatrix_with_J_idx_0   J_idx_0 I J Jr aval)

			$guard (J_idx_1) A_1[I][Jr] := aval
			$guard (J_idx_1) $rreport (readMatrix_with_J_idx_1  J_idx I J Jr aval)

			$guard (J_idx_2) A_2[I][Jr] := aval
			$guard (J_idx_2) $rreport (readMatrix_with_J_idx_2  J_idx I J Jr aval)

			$guard (J_idx_3) A_3[I][Jr] := aval
			$guard (J_idx_3) $rreport (readMatrix_with_J_idx_3  J_idx I J Jr aval)


			$if (nJ < MATRIX_ORDER) $then
				$place [inner_loopback]
			$endif
				
		$if (nI < MATRIX_ORDER) $then
				$place [outer_loopback]
		$endif
	}
}

// helper module which reads the vector x.
$module [readVector] $in () $out () $is
{
	$branchblock [loop] {
		$dopipeline $depth 7 $fullrate
			$merge $entry $loopback
				$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on $loopback
			$endmerge 

			$volatile I_idx := ($slice I 1 0)
			$volatile Ir := ($slice I 7 2)

			temp_val := in_data

			$volatile I_idx_0 := (I_idx == 0)
			$volatile I_idx_1 := (I_idx == 1)
			$volatile I_idx_2 := (I_idx == 2)
			$volatile I_idx_3 := (I_idx == 3)

			$guard (I_idx_0) x_0[Ir] := temp_val
			$guard (I_idx_0) $rreport (readInput_with_I_idx_0   I_idx_0 I I_idx Ir temp_val)

			$guard (I_idx_1) x_1[Ir] := temp_val
			$guard (I_idx_1) $rreport (readInput_with_I_idx_1   I_idx_1 I I_idx Ir temp_val)

			$guard (I_idx_2) x_2[Ir] := temp_val
			$guard (I_idx_2) $rreport (readInput_with_I_idx_2   I_idx_2 I I_idx Ir temp_val)

			$guard (I_idx_3) x_3[Ir] := temp_val
			$guard (I_idx_3) $rreport (readInput_with_I_idx_3   I_idx_3 I I_idx Ir temp_val)

			$volatile nI := (I + 1)
		$while (nI < MATRIX_ORDER)
	}
}

// helper module which sends the calculated value of y to the external world.
$module [sendVector] $in () $out () $is
{
	$branchblock [loop] {
		$dopipeline $depth 7 $fullrate
			$merge $entry $loopback
				$phi I := ($bitcast ($uint<8>) 0) $on $entry nI $on $loopback
			$endmerge 
			out_data := y[I]
			$volatile nI := (I + 1)
		$while (nI < MATRIX_ORDER)
	}
}



// dot product of the R'th row of A with the vector x. This gives the R'th element of Y.
$module [ dotP_even ] $in (R: $uint<8>) $out (result: $uint<32>) $is
{
	$branchblock[mmloop] {
		$dopipeline $depth 15 $fullrate
			$merge $entry $loopback 
				$phi C := ($bitcast ($uint<8>) 0) $on $entry nC $on $loopback
				$phi val_0 := ($bitcast ($uint<32>) 0) $on $entry nval_0 $on $loopback
				$phi val_1 := ($bitcast ($uint<32>) 0) $on $entry nval_1 $on $loopback
				$phi val_2 := ($bitcast ($uint<32>) 0) $on $entry nval_2 $on $loopback
				$phi val_3 := ($bitcast ($uint<32>) 0) $on $entry nval_3 $on $loopback
			$endmerge

			$volatile Cr := ($slice C 7 2)

			// Parallel reads from different memories
			a_rc_0 := A_0[R][Cr]
			a_rc_1 := A_1[R][Cr]
			a_rc_2 := A_2[R][Cr]
			a_rc_3 := A_3[R][Cr]

			xval_0 := x_0[Cr]
			xval_1 := x_1[Cr]
			xval_2 := x_2[Cr]
			xval_3 := x_3[Cr]

			$volatile nval_0 := (val_0 + (a_rc_0 * xval_0))
			$rreport (dotP_even Cr_0 val_0 a_rc_0 xval_0 nval_0)

			$volatile nval_1 := (val_1 + (a_rc_1 * xval_1))
			$rreport (dotP_even Cr_1 val_1 a_rc_1 xval_1 nval_1)

			$volatile nval_2 := (val_2 + (a_rc_2 * xval_2))
			$rreport (dotP_even Cr_2 val_2 a_rc_2 xval_2 nval_2)

			$volatile nval_3 := (val_3 + (a_rc_3 * xval_3))
			$rreport (dotP_even Cr_3 val_3 a_rc_3 xval_3 nval_3)

			nC := (C + 4)

		$while (nC < MATRIX_ORDER)
	} (nval_0=>nval_0 nval_1=>nval_1 nval_2=>nval_2 nval_3=>nval_3 )
	result := ( nval_0 + (nval_1 + (nval_2 + nval_3) ) )
}



// dot product of the R'th row of A with the vector x. This gives the R'th element of Y.
$module [ dotP_odd ] $in (R: $uint<8>) $out (result: $uint<32>) $is
{
	$branchblock[mmloop] {
		$dopipeline $depth 15 $fullrate
			$merge $entry $loopback 
				$phi C := ($bitcast ($uint<8>) 0) $on $entry nC $on $loopback
				$phi val_0 := ($bitcast ($uint<32>) 0) $on $entry nval_0 $on $loopback
				$phi val_1 := ($bitcast ($uint<32>) 0) $on $entry nval_1 $on $loopback
				$phi val_2 := ($bitcast ($uint<32>) 0) $on $entry nval_2 $on $loopback
				$phi val_3 := ($bitcast ($uint<32>) 0) $on $entry nval_3 $on $loopback
			$endmerge

			$volatile Cr := ($slice C 7 2)

			// Parallel reads from different memories
			a_rc_0 := A_0[R][Cr]
			a_rc_1 := A_1[R][Cr]
			a_rc_2 := A_2[R][Cr]
			a_rc_3 := A_3[R][Cr]

			xval_0 := x_0[Cr]
			xval_1 := x_1[Cr]
			xval_2 := x_2[Cr]
			xval_3 := x_3[Cr]

			$volatile nval_0 := (val_0 + (a_rc_0 * xval_0))
			$rreport (dotP_odd Cr_0 val_0 a_rc_0 xval_0 nval_0)

			$volatile nval_1 := (val_1 + (a_rc_1 * xval_1))
			$rreport (dotP_odd Cr_1 val_1 a_rc_1 xval_1 nval_1)

			$volatile nval_2 := (val_2 + (a_rc_2 * xval_2))
			$rreport (dotP_odd Cr_2 val_2 a_rc_2 xval_2 nval_2)

			$volatile nval_3 := (val_3 + (a_rc_3 * xval_3))
			$rreport (dotP_odd Cr_3 val_3 a_rc_3 xval_3 nval_3)

			nC := (C + 4)

		$while (nC < MATRIX_ORDER)
	} (nval_0=>nval_0 nval_1=>nval_1 nval_2=>nval_2 nval_3=>nval_3 )
	result := ( nval_0 + (nval_1 + (nval_2 + nval_3) ) )
}


// main module which performs A.x = y. assumes that A, x are available.
$module [multiplyMatrixVector] $in () $out () $is
{
	// dot product loop
	$branchblock[mmloop] {
		$merge $entry loopback 
			$phi R := ($bitcast ($uint<8>) 0) $on $entry nR $on loopback
		$endmerge

			$call dotP_even (R) (val_even)
			$call dotP_odd ((R+1)) (val_odd)

			y[R] := val_even
			y[(R+1)] := val_odd

			nR := (R + 1)
		$if (nR < MATRIX_ORDER) $then
			$place [loopback]
		$endif

	}
}

// main thread: reads the matrix, and works on vectors..
$module [mvp_daemon] $in () $out () $is
{
	// read the matrix.
	$call readMatrix () ()

	$branchblock [loop] {

		$merge $entry loopback $endmerge

<<<<<<< HEAD
		$rreport (InputReadStarted Input_Read)
		$call readVector () ()
		$call multiplyMatrixVector () ()
		$call sendVector () ()
		$rreport (OutputReceived Output_Sent)
=======
		$call readVector () ()
		$call multiplyMatrixVector () ()
		$call sendVector () ()
>>>>>>> eb195423f5b9041da92b7e2c4b2cd451b47fe109

		$place [loopback]
	}
}

